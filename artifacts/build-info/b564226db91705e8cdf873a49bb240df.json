{"id":"b564226db91705e8cdf873a49bb240df","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"contracts/PalmNFT.sol":{"content":"pragma solidity 0.8.20;\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\";\r\n\r\ncontract ACL is AccessControlEnumerable {\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\r\n\r\n    modifier onlyMinter() {\r\n        require(\r\n            hasRole(MINTER_ROLE, msg.sender),\r\n            \"Caller does not has a MINTER_ROLE\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyBurner() {\r\n        require(\r\n            hasRole(BURNER_ROLE, msg.sender),\r\n            \"Caller does not has a BURNER_ROLE\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Caller does not has a DEFAULT_ADMIN_ROLE\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function grantAdmin(address admin) external onlyAdmin {\r\n        grantRole(DEFAULT_ADMIN_ROLE, admin);\r\n    }\r\n\r\n    function revokeAdmin(address admin) external onlyAdmin {\r\n        revokeRole(DEFAULT_ADMIN_ROLE, admin);\r\n    }\r\n\r\n    function grantMinter(address minter) external onlyAdmin {\r\n        grantRole(MINTER_ROLE, minter);\r\n    }\r\n\r\n    function revokeMinter(address minter) external onlyAdmin {\r\n        revokeRole(MINTER_ROLE, minter);\r\n    }\r\n\r\n    function grantBurner(address burner) external onlyAdmin {\r\n        grantRole(BURNER_ROLE, burner);\r\n    }\r\n\r\n    function revokeBurner(address burner) external onlyAdmin {\r\n        revokeRole(BURNER_ROLE, burner);\r\n    }\r\n}\r\n\r\ncontract PalmNFT is ERC721URIStorage, ERC721Enumerable, ACL {\r\n    event Memo(string memo);\r\n\r\n    bool public isPubliclyMintable = false;\r\n    bool public isSBT = false; //soul-bound nft\r\n    uint256 private _tokenIds;\r\n\r\n    mapping(address => bool) public freezeAccounts;\r\n\r\n    event Freeze(address account);\r\n    event Unfreeze(address account);\r\n\r\n\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked);\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    constructor() ERC721(\"Palm-NFT\", \"PalmNFT\") {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _grantRole(MINTER_ROLE, msg.sender);\r\n        _grantRole(BURNER_ROLE, msg.sender);\r\n    }\r\n\r\n    function setPubliclyMintable(bool mintable) public onlyAdmin {\r\n        isPubliclyMintable = mintable;\r\n    }\r\n\r\n    function setToSBT(bool SBT) public onlyAdmin {\r\n        isSBT = SBT;\r\n    }\r\n\r\n    function freeze(address account) public onlyAdmin {\r\n        freezeAccounts[account] = true;\r\n        emit Freeze(account);\r\n    }\r\n\r\n    function unfreeze(address account) public onlyAdmin {\r\n        freezeAccounts[account] = false;\r\n        emit Freeze(account);\r\n    }\r\n\r\n    function safeMint(address to, string memory uri) public noReentrant returns (uint256) {\r\n        bool isMinter = hasRole(MINTER_ROLE, msg.sender);\r\n\r\n        if (isPubliclyMintable || isMinter) {\r\n            uint256 tokenId = _tokenIds;\r\n            _safeMint(to, tokenId);\r\n            _setTokenURI(tokenId, uri);\r\n            _tokenIds += 1;\r\n\r\n            return tokenId;\r\n        } else {\r\n            require(isPubliclyMintable, \"This NFT is not publicly mintable\");\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setTokenURI(uint256 tokenId, string memory uri) public onlyAdmin {\r\n        _setTokenURI(tokenId, uri);\r\n    }\r\n\r\n    function burn(uint256 tokenId) public {\r\n        require(!isSBT, \"This NFT was not permitted to burn\");\r\n        require(freezeAccounts[msg.sender] != true, \"Caller has been freeze\");\r\n\r\n        bool isBurner = hasRole(BURNER_ROLE, msg.sender);\r\n        if (isBurner) {\r\n            _burn(tokenId);\r\n        } else {\r\n            require(\r\n                msg.sender == ownerOf(tokenId),\r\n                \"Caller does not own this NFT\"\r\n            );\r\n\r\n            _burn(tokenId);\r\n        }\r\n    }\r\n    function transfer(address to, uint256 tokenId) public {\r\n        require(!isSBT, \"This NFT was not permitted to transfer\");\r\n        require(freezeAccounts[msg.sender] != true, \"Caller has been freeze\");\r\n        safeTransferFrom(msg.sender, to, tokenId);\r\n    }\r\n\r\n\r\n    function safeTransfer(address to, uint256 tokenId) public {\r\n        require(!isSBT, \"This NFT was not permitted to transfer\");\r\n        require(freezeAccounts[msg.sender] != true, \"Caller has been freeze\");\r\n        safeTransferFrom(msg.sender, to, tokenId);\r\n    }\r\n\r\n    // overrides\r\n\r\n    // The following functions are overrides required by Solidity.\r\n\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    function _increaseBalance(\r\n        address account, \r\n        uint128 value\r\n    ) internal override(ERC721, ERC721Enumerable) {\r\n        super._increaseBalance(account, value);\r\n    }\r\n\r\n    function _update(\r\n        address to, \r\n        uint256 tokenId, \r\n        address auth\r\n    ) internal virtual override(ERC721, ERC721Enumerable) returns (address){\r\n        return super._update(to, tokenId, auth);\r\n    }\r\n\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    )\r\n        public\r\n        view\r\n        override(AccessControlEnumerable, ERC721Enumerable, ERC721URIStorage)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}"},"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControlEnumerable} from \"./IAccessControlEnumerable.sol\";\nimport {AccessControl} from \"../AccessControl.sol\";\nimport {EnumerableSet} from \"../../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 role => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\n        bool granted = super._grantRole(role, account);\n        if (granted) {\n            _roleMembers[role].add(account);\n        }\n        return granted;\n    }\n\n    /**\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\n        bool revoked = super._revokeRole(role, account);\n        if (revoked) {\n            _roleMembers[role].remove(account);\n        }\n        return revoked;\n    }\n}\n"},"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"../IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\nimport {IERC721} from \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"},"@openzeppelin/contracts/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../token/ERC721/IERC721.sol\";\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {IERC721Enumerable} from \"./IERC721Enumerable.sol\";\nimport {IERC165} from \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\n * of all the token ids in the contract as well as all token ids owned by each account.\n *\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\n\n    uint256[] private _allTokens;\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\n\n    /**\n     * @dev An `owner`'s token query was out of bounds for `index`.\n     *\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\n     */\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\n\n    /**\n     * @dev Batch mint is not allowed.\n     */\n    error ERC721EnumerableForbiddenBatchMint();\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\n        if (index >= balanceOf(owner)) {\n            revert ERC721OutOfBoundsIndex(owner, index);\n        }\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\n        if (index >= totalSupply()) {\n            revert ERC721OutOfBoundsIndex(address(0), index);\n        }\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_update}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        if (previousOwner == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n\n        return previousOwner;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = balanceOf(to) - 1;\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = balanceOf(from);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\n     */\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\n        if (amount > 0) {\n            revert ERC721EnumerableForbiddenBatchMint();\n        }\n        super._increaseBalance(account, amount);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Strings} from \"../../../utils/Strings.sol\";\nimport {IERC4906} from \"../../../interfaces/IERC4906.sol\";\nimport {IERC165} from \"../../../interfaces/IERC165.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\n    // defines events and does not include any external function.\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\n\n    // Optional mapping for token URIs\n    mapping(uint256 tokenId => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\n        if (bytes(_tokenURI).length > 0) {\n            return string.concat(base, _tokenURI);\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        _tokenURIs[tokenId] = _tokenURI;\n        emit MetadataUpdate(tokenId);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/PalmNFT.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/PalmNFT.sol","start":-1},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[295],"Context":[2451],"ERC165":[2730],"IAccessControl":[378]},"id":296,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:0"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":379,"src":"134:52:0","symbolAliases":[{"foreign":{"id":2,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"142:14:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":2452,"src":"187:45:0","symbolAliases":[{"foreign":{"id":4,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"195:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":2731,"src":"233:57:0","symbolAliases":[{"foreign":{"id":6,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"241:6:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"Context","nameLocations":["1988:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":2451,"src":"1988:7:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"1988:7:0"},{"baseName":{"id":11,"name":"IAccessControl","nameLocations":["1997:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"1997:14:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"1997:14:0"},{"baseName":{"id":13,"name":"ERC165","nameLocations":["2013:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2730,"src":"2013:6:0"},"id":14,"nodeType":"InheritanceSpecifier","src":"2013:6:0"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"292:1660:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":295,"linearizedBaseContracts":[295,2730,2742,378,2451],"name":"AccessControl","nameLocation":"1971:13:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":21,"members":[{"constant":false,"id":18,"mutability":"mutable","name":"hasRole","nameLocation":"2085:7:0","nodeType":"VariableDeclaration","scope":21,"src":"2052:40:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":17,"keyName":"account","keyNameLocation":"2068:7:0","keyType":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"2060:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2052:32:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":16,"name":"bool","nodeType":"ElementaryTypeName","src":"2079:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":20,"mutability":"mutable","name":"adminRole","nameLocation":"2110:9:0","nodeType":"VariableDeclaration","scope":21,"src":"2102:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2102:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2033:8:0","nodeType":"StructDefinition","scope":295,"src":"2026:100:0","visibility":"public"},{"constant":false,"id":26,"mutability":"mutable","name":"_roles","nameLocation":"2174:6:0","nodeType":"VariableDeclaration","scope":295,"src":"2132:48:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":25,"keyName":"role","keyNameLocation":"2148:4:0","keyType":{"id":22,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2140:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2132:33:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":24,"nodeType":"UserDefinedTypeName","pathNode":{"id":23,"name":"RoleData","nameLocations":["2156:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":21,"src":"2156:8:0"},"referencedDeclaration":21,"src":"2156:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":29,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2211:18:0","nodeType":"VariableDeclaration","scope":295,"src":"2187:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":27,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":28,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2232:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":39,"nodeType":"Block","src":"2454:44:0","statements":[{"expression":{"arguments":[{"id":35,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"2475:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":34,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[93,114],"referencedDeclaration":93,"src":"2464:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2464:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":37,"nodeType":"ExpressionStatement","src":"2464:16:0"},{"id":38,"nodeType":"PlaceholderStatement","src":"2490:1:0"}]},"documentation":{"id":30,"nodeType":"StructuredDocumentation","src":"2243:174:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with an {AccessControlUnauthorizedAccount} error including the required role."},"id":40,"name":"onlyRole","nameLocation":"2431:8:0","nodeType":"ModifierDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"role","nameLocation":"2448:4:0","nodeType":"VariableDeclaration","scope":40,"src":"2440:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":31,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2440:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2439:14:0"},"src":"2422:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[2729],"body":{"id":61,"nodeType":"Block","src":"2656:111:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"2673:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":51,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"2693:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$378_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$378_$","typeString":"type(contract IAccessControl)"}],"id":50,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2688:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":52,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2688:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$378","typeString":"type(contract IAccessControl)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2709:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"2688:32:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2673:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":57,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"2748:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":55,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2724:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$295_$","typeString":"type(contract super AccessControl)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2730:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2729,"src":"2724:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":58,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2724:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2673:87:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":48,"id":60,"nodeType":"Return","src":"2666:94:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"2504:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2574:17:0","nodeType":"FunctionDefinition","overrides":{"id":45,"nodeType":"OverrideSpecifier","overrides":[],"src":"2632:8:0"},"parameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"interfaceId","nameLocation":"2599:11:0","nodeType":"VariableDeclaration","scope":62,"src":"2592:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":42,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2592:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2591:20:0"},"returnParameters":{"id":48,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"2650:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":46,"name":"bool","nodeType":"ElementaryTypeName","src":"2650:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2649:6:0"},"scope":295,"src":"2565:202:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[345],"body":{"id":79,"nodeType":"Block","src":"2937:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":72,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"2954:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":74,"indexExpression":{"id":73,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"2961:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2954:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":75,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2967:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"2954:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":77,"indexExpression":{"id":76,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"2975:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2954:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":71,"id":78,"nodeType":"Return","src":"2947:36:0"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"2773:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":80,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2863:7:0","nodeType":"FunctionDefinition","parameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"role","nameLocation":"2879:4:0","nodeType":"VariableDeclaration","scope":80,"src":"2871:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":64,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2871:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"account","nameLocation":"2893:7:0","nodeType":"VariableDeclaration","scope":80,"src":"2885:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":66,"name":"address","nodeType":"ElementaryTypeName","src":"2885:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2870:31:0"},"returnParameters":{"id":71,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80,"src":"2931:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":69,"name":"bool","nodeType":"ElementaryTypeName","src":"2931:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2930:6:0"},"scope":295,"src":"2854:136:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":92,"nodeType":"Block","src":"3255:47:0","statements":[{"expression":{"arguments":[{"id":87,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"3276:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":88,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"3282:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3282:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[93,114],"referencedDeclaration":114,"src":"3265:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3265:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":91,"nodeType":"ExpressionStatement","src":"3265:30:0"}]},"documentation":{"id":81,"nodeType":"StructuredDocumentation","src":"2996:198:0","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier."},"id":93,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3208:10:0","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"mutability":"mutable","name":"role","nameLocation":"3227:4:0","nodeType":"VariableDeclaration","scope":93,"src":"3219:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":82,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3219:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3218:14:0"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"3255:0:0"},"scope":295,"src":"3199:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":113,"nodeType":"Block","src":"3505:124:0","statements":[{"condition":{"id":105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3519:23:0","subExpression":{"arguments":[{"id":102,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"3528:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":103,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"3534:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":101,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3520:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3520:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":112,"nodeType":"IfStatement","src":"3515:108:0","trueBody":{"id":111,"nodeType":"Block","src":"3544:79:0","statements":[{"errorCall":{"arguments":[{"id":107,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"3598:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":108,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"3607:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":106,"name":"AccessControlUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"3565:32:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32) pure"}},"id":109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3565:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":110,"nodeType":"RevertStatement","src":"3558:54:0"}]}}]},"documentation":{"id":94,"nodeType":"StructuredDocumentation","src":"3308:119:0","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n is missing `role`."},"id":114,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3441:10:0","nodeType":"FunctionDefinition","parameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"role","nameLocation":"3460:4:0","nodeType":"VariableDeclaration","scope":114,"src":"3452:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":95,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3452:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"account","nameLocation":"3474:7:0","nodeType":"VariableDeclaration","scope":114,"src":"3466:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"3466:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3451:31:0"},"returnParameters":{"id":100,"nodeType":"ParameterList","parameters":[],"src":"3505:0:0"},"scope":295,"src":"3432:197:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[353],"body":{"id":127,"nodeType":"Block","src":"3884:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":122,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"3901:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":124,"indexExpression":{"id":123,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"3908:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3901:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":125,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3914:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":20,"src":"3901:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":121,"id":126,"nodeType":"Return","src":"3894:29:0"}]},"documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"3635:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":128,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"3819:12:0","nodeType":"FunctionDefinition","parameters":{"id":118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"role","nameLocation":"3840:4:0","nodeType":"VariableDeclaration","scope":128,"src":"3832:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3832:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3831:14:0"},"returnParameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":128,"src":"3875:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":119,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3875:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3874:9:0"},"scope":295,"src":"3810:120:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[361],"body":{"id":146,"nodeType":"Block","src":"4320:42:0","statements":[{"expression":{"arguments":[{"id":142,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"4341:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":143,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"4347:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":141,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"4330:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4330:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":145,"nodeType":"ExpressionStatement","src":"4330:25:0"}]},"documentation":{"id":129,"nodeType":"StructuredDocumentation","src":"3936:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":147,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":137,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"4313:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":136,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"4300:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4300:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":139,"kind":"modifierInvocation","modifierName":{"id":135,"name":"onlyRole","nameLocations":["4291:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"4291:8:0"},"nodeType":"ModifierInvocation","src":"4291:28:0"}],"name":"grantRole","nameLocation":"4235:9:0","nodeType":"FunctionDefinition","parameters":{"id":134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":131,"mutability":"mutable","name":"role","nameLocation":"4253:4:0","nodeType":"VariableDeclaration","scope":147,"src":"4245:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4245:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":133,"mutability":"mutable","name":"account","nameLocation":"4267:7:0","nodeType":"VariableDeclaration","scope":147,"src":"4259:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"4259:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4244:31:0"},"returnParameters":{"id":140,"nodeType":"ParameterList","parameters":[],"src":"4320:0:0"},"scope":295,"src":"4226:136:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[369],"body":{"id":165,"nodeType":"Block","src":"4737:43:0","statements":[{"expression":{"arguments":[{"id":161,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"4759:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":162,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"4765:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":160,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"4747:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4747:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":164,"nodeType":"ExpressionStatement","src":"4747:26:0"}]},"documentation":{"id":148,"nodeType":"StructuredDocumentation","src":"4368:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":166,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"4730:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":155,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"4717:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4717:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":158,"kind":"modifierInvocation","modifierName":{"id":154,"name":"onlyRole","nameLocations":["4708:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"4708:8:0"},"nodeType":"ModifierInvocation","src":"4708:28:0"}],"name":"revokeRole","nameLocation":"4651:10:0","nodeType":"FunctionDefinition","parameters":{"id":153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"role","nameLocation":"4670:4:0","nodeType":"VariableDeclaration","scope":166,"src":"4662:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":149,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4662:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":152,"mutability":"mutable","name":"account","nameLocation":"4684:7:0","nodeType":"VariableDeclaration","scope":166,"src":"4676:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":151,"name":"address","nodeType":"ElementaryTypeName","src":"4676:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4661:31:0"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"4737:0:0"},"scope":295,"src":"4642:138:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[377],"body":{"id":188,"nodeType":"Block","src":"5407:166:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":174,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5421:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":175,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"5443:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5443:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5421:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":182,"nodeType":"IfStatement","src":"5417:102:0","trueBody":{"id":181,"nodeType":"Block","src":"5457:62:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":178,"name":"AccessControlBadConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"5478:28:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5478:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":180,"nodeType":"RevertStatement","src":"5471:37:0"}]}},{"expression":{"arguments":[{"id":184,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5541:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":185,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5547:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":183,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"5529:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5529:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":187,"nodeType":"ExpressionStatement","src":"5529:37:0"}]},"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"4786:537:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":189,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"5337:12:0","nodeType":"FunctionDefinition","parameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"role","nameLocation":"5358:4:0","nodeType":"VariableDeclaration","scope":189,"src":"5350:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5350:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":171,"mutability":"mutable","name":"callerConfirmation","nameLocation":"5372:18:0","nodeType":"VariableDeclaration","scope":189,"src":"5364:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":170,"name":"address","nodeType":"ElementaryTypeName","src":"5364:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5349:42:0"},"returnParameters":{"id":173,"nodeType":"ParameterList","parameters":[],"src":"5407:0:0"},"scope":295,"src":"5328:245:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":216,"nodeType":"Block","src":"5771:174:0","statements":[{"assignments":[198],"declarations":[{"constant":false,"id":198,"mutability":"mutable","name":"previousAdminRole","nameLocation":"5789:17:0","nodeType":"VariableDeclaration","scope":216,"src":"5781:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":197,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5781:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":202,"initialValue":{"arguments":[{"id":200,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5822:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":199,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"5809:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5809:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5781:46:0"},{"expression":{"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":203,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"5837:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":205,"indexExpression":{"id":204,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5844:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5837:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":206,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5850:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":20,"src":"5837:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":207,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"5862:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5837:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":209,"nodeType":"ExpressionStatement","src":"5837:34:0"},{"eventCall":{"arguments":[{"id":211,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5903:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":212,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"5909:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":213,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"5928:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":210,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"5886:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5886:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":215,"nodeType":"EmitStatement","src":"5881:57:0"}]},"documentation":{"id":190,"nodeType":"StructuredDocumentation","src":"5579:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":217,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"5707:13:0","nodeType":"FunctionDefinition","parameters":{"id":195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"role","nameLocation":"5729:4:0","nodeType":"VariableDeclaration","scope":217,"src":"5721:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":191,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5721:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":194,"mutability":"mutable","name":"adminRole","nameLocation":"5743:9:0","nodeType":"VariableDeclaration","scope":217,"src":"5735:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5735:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5720:33:0"},"returnParameters":{"id":196,"nodeType":"ParameterList","parameters":[],"src":"5771:0:0"},"scope":295,"src":"5698:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":255,"nodeType":"Block","src":"6262:233:0","statements":[{"condition":{"id":231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6276:23:0","subExpression":{"arguments":[{"id":228,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6285:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":229,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6291:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":227,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"6277:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6277:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":253,"nodeType":"Block","src":"6452:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6473:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":226,"id":252,"nodeType":"Return","src":"6466:12:0"}]},"id":254,"nodeType":"IfStatement","src":"6272:217:0","trueBody":{"id":250,"nodeType":"Block","src":"6301:145:0","statements":[{"expression":{"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":232,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"6315:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":234,"indexExpression":{"id":233,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6322:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6315:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6328:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"6315:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":237,"indexExpression":{"id":236,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6336:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6315:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6347:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6315:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":240,"nodeType":"ExpressionStatement","src":"6315:36:0"},{"eventCall":{"arguments":[{"id":242,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6382:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":243,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6388:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":244,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"6397:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6397:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":241,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"6370:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6370:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":247,"nodeType":"EmitStatement","src":"6365:45:0"},{"expression":{"hexValue":"74727565","id":248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6431:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":226,"id":249,"nodeType":"Return","src":"6424:11:0"}]}}]},"documentation":{"id":218,"nodeType":"StructuredDocumentation","src":"5951:223:0","text":" @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":256,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"6188:10:0","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":220,"mutability":"mutable","name":"role","nameLocation":"6207:4:0","nodeType":"VariableDeclaration","scope":256,"src":"6199:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6199:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"account","nameLocation":"6221:7:0","nodeType":"VariableDeclaration","scope":256,"src":"6213:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"6213:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6198:31:0"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":256,"src":"6256:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":224,"name":"bool","nodeType":"ElementaryTypeName","src":"6256:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6255:6:0"},"scope":295,"src":"6179:316:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":293,"nodeType":"Block","src":"6814:233:0","statements":[{"condition":{"arguments":[{"id":267,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6836:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":268,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6842:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":266,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"6828:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6828:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":291,"nodeType":"Block","src":"7004:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7025:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":265,"id":290,"nodeType":"Return","src":"7018:12:0"}]},"id":292,"nodeType":"IfStatement","src":"6824:217:0","trueBody":{"id":288,"nodeType":"Block","src":"6852:146:0","statements":[{"expression":{"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":270,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"6866:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":272,"indexExpression":{"id":271,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6873:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6866:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":273,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6879:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"6866:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":275,"indexExpression":{"id":274,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6887:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6866:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6898:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6866:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":278,"nodeType":"ExpressionStatement","src":"6866:37:0"},{"eventCall":{"arguments":[{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6934:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":281,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6940:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":282,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"6949:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6949:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":279,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"6922:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6922:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":285,"nodeType":"EmitStatement","src":"6917:45:0"},{"expression":{"hexValue":"74727565","id":286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6983:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":265,"id":287,"nodeType":"Return","src":"6976:11:0"}]}}]},"documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"6501:224:0","text":" @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":294,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"6739:11:0","nodeType":"FunctionDefinition","parameters":{"id":262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":259,"mutability":"mutable","name":"role","nameLocation":"6759:4:0","nodeType":"VariableDeclaration","scope":294,"src":"6751:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6751:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":261,"mutability":"mutable","name":"account","nameLocation":"6773:7:0","nodeType":"VariableDeclaration","scope":294,"src":"6765:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":260,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6750:31:0"},"returnParameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":294,"src":"6808:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":263,"name":"bool","nodeType":"ElementaryTypeName","src":"6808:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6807:6:0"},"scope":295,"src":"6730:317:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":296,"src":"1953:5096:0","usedErrors":[305,308],"usedEvents":[317,326,335]}],"src":"108:6942:0"},"id":0},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[378]},"id":379,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":297,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":298,"nodeType":"StructuredDocumentation","src":"135:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":378,"linearizedBaseContracts":[378],"name":"IAccessControl","nameLocation":"235:14:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"256:56:1","text":" @dev The `account` is missing a role."},"errorSelector":"e2517d3f","id":305,"name":"AccessControlUnauthorizedAccount","nameLocation":"323:32:1","nodeType":"ErrorDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"account","nameLocation":"364:7:1","nodeType":"VariableDeclaration","scope":305,"src":"356:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":300,"name":"address","nodeType":"ElementaryTypeName","src":"356:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"neededRole","nameLocation":"381:10:1","nodeType":"VariableDeclaration","scope":305,"src":"373:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":302,"name":"bytes32","nodeType":"ElementaryTypeName","src":"373:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"355:37:1"},"src":"317:76:1"},{"documentation":{"id":306,"nodeType":"StructuredDocumentation","src":"399:148:1","text":" @dev The caller of a function is not the expected one.\n NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."},"errorSelector":"6697b232","id":308,"name":"AccessControlBadConfirmation","nameLocation":"558:28:1","nodeType":"ErrorDefinition","parameters":{"id":307,"nodeType":"ParameterList","parameters":[],"src":"586:2:1"},"src":"552:37:1"},{"anonymous":false,"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"595:254:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this."},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":317,"name":"RoleAdminChanged","nameLocation":"860:16:1","nodeType":"EventDefinition","parameters":{"id":316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"893:4:1","nodeType":"VariableDeclaration","scope":317,"src":"877:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"877:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":313,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"915:17:1","nodeType":"VariableDeclaration","scope":317,"src":"899:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":312,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":315,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"950:12:1","nodeType":"VariableDeclaration","scope":317,"src":"934:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"934:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"876:87:1"},"src":"854:110:1"},{"anonymous":false,"documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"970:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":326,"name":"RoleGranted","nameLocation":"1193:11:1","nodeType":"EventDefinition","parameters":{"id":325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":320,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1221:4:1","nodeType":"VariableDeclaration","scope":326,"src":"1205:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1205:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":322,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1243:7:1","nodeType":"VariableDeclaration","scope":326,"src":"1227:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":321,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":324,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1268:6:1","nodeType":"VariableDeclaration","scope":326,"src":"1252:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":323,"name":"address","nodeType":"ElementaryTypeName","src":"1252:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1204:71:1"},"src":"1187:89:1"},{"anonymous":false,"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"1282:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":335,"name":"RoleRevoked","nameLocation":"1568:11:1","nodeType":"EventDefinition","parameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1596:4:1","nodeType":"VariableDeclaration","scope":335,"src":"1580:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1580:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":331,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1618:7:1","nodeType":"VariableDeclaration","scope":335,"src":"1602:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":330,"name":"address","nodeType":"ElementaryTypeName","src":"1602:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":333,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1643:6:1","nodeType":"VariableDeclaration","scope":335,"src":"1627:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":332,"name":"address","nodeType":"ElementaryTypeName","src":"1627:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1579:71:1"},"src":"1562:89:1"},{"documentation":{"id":336,"nodeType":"StructuredDocumentation","src":"1657:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":345,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1747:7:1","nodeType":"FunctionDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"role","nameLocation":"1763:4:1","nodeType":"VariableDeclaration","scope":345,"src":"1755:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1755:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":340,"mutability":"mutable","name":"account","nameLocation":"1777:7:1","nodeType":"VariableDeclaration","scope":345,"src":"1769:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":339,"name":"address","nodeType":"ElementaryTypeName","src":"1769:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1754:31:1"},"returnParameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":345,"src":"1809:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":342,"name":"bool","nodeType":"ElementaryTypeName","src":"1809:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1808:6:1"},"scope":378,"src":"1738:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":346,"nodeType":"StructuredDocumentation","src":"1821:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":353,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"2019:12:1","nodeType":"FunctionDefinition","parameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"role","nameLocation":"2040:4:1","nodeType":"VariableDeclaration","scope":353,"src":"2032:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2032:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2031:14:1"},"returnParameters":{"id":352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":353,"src":"2069:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2069:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2068:9:1"},"scope":378,"src":"2010:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":354,"nodeType":"StructuredDocumentation","src":"2084:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":361,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2337:9:1","nodeType":"FunctionDefinition","parameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":356,"mutability":"mutable","name":"role","nameLocation":"2355:4:1","nodeType":"VariableDeclaration","scope":361,"src":"2347:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2347:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":358,"mutability":"mutable","name":"account","nameLocation":"2369:7:1","nodeType":"VariableDeclaration","scope":361,"src":"2361:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":357,"name":"address","nodeType":"ElementaryTypeName","src":"2361:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2346:31:1"},"returnParameters":{"id":360,"nodeType":"ParameterList","parameters":[],"src":"2386:0:1"},"scope":378,"src":"2328:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"2393:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":369,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2630:10:1","nodeType":"FunctionDefinition","parameters":{"id":367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"mutability":"mutable","name":"role","nameLocation":"2649:4:1","nodeType":"VariableDeclaration","scope":369,"src":"2641:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2641:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":366,"mutability":"mutable","name":"account","nameLocation":"2663:7:1","nodeType":"VariableDeclaration","scope":369,"src":"2655:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":365,"name":"address","nodeType":"ElementaryTypeName","src":"2655:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2640:31:1"},"returnParameters":{"id":368,"nodeType":"ParameterList","parameters":[],"src":"2680:0:1"},"scope":378,"src":"2621:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"2687:491:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`."},"functionSelector":"36568abe","id":377,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"3192:12:1","nodeType":"FunctionDefinition","parameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"role","nameLocation":"3213:4:1","nodeType":"VariableDeclaration","scope":377,"src":"3205:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3205:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"callerConfirmation","nameLocation":"3227:18:1","nodeType":"VariableDeclaration","scope":377,"src":"3219:26:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"3219:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3204:42:1"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[],"src":"3255:0:1"},"scope":378,"src":"3183:73:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":379,"src":"225:3033:1","usedErrors":[305,308],"usedEvents":[317,326,335]}],"src":"109:3150:1"},"id":1},"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol","exportedSymbols":{"AccessControl":[295],"AccessControlEnumerable":[520],"EnumerableSet":[4514],"IAccessControlEnumerable":[546]},"id":521,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":380,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"129:24:2"},{"absolutePath":"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol","file":"./IAccessControlEnumerable.sol","id":382,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":521,"sourceUnit":547,"src":"155:72:2","symbolAliases":[{"foreign":{"id":381,"name":"IAccessControlEnumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"163:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"../AccessControl.sol","id":384,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":521,"sourceUnit":296,"src":"228:51:2","symbolAliases":[{"foreign":{"id":383,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"236:13:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"../../utils/structs/EnumerableSet.sol","id":386,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":521,"sourceUnit":4515,"src":"280:68:2","symbolAliases":[{"foreign":{"id":385,"name":"EnumerableSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"288:13:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":388,"name":"IAccessControlEnumerable","nameLocations":["490:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":546,"src":"490:24:2"},"id":389,"nodeType":"InheritanceSpecifier","src":"490:24:2"},{"baseName":{"id":390,"name":"AccessControl","nameLocations":["516:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":295,"src":"516:13:2"},"id":391,"nodeType":"InheritanceSpecifier","src":"516:13:2"}],"canonicalName":"AccessControlEnumerable","contractDependencies":[],"contractKind":"contract","documentation":{"id":387,"nodeType":"StructuredDocumentation","src":"350:94:2","text":" @dev Extension of {AccessControl} that allows enumerating the members of each role."},"fullyImplemented":true,"id":520,"linearizedBaseContracts":[520,295,2730,2742,546,378,2451],"name":"AccessControlEnumerable","nameLocation":"463:23:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":395,"libraryName":{"id":392,"name":"EnumerableSet","nameLocations":["542:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":4514,"src":"542:13:2"},"nodeType":"UsingForDirective","src":"536:49:2","typeName":{"id":394,"nodeType":"UserDefinedTypeName","pathNode":{"id":393,"name":"EnumerableSet.AddressSet","nameLocations":["560:13:2","574:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":4227,"src":"560:24:2"},"referencedDeclaration":4227,"src":"560:24:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},{"constant":false,"id":400,"mutability":"mutable","name":"_roleMembers","nameLocation":"649:12:2","nodeType":"VariableDeclaration","scope":520,"src":"591:70:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4227_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet)"},"typeName":{"id":399,"keyName":"role","keyNameLocation":"607:4:2","keyType":{"id":396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"599:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"591:49:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4227_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":398,"nodeType":"UserDefinedTypeName","pathNode":{"id":397,"name":"EnumerableSet.AddressSet","nameLocations":["615:13:2","629:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":4227,"src":"615:24:2"},"referencedDeclaration":4227,"src":"615:24:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},"visibility":"private"},{"baseFunctions":[62],"body":{"id":421,"nodeType":"Block","src":"820:121:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":409,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"837:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":411,"name":"IAccessControlEnumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"857:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlEnumerable_$546_$","typeString":"type(contract IAccessControlEnumerable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlEnumerable_$546_$","typeString":"type(contract IAccessControlEnumerable)"}],"id":410,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"852:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"852:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlEnumerable_$546","typeString":"type(contract IAccessControlEnumerable)"}},"id":413,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"883:11:2","memberName":"interfaceId","nodeType":"MemberAccess","src":"852:42:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"837:57:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":417,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"922:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":415,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"898:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerable_$520_$","typeString":"type(contract super AccessControlEnumerable)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"904:17:2","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":62,"src":"898:23:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"898:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"837:97:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":408,"id":420,"nodeType":"Return","src":"830:104:2"}]},"documentation":{"id":401,"nodeType":"StructuredDocumentation","src":"668:56:2","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":422,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"738:17:2","nodeType":"FunctionDefinition","overrides":{"id":405,"nodeType":"OverrideSpecifier","overrides":[],"src":"796:8:2"},"parameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"mutability":"mutable","name":"interfaceId","nameLocation":"763:11:2","nodeType":"VariableDeclaration","scope":422,"src":"756:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":402,"name":"bytes4","nodeType":"ElementaryTypeName","src":"756:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"755:20:2"},"returnParameters":{"id":408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":422,"src":"814:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":406,"name":"bool","nodeType":"ElementaryTypeName","src":"814:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"813:6:2"},"scope":520,"src":"729:212:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[537],"body":{"id":439,"nodeType":"Block","src":"1616:52:2","statements":[{"expression":{"arguments":[{"id":436,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"1655:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":432,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"1633:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4227_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":434,"indexExpression":{"id":433,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"1646:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1633:18:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1652:2:2","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":4350,"src":"1633:21:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$4227_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_AddressSet_$4227_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1633:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":431,"id":438,"nodeType":"Return","src":"1626:35:2"}]},"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"947:574:2","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":440,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"1535:13:2","nodeType":"FunctionDefinition","parameters":{"id":428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"role","nameLocation":"1557:4:2","nodeType":"VariableDeclaration","scope":440,"src":"1549:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1549:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":427,"mutability":"mutable","name":"index","nameLocation":"1571:5:2","nodeType":"VariableDeclaration","scope":440,"src":"1563:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":426,"name":"uint256","nodeType":"ElementaryTypeName","src":"1563:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1548:29:2"},"returnParameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":440,"src":"1607:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":429,"name":"address","nodeType":"ElementaryTypeName","src":"1607:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1606:9:2"},"scope":520,"src":"1526:142:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[545],"body":{"id":454,"nodeType":"Block","src":"1916:51:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":448,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"1933:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4227_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":450,"indexExpression":{"id":449,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"1946:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1933:18:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":451,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1952:6:2","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":4323,"src":"1933:25:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$4227_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_AddressSet_$4227_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1933:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":447,"id":453,"nodeType":"Return","src":"1926:34:2"}]},"documentation":{"id":441,"nodeType":"StructuredDocumentation","src":"1674:157:2","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":455,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"1845:18:2","nodeType":"FunctionDefinition","parameters":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":443,"mutability":"mutable","name":"role","nameLocation":"1872:4:2","nodeType":"VariableDeclaration","scope":455,"src":"1864:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1864:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1863:14:2"},"returnParameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":455,"src":"1907:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"1907:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1906:9:2"},"scope":520,"src":"1836:131:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[256],"body":{"id":486,"nodeType":"Block","src":"2161:165:2","statements":[{"assignments":[467],"declarations":[{"constant":false,"id":467,"mutability":"mutable","name":"granted","nameLocation":"2176:7:2","nodeType":"VariableDeclaration","scope":486,"src":"2171:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":466,"name":"bool","nodeType":"ElementaryTypeName","src":"2171:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":473,"initialValue":{"arguments":[{"id":470,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"2203:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":471,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"2209:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":468,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2186:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerable_$520_$","typeString":"type(contract super AccessControlEnumerable)"}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2192:10:2","memberName":"_grantRole","nodeType":"MemberAccess","referencedDeclaration":256,"src":"2186:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2186:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"2171:46:2"},{"condition":{"id":474,"name":"granted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"2231:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":483,"nodeType":"IfStatement","src":"2227:69:2","trueBody":{"id":482,"nodeType":"Block","src":"2240:56:2","statements":[{"expression":{"arguments":[{"id":479,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"2277:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":475,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"2254:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4227_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":477,"indexExpression":{"id":476,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"2267:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2254:18:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":478,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2273:3:2","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":4254,"src":"2254:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$4227_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$4227_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2254:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":481,"nodeType":"ExpressionStatement","src":"2254:31:2"}]}},{"expression":{"id":484,"name":"granted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"2312:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":465,"id":485,"nodeType":"Return","src":"2305:14:2"}]},"documentation":{"id":456,"nodeType":"StructuredDocumentation","src":"1973:91:2","text":" @dev Overload {AccessControl-_grantRole} to track enumerable memberships"},"id":487,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"2078:10:2","nodeType":"FunctionDefinition","overrides":{"id":462,"nodeType":"OverrideSpecifier","overrides":[],"src":"2137:8:2"},"parameters":{"id":461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":458,"mutability":"mutable","name":"role","nameLocation":"2097:4:2","nodeType":"VariableDeclaration","scope":487,"src":"2089:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2089:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":460,"mutability":"mutable","name":"account","nameLocation":"2111:7:2","nodeType":"VariableDeclaration","scope":487,"src":"2103:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":459,"name":"address","nodeType":"ElementaryTypeName","src":"2103:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2088:31:2"},"returnParameters":{"id":465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":487,"src":"2155:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":463,"name":"bool","nodeType":"ElementaryTypeName","src":"2155:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2154:6:2"},"scope":520,"src":"2069:257:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[294],"body":{"id":518,"nodeType":"Block","src":"2522:169:2","statements":[{"assignments":[499],"declarations":[{"constant":false,"id":499,"mutability":"mutable","name":"revoked","nameLocation":"2537:7:2","nodeType":"VariableDeclaration","scope":518,"src":"2532:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":498,"name":"bool","nodeType":"ElementaryTypeName","src":"2532:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":505,"initialValue":{"arguments":[{"id":502,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"2565:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":503,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"2571:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":500,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2547:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerable_$520_$","typeString":"type(contract super AccessControlEnumerable)"}},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2553:11:2","memberName":"_revokeRole","nodeType":"MemberAccess","referencedDeclaration":294,"src":"2547:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2547:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"2532:47:2"},{"condition":{"id":506,"name":"revoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"2593:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":515,"nodeType":"IfStatement","src":"2589:72:2","trueBody":{"id":514,"nodeType":"Block","src":"2602:59:2","statements":[{"expression":{"arguments":[{"id":511,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"2642:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":507,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"2616:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4227_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":509,"indexExpression":{"id":508,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"2629:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2616:18:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":510,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2635:6:2","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":4281,"src":"2616:25:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$4227_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$4227_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2616:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":513,"nodeType":"ExpressionStatement","src":"2616:34:2"}]}},{"expression":{"id":516,"name":"revoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"2677:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":497,"id":517,"nodeType":"Return","src":"2670:14:2"}]},"documentation":{"id":488,"nodeType":"StructuredDocumentation","src":"2332:92:2","text":" @dev Overload {AccessControl-_revokeRole} to track enumerable memberships"},"id":519,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"2438:11:2","nodeType":"FunctionDefinition","overrides":{"id":494,"nodeType":"OverrideSpecifier","overrides":[],"src":"2498:8:2"},"parameters":{"id":493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":490,"mutability":"mutable","name":"role","nameLocation":"2458:4:2","nodeType":"VariableDeclaration","scope":519,"src":"2450:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":489,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2450:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":492,"mutability":"mutable","name":"account","nameLocation":"2472:7:2","nodeType":"VariableDeclaration","scope":519,"src":"2464:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":491,"name":"address","nodeType":"ElementaryTypeName","src":"2464:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2449:31:2"},"returnParameters":{"id":497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":519,"src":"2516:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":495,"name":"bool","nodeType":"ElementaryTypeName","src":"2516:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2515:6:2"},"scope":520,"src":"2429:262:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":521,"src":"445:2248:2","usedErrors":[305,308],"usedEvents":[317,326,335]}],"src":"129:2565:2"},"id":2},"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol","exportedSymbols":{"IAccessControl":[378],"IAccessControlEnumerable":[546]},"id":547,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":522,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"130:24:3"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"../IAccessControl.sol","id":524,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":547,"sourceUnit":379,"src":"156:53:3","symbolAliases":[{"foreign":{"id":523,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"164:14:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":526,"name":"IAccessControl","nameLocations":["349:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"349:14:3"},"id":527,"nodeType":"InheritanceSpecifier","src":"349:14:3"}],"canonicalName":"IAccessControlEnumerable","contractDependencies":[],"contractKind":"interface","documentation":{"id":525,"nodeType":"StructuredDocumentation","src":"211:99:3","text":" @dev External interface of AccessControlEnumerable declared to support ERC165 detection."},"fullyImplemented":false,"id":546,"linearizedBaseContracts":[546,378],"name":"IAccessControlEnumerable","nameLocation":"321:24:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":528,"nodeType":"StructuredDocumentation","src":"370:574:3","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":537,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"958:13:3","nodeType":"FunctionDefinition","parameters":{"id":533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":530,"mutability":"mutable","name":"role","nameLocation":"980:4:3","nodeType":"VariableDeclaration","scope":537,"src":"972:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":529,"name":"bytes32","nodeType":"ElementaryTypeName","src":"972:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":532,"mutability":"mutable","name":"index","nameLocation":"994:5:3","nodeType":"VariableDeclaration","scope":537,"src":"986:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":531,"name":"uint256","nodeType":"ElementaryTypeName","src":"986:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"971:29:3"},"returnParameters":{"id":536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":535,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":537,"src":"1024:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":534,"name":"address","nodeType":"ElementaryTypeName","src":"1024:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1023:9:3"},"scope":546,"src":"949:84:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":538,"nodeType":"StructuredDocumentation","src":"1039:157:3","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":545,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"1210:18:3","nodeType":"FunctionDefinition","parameters":{"id":541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":540,"mutability":"mutable","name":"role","nameLocation":"1237:4:3","nodeType":"VariableDeclaration","scope":545,"src":"1229:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":539,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1229:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1228:14:3"},"returnParameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":545,"src":"1266:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":542,"name":"uint256","nodeType":"ElementaryTypeName","src":"1266:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1265:9:3"},"scope":546,"src":"1201:74:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":547,"src":"311:966:3","usedErrors":[305,308],"usedEvents":[317,326,335]}],"src":"130:1148:3"},"id":3},"@openzeppelin/contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[2742]},"id":551,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":548,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:4"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","id":550,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":551,"sourceUnit":2743,"src":"132:59:4","symbolAliases":[{"foreign":{"id":549,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"140:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:86:4"},"id":4},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4906.sol","exportedSymbols":{"IERC165":[2742],"IERC4906":[574],"IERC721":[1841]},"id":575,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":552,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:5"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"./IERC165.sol","id":554,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":575,"sourceUnit":551,"src":"133:38:5","symbolAliases":[{"foreign":{"id":553,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"141:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC721.sol","file":"./IERC721.sol","id":556,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":575,"sourceUnit":579,"src":"172:38:5","symbolAliases":[{"foreign":{"id":555,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"180:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":558,"name":"IERC165","nameLocations":["279:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":2742,"src":"279:7:5"},"id":559,"nodeType":"InheritanceSpecifier","src":"279:7:5"},{"baseName":{"id":560,"name":"IERC721","nameLocations":["288:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"288:7:5"},"id":561,"nodeType":"InheritanceSpecifier","src":"288:7:5"}],"canonicalName":"IERC4906","contractDependencies":[],"contractKind":"interface","documentation":{"id":557,"nodeType":"StructuredDocumentation","src":"212:45:5","text":"@title EIP-721 Metadata Update Extension"},"fullyImplemented":false,"id":574,"linearizedBaseContracts":[574,1841,2742],"name":"IERC4906","nameLocation":"267:8:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"302:201:5","text":"@dev This event emits when the metadata of a token is changed.\n So that the third-party platforms such as NFT market could\n timely update the images and related attributes of the NFT."},"eventSelector":"f8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7","id":566,"name":"MetadataUpdate","nameLocation":"514:14:5","nodeType":"EventDefinition","parameters":{"id":565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":564,"indexed":false,"mutability":"mutable","name":"_tokenId","nameLocation":"537:8:5","nodeType":"VariableDeclaration","scope":566,"src":"529:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":563,"name":"uint256","nodeType":"ElementaryTypeName","src":"529:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"528:18:5"},"src":"508:39:5"},{"anonymous":false,"documentation":{"id":567,"nodeType":"StructuredDocumentation","src":"553:212:5","text":"@dev This event emits when the metadata of a range of tokens is changed.\n So that the third-party platforms such as NFT market could\n timely update the images and related attributes of the NFTs."},"eventSelector":"6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c","id":573,"name":"BatchMetadataUpdate","nameLocation":"776:19:5","nodeType":"EventDefinition","parameters":{"id":572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":569,"indexed":false,"mutability":"mutable","name":"_fromTokenId","nameLocation":"804:12:5","nodeType":"VariableDeclaration","scope":573,"src":"796:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":568,"name":"uint256","nodeType":"ElementaryTypeName","src":"796:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":571,"indexed":false,"mutability":"mutable","name":"_toTokenId","nameLocation":"826:10:5","nodeType":"VariableDeclaration","scope":573,"src":"818:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":570,"name":"uint256","nodeType":"ElementaryTypeName","src":"818:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"795:42:5"},"src":"770:68:5"}],"scope":575,"src":"257:583:5","usedErrors":[],"usedEvents":[566,573,1740,1749,1758]}],"src":"107:734:5"},"id":5},"@openzeppelin/contracts/interfaces/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[1841]},"id":579,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":576,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../token/ERC721/IERC721.sol","id":578,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":579,"sourceUnit":1842,"src":"132:52:6","symbolAliases":[{"foreign":{"id":577,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"140:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:79:6"},"id":6},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[715],"IERC20Errors":[620],"IERC721Errors":[668]},"id":716,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":580,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":581,"nodeType":"StructuredDocumentation","src":"138:139:7","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":620,"linearizedBaseContracts":[620],"name":"IERC20Errors","nameLocation":"288:12:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":582,"nodeType":"StructuredDocumentation","src":"307:309:7","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":590,"name":"ERC20InsufficientBalance","nameLocation":"627:24:7","nodeType":"ErrorDefinition","parameters":{"id":589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":584,"mutability":"mutable","name":"sender","nameLocation":"660:6:7","nodeType":"VariableDeclaration","scope":590,"src":"652:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":583,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":586,"mutability":"mutable","name":"balance","nameLocation":"676:7:7","nodeType":"VariableDeclaration","scope":590,"src":"668:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":585,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":588,"mutability":"mutable","name":"needed","nameLocation":"693:6:7","nodeType":"VariableDeclaration","scope":590,"src":"685:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":587,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:7"},"src":"621:80:7"},{"documentation":{"id":591,"nodeType":"StructuredDocumentation","src":"707:152:7","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":595,"name":"ERC20InvalidSender","nameLocation":"870:18:7","nodeType":"ErrorDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":593,"mutability":"mutable","name":"sender","nameLocation":"897:6:7","nodeType":"VariableDeclaration","scope":595,"src":"889:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":592,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:7"},"src":"864:41:7"},{"documentation":{"id":596,"nodeType":"StructuredDocumentation","src":"911:159:7","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":600,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:7","nodeType":"ErrorDefinition","parameters":{"id":599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":598,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:7","nodeType":"VariableDeclaration","scope":600,"src":"1102:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":597,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:7"},"src":"1075:45:7"},{"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"1126:345:7","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":609,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:7","nodeType":"ErrorDefinition","parameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":603,"mutability":"mutable","name":"spender","nameLocation":"1517:7:7","nodeType":"VariableDeclaration","scope":609,"src":"1509:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":602,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":605,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:7","nodeType":"VariableDeclaration","scope":609,"src":"1526:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":604,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":607,"mutability":"mutable","name":"needed","nameLocation":"1553:6:7","nodeType":"VariableDeclaration","scope":609,"src":"1545:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":606,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:7"},"src":"1476:85:7"},{"documentation":{"id":610,"nodeType":"StructuredDocumentation","src":"1567:174:7","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":614,"name":"ERC20InvalidApprover","nameLocation":"1752:20:7","nodeType":"ErrorDefinition","parameters":{"id":613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":612,"mutability":"mutable","name":"approver","nameLocation":"1781:8:7","nodeType":"VariableDeclaration","scope":614,"src":"1773:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":611,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:7"},"src":"1746:45:7"},{"documentation":{"id":615,"nodeType":"StructuredDocumentation","src":"1797:195:7","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":619,"name":"ERC20InvalidSpender","nameLocation":"2003:19:7","nodeType":"ErrorDefinition","parameters":{"id":618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":617,"mutability":"mutable","name":"spender","nameLocation":"2031:7:7","nodeType":"VariableDeclaration","scope":619,"src":"2023:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":616,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:7"},"src":"1997:43:7"}],"scope":716,"src":"278:1764:7","usedErrors":[590,595,600,609,614,619],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":621,"nodeType":"StructuredDocumentation","src":"2044:141:7","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":668,"linearizedBaseContracts":[668],"name":"IERC721Errors","nameLocation":"2196:13:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":622,"nodeType":"StructuredDocumentation","src":"2216:219:7","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":626,"name":"ERC721InvalidOwner","nameLocation":"2446:18:7","nodeType":"ErrorDefinition","parameters":{"id":625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":624,"mutability":"mutable","name":"owner","nameLocation":"2473:5:7","nodeType":"VariableDeclaration","scope":626,"src":"2465:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":623,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:7"},"src":"2440:40:7"},{"documentation":{"id":627,"nodeType":"StructuredDocumentation","src":"2486:132:7","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":631,"name":"ERC721NonexistentToken","nameLocation":"2629:22:7","nodeType":"ErrorDefinition","parameters":{"id":630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":629,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:7","nodeType":"VariableDeclaration","scope":631,"src":"2652:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:7"},"src":"2623:46:7"},{"documentation":{"id":632,"nodeType":"StructuredDocumentation","src":"2675:289:7","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":640,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:7","nodeType":"ErrorDefinition","parameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":634,"mutability":"mutable","name":"sender","nameLocation":"3004:6:7","nodeType":"VariableDeclaration","scope":640,"src":"2996:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":633,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":636,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:7","nodeType":"VariableDeclaration","scope":640,"src":"3012:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"owner","nameLocation":"3037:5:7","nodeType":"VariableDeclaration","scope":640,"src":"3029:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:7"},"src":"2969:75:7"},{"documentation":{"id":641,"nodeType":"StructuredDocumentation","src":"3050:152:7","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":645,"name":"ERC721InvalidSender","nameLocation":"3213:19:7","nodeType":"ErrorDefinition","parameters":{"id":644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":643,"mutability":"mutable","name":"sender","nameLocation":"3241:6:7","nodeType":"VariableDeclaration","scope":645,"src":"3233:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":642,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:7"},"src":"3207:42:7"},{"documentation":{"id":646,"nodeType":"StructuredDocumentation","src":"3255:159:7","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":650,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:7","nodeType":"ErrorDefinition","parameters":{"id":649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:7","nodeType":"VariableDeclaration","scope":650,"src":"3447:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":647,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:7"},"src":"3419:46:7"},{"documentation":{"id":651,"nodeType":"StructuredDocumentation","src":"3471:247:7","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":657,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:7","nodeType":"ErrorDefinition","parameters":{"id":656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":653,"mutability":"mutable","name":"operator","nameLocation":"3764:8:7","nodeType":"VariableDeclaration","scope":657,"src":"3756:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":652,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":655,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:7","nodeType":"VariableDeclaration","scope":657,"src":"3774:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":654,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:7"},"src":"3723:68:7"},{"documentation":{"id":658,"nodeType":"StructuredDocumentation","src":"3797:174:7","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":662,"name":"ERC721InvalidApprover","nameLocation":"3982:21:7","nodeType":"ErrorDefinition","parameters":{"id":661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":660,"mutability":"mutable","name":"approver","nameLocation":"4012:8:7","nodeType":"VariableDeclaration","scope":662,"src":"4004:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":659,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:7"},"src":"3976:46:7"},{"documentation":{"id":663,"nodeType":"StructuredDocumentation","src":"4028:197:7","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":667,"name":"ERC721InvalidOperator","nameLocation":"4236:21:7","nodeType":"ErrorDefinition","parameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":665,"mutability":"mutable","name":"operator","nameLocation":"4266:8:7","nodeType":"VariableDeclaration","scope":667,"src":"4258:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":664,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:7"},"src":"4230:46:7"}],"scope":716,"src":"2186:2092:7","usedErrors":[626,631,640,645,650,657,662,667],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":669,"nodeType":"StructuredDocumentation","src":"4280:143:7","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":715,"linearizedBaseContracts":[715],"name":"IERC1155Errors","nameLocation":"4434:14:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":670,"nodeType":"StructuredDocumentation","src":"4455:361:7","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":680,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:7","nodeType":"ErrorDefinition","parameters":{"id":679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":672,"mutability":"mutable","name":"sender","nameLocation":"4862:6:7","nodeType":"VariableDeclaration","scope":680,"src":"4854:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":671,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":674,"mutability":"mutable","name":"balance","nameLocation":"4878:7:7","nodeType":"VariableDeclaration","scope":680,"src":"4870:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":673,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":676,"mutability":"mutable","name":"needed","nameLocation":"4895:6:7","nodeType":"VariableDeclaration","scope":680,"src":"4887:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":675,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":678,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:7","nodeType":"VariableDeclaration","scope":680,"src":"4903:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":677,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:7"},"src":"4821:99:7"},{"documentation":{"id":681,"nodeType":"StructuredDocumentation","src":"4926:152:7","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":685,"name":"ERC1155InvalidSender","nameLocation":"5089:20:7","nodeType":"ErrorDefinition","parameters":{"id":684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":683,"mutability":"mutable","name":"sender","nameLocation":"5118:6:7","nodeType":"VariableDeclaration","scope":685,"src":"5110:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":682,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:7"},"src":"5083:43:7"},{"documentation":{"id":686,"nodeType":"StructuredDocumentation","src":"5132:159:7","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":690,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:7","nodeType":"ErrorDefinition","parameters":{"id":689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:7","nodeType":"VariableDeclaration","scope":690,"src":"5325:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":687,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:7"},"src":"5296:47:7"},{"documentation":{"id":691,"nodeType":"StructuredDocumentation","src":"5349:256:7","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":697,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:7","nodeType":"ErrorDefinition","parameters":{"id":696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":693,"mutability":"mutable","name":"operator","nameLocation":"5653:8:7","nodeType":"VariableDeclaration","scope":697,"src":"5645:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":692,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":695,"mutability":"mutable","name":"owner","nameLocation":"5671:5:7","nodeType":"VariableDeclaration","scope":697,"src":"5663:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":694,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:7"},"src":"5610:68:7"},{"documentation":{"id":698,"nodeType":"StructuredDocumentation","src":"5684:174:7","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":702,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:7","nodeType":"ErrorDefinition","parameters":{"id":701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":700,"mutability":"mutable","name":"approver","nameLocation":"5900:8:7","nodeType":"VariableDeclaration","scope":702,"src":"5892:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":699,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:7"},"src":"5863:47:7"},{"documentation":{"id":703,"nodeType":"StructuredDocumentation","src":"5916:197:7","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":707,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:7","nodeType":"ErrorDefinition","parameters":{"id":706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":705,"mutability":"mutable","name":"operator","nameLocation":"6155:8:7","nodeType":"VariableDeclaration","scope":707,"src":"6147:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":704,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:7"},"src":"6118:47:7"},{"documentation":{"id":708,"nodeType":"StructuredDocumentation","src":"6171:280:7","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":714,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:7","nodeType":"ErrorDefinition","parameters":{"id":713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:7","nodeType":"VariableDeclaration","scope":714,"src":"6488:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":709,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":712,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:7","nodeType":"VariableDeclaration","scope":714,"src":"6507:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":711,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:7"},"src":"6456:73:7"}],"scope":716,"src":"4424:2107:7","usedErrors":[680,685,690,697,702,707,714],"usedEvents":[]}],"src":"112:6420:7"},"id":7},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Context":[2451],"ERC165":[2730],"ERC721":[1724],"IERC165":[2742],"IERC721":[1841],"IERC721Errors":[668],"IERC721Metadata":[2429],"IERC721Receiver":[1859],"Strings":[2706]},"id":1725,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":717,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:8"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":719,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1725,"sourceUnit":1842,"src":"133:38:8","symbolAliases":[{"foreign":{"id":718,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"141:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":721,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1725,"sourceUnit":1860,"src":"172:54:8","symbolAliases":[{"foreign":{"id":720,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"180:15:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":723,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1725,"sourceUnit":2430,"src":"227:65:8","symbolAliases":[{"foreign":{"id":722,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2429,"src":"235:15:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":725,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1725,"sourceUnit":2452,"src":"293:48:8","symbolAliases":[{"foreign":{"id":724,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"301:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":727,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1725,"sourceUnit":2707,"src":"342:48:8","symbolAliases":[{"foreign":{"id":726,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"350:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":730,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1725,"sourceUnit":2731,"src":"391:69:8","symbolAliases":[{"foreign":{"id":728,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"399:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":729,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"408:6:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":732,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1725,"sourceUnit":716,"src":"461:66:8","symbolAliases":[{"foreign":{"id":731,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"469:13:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":734,"name":"Context","nameLocations":["804:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2451,"src":"804:7:8"},"id":735,"nodeType":"InheritanceSpecifier","src":"804:7:8"},{"baseName":{"id":736,"name":"ERC165","nameLocations":["813:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":2730,"src":"813:6:8"},"id":737,"nodeType":"InheritanceSpecifier","src":"813:6:8"},{"baseName":{"id":738,"name":"IERC721","nameLocations":["821:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"821:7:8"},"id":739,"nodeType":"InheritanceSpecifier","src":"821:7:8"},{"baseName":{"id":740,"name":"IERC721Metadata","nameLocations":["830:15:8"],"nodeType":"IdentifierPath","referencedDeclaration":2429,"src":"830:15:8"},"id":741,"nodeType":"InheritanceSpecifier","src":"830:15:8"},{"baseName":{"id":742,"name":"IERC721Errors","nameLocations":["847:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":668,"src":"847:13:8"},"id":743,"nodeType":"InheritanceSpecifier","src":"847:13:8"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":733,"nodeType":"StructuredDocumentation","src":"529:246:8","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1724,"linearizedBaseContracts":[1724,668,2429,1841,2730,2742,2451],"name":"ERC721","nameLocation":"794:6:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":746,"libraryName":{"id":744,"name":"Strings","nameLocations":["873:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2706,"src":"873:7:8"},"nodeType":"UsingForDirective","src":"867:26:8","typeName":{"id":745,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":748,"mutability":"mutable","name":"_name","nameLocation":"932:5:8","nodeType":"VariableDeclaration","scope":1724,"src":"917:20:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":747,"name":"string","nodeType":"ElementaryTypeName","src":"917:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":750,"mutability":"mutable","name":"_symbol","nameLocation":"979:7:8","nodeType":"VariableDeclaration","scope":1724,"src":"964:22:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":749,"name":"string","nodeType":"ElementaryTypeName","src":"964:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":754,"mutability":"mutable","name":"_owners","nameLocation":"1037:7:8","nodeType":"VariableDeclaration","scope":1724,"src":"993:51:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":753,"keyName":"tokenId","keyNameLocation":"1009:7:8","keyType":{"id":751,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"993:35:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":752,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":758,"mutability":"mutable","name":"_balances","nameLocation":"1093:9:8","nodeType":"VariableDeclaration","scope":1724,"src":"1051:51:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":757,"keyName":"owner","keyNameLocation":"1067:5:8","keyType":{"id":755,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1051:33:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":756,"name":"uint256","nodeType":"ElementaryTypeName","src":"1076:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":762,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1153:15:8","nodeType":"VariableDeclaration","scope":1724,"src":"1109:59:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":761,"keyName":"tokenId","keyNameLocation":"1125:7:8","keyType":{"id":759,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1109:35:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":760,"name":"address","nodeType":"ElementaryTypeName","src":"1136:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":768,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1243:18:8","nodeType":"VariableDeclaration","scope":1724,"src":"1175:86:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":767,"keyName":"owner","keyNameLocation":"1191:5:8","keyType":{"id":763,"name":"address","nodeType":"ElementaryTypeName","src":"1183:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1175:59:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":766,"keyName":"operator","keyNameLocation":"1216:8:8","keyType":{"id":764,"name":"address","nodeType":"ElementaryTypeName","src":"1208:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1200:33:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":765,"name":"bool","nodeType":"ElementaryTypeName","src":"1228:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":784,"nodeType":"Block","src":"1437:57:8","statements":[{"expression":{"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":776,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"1447:5:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":777,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"1455:5:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1447:13:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":779,"nodeType":"ExpressionStatement","src":"1447:13:8"},{"expression":{"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":780,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"1470:7:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":781,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"1480:7:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1470:17:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":783,"nodeType":"ExpressionStatement","src":"1470:17:8"}]},"documentation":{"id":769,"nodeType":"StructuredDocumentation","src":"1268:108:8","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":785,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":771,"mutability":"mutable","name":"name_","nameLocation":"1407:5:8","nodeType":"VariableDeclaration","scope":785,"src":"1393:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":770,"name":"string","nodeType":"ElementaryTypeName","src":"1393:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":773,"mutability":"mutable","name":"symbol_","nameLocation":"1428:7:8","nodeType":"VariableDeclaration","scope":785,"src":"1414:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":772,"name":"string","nodeType":"ElementaryTypeName","src":"1414:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1392:44:8"},"returnParameters":{"id":775,"nodeType":"ParameterList","parameters":[],"src":"1437:0:8"},"scope":1724,"src":"1381:113:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2729,2741],"body":{"id":815,"nodeType":"Block","src":"1669:192:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":796,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"1698:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":798,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"1718:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1841_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1841_$","typeString":"type(contract IERC721)"}],"id":797,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1713:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1713:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1841","typeString":"type(contract IERC721)"}},"id":800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1727:11:8","memberName":"interfaceId","nodeType":"MemberAccess","src":"1713:25:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1698:40:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":802,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"1754:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":804,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2429,"src":"1774:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2429_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2429_$","typeString":"type(contract IERC721Metadata)"}],"id":803,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1769:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1769:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$2429","typeString":"type(contract IERC721Metadata)"}},"id":806,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1791:11:8","memberName":"interfaceId","nodeType":"MemberAccess","src":"1769:33:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1754:48:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:104:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":811,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"1842:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":809,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1818:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1724_$","typeString":"type(contract super ERC721)"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1824:17:8","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2729,"src":"1818:23:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1818:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:156:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":795,"id":814,"nodeType":"Return","src":"1679:175:8"}]},"documentation":{"id":786,"nodeType":"StructuredDocumentation","src":"1500:56:8","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":816,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1570:17:8","nodeType":"FunctionDefinition","overrides":{"id":792,"nodeType":"OverrideSpecifier","overrides":[{"id":790,"name":"ERC165","nameLocations":["1637:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":2730,"src":"1637:6:8"},{"id":791,"name":"IERC165","nameLocations":["1645:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2742,"src":"1645:7:8"}],"src":"1628:25:8"},"parameters":{"id":789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":788,"mutability":"mutable","name":"interfaceId","nameLocation":"1595:11:8","nodeType":"VariableDeclaration","scope":816,"src":"1588:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":787,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1588:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1587:20:8"},"returnParameters":{"id":795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":794,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":816,"src":"1663:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":793,"name":"bool","nodeType":"ElementaryTypeName","src":"1663:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1662:6:8"},"scope":1724,"src":"1561:300:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1766],"body":{"id":843,"nodeType":"Block","src":"1992:136:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":824,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"2006:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":826,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2015:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":825,"name":"address","nodeType":"ElementaryTypeName","src":"2015:7:8","typeDescriptions":{}}},"id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2006:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":838,"nodeType":"IfStatement","src":"2002:87:8","trueBody":{"id":837,"nodeType":"Block","src":"2027:62:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2075:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":832,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2067:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":831,"name":"address","nodeType":"ElementaryTypeName","src":"2067:7:8","typeDescriptions":{}}},"id":834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":830,"name":"ERC721InvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"2048:18:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2048:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":836,"nodeType":"RevertStatement","src":"2041:37:8"}]}},{"expression":{"baseExpression":{"id":839,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"2105:9:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":841,"indexExpression":{"id":840,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"2115:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2105:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":823,"id":842,"nodeType":"Return","src":"2098:23:8"}]},"documentation":{"id":817,"nodeType":"StructuredDocumentation","src":"1867:48:8","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":844,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1929:9:8","nodeType":"FunctionDefinition","parameters":{"id":820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":819,"mutability":"mutable","name":"owner","nameLocation":"1947:5:8","nodeType":"VariableDeclaration","scope":844,"src":"1939:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":818,"name":"address","nodeType":"ElementaryTypeName","src":"1939:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1938:15:8"},"returnParameters":{"id":823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":822,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":844,"src":"1983:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":821,"name":"uint256","nodeType":"ElementaryTypeName","src":"1983:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1982:9:8"},"scope":1724,"src":"1920:208:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1774],"body":{"id":856,"nodeType":"Block","src":"2257:46:8","statements":[{"expression":{"arguments":[{"id":853,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"2288:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":852,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"2274:13:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":851,"id":855,"nodeType":"Return","src":"2267:29:8"}]},"documentation":{"id":845,"nodeType":"StructuredDocumentation","src":"2134:46:8","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":857,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2194:7:8","nodeType":"FunctionDefinition","parameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"mutability":"mutable","name":"tokenId","nameLocation":"2210:7:8","nodeType":"VariableDeclaration","scope":857,"src":"2202:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:17:8"},"returnParameters":{"id":851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":850,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":857,"src":"2248:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":849,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:9:8"},"scope":1724,"src":"2185:118:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2414],"body":{"id":865,"nodeType":"Block","src":"2425:29:8","statements":[{"expression":{"id":863,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"2442:5:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":862,"id":864,"nodeType":"Return","src":"2435:12:8"}]},"documentation":{"id":858,"nodeType":"StructuredDocumentation","src":"2309:51:8","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":866,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2374:4:8","nodeType":"FunctionDefinition","parameters":{"id":859,"nodeType":"ParameterList","parameters":[],"src":"2378:2:8"},"returnParameters":{"id":862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":866,"src":"2410:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":860,"name":"string","nodeType":"ElementaryTypeName","src":"2410:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2409:15:8"},"scope":1724,"src":"2365:89:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2420],"body":{"id":874,"nodeType":"Block","src":"2580:31:8","statements":[{"expression":{"id":872,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"2597:7:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":871,"id":873,"nodeType":"Return","src":"2590:14:8"}]},"documentation":{"id":867,"nodeType":"StructuredDocumentation","src":"2460:53:8","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":875,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2527:6:8","nodeType":"FunctionDefinition","parameters":{"id":868,"nodeType":"ParameterList","parameters":[],"src":"2533:2:8"},"returnParameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":875,"src":"2565:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":869,"name":"string","nodeType":"ElementaryTypeName","src":"2565:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2564:15:8"},"scope":1724,"src":"2518:93:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2428],"body":{"id":910,"nodeType":"Block","src":"2756:176:8","statements":[{"expression":{"arguments":[{"id":884,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"2780:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":883,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"2766:13:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2766:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":886,"nodeType":"ExpressionStatement","src":"2766:22:8"},{"assignments":[888],"declarations":[{"constant":false,"id":888,"mutability":"mutable","name":"baseURI","nameLocation":"2813:7:8","nodeType":"VariableDeclaration","scope":910,"src":"2799:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":887,"name":"string","nodeType":"ElementaryTypeName","src":"2799:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":891,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":889,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"2823:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2823:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2799:34:8"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":894,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"2856:7:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":893,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2850:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":892,"name":"bytes","nodeType":"ElementaryTypeName","src":"2850:5:8","typeDescriptions":{}}},"id":895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2850:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2865:6:8","memberName":"length","nodeType":"MemberAccess","src":"2850:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2874:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2850:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2923:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2850:75:8","trueExpression":{"arguments":[{"id":902,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"2892:7:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":903,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"2901:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2909:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2519,"src":"2901:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2901:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2878:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":899,"name":"string","nodeType":"ElementaryTypeName","src":"2878:6:8","typeDescriptions":{}}},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2885:6:8","memberName":"concat","nodeType":"MemberAccess","src":"2878:13:8","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2878:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":882,"id":909,"nodeType":"Return","src":"2843:82:8"}]},"documentation":{"id":876,"nodeType":"StructuredDocumentation","src":"2617:55:8","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":911,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2686:8:8","nodeType":"FunctionDefinition","parameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"tokenId","nameLocation":"2703:7:8","nodeType":"VariableDeclaration","scope":911,"src":"2695:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":877,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2694:17:8"},"returnParameters":{"id":882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":911,"src":"2741:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":880,"name":"string","nodeType":"ElementaryTypeName","src":"2741:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2740:15:8"},"scope":1724,"src":"2677:255:8","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":919,"nodeType":"Block","src":"3240:26:8","statements":[{"expression":{"hexValue":"","id":917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3257:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":916,"id":918,"nodeType":"Return","src":"3250:9:8"}]},"documentation":{"id":912,"nodeType":"StructuredDocumentation","src":"2938:231:8","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":920,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3183:8:8","nodeType":"FunctionDefinition","parameters":{"id":913,"nodeType":"ParameterList","parameters":[],"src":"3191:2:8"},"returnParameters":{"id":916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":915,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":920,"src":"3225:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":914,"name":"string","nodeType":"ElementaryTypeName","src":"3225:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3224:15:8"},"scope":1724,"src":"3174:92:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1814],"body":{"id":935,"nodeType":"Block","src":"3384:52:8","statements":[{"expression":{"arguments":[{"id":929,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"3403:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":930,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"3407:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":931,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"3416:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3416:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":928,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1527,1593],"referencedDeclaration":1527,"src":"3394:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3394:35:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":934,"nodeType":"ExpressionStatement","src":"3394:35:8"}]},"documentation":{"id":921,"nodeType":"StructuredDocumentation","src":"3272:46:8","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":936,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3332:7:8","nodeType":"FunctionDefinition","parameters":{"id":926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":923,"mutability":"mutable","name":"to","nameLocation":"3348:2:8","nodeType":"VariableDeclaration","scope":936,"src":"3340:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":922,"name":"address","nodeType":"ElementaryTypeName","src":"3340:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":925,"mutability":"mutable","name":"tokenId","nameLocation":"3360:7:8","nodeType":"VariableDeclaration","scope":936,"src":"3352:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":924,"name":"uint256","nodeType":"ElementaryTypeName","src":"3352:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3339:29:8"},"returnParameters":{"id":927,"nodeType":"ParameterList","parameters":[],"src":"3384:0:8"},"scope":1724,"src":"3323:113:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1830],"body":{"id":952,"nodeType":"Block","src":"3573:78:8","statements":[{"expression":{"arguments":[{"id":945,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"3597:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":944,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"3583:13:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":947,"nodeType":"ExpressionStatement","src":"3583:22:8"},{"expression":{"arguments":[{"id":949,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"3636:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":948,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"3623:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3623:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":943,"id":951,"nodeType":"Return","src":"3616:28:8"}]},"documentation":{"id":937,"nodeType":"StructuredDocumentation","src":"3442:50:8","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":953,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3506:11:8","nodeType":"FunctionDefinition","parameters":{"id":940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":939,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:8","nodeType":"VariableDeclaration","scope":953,"src":"3518:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":938,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3517:17:8"},"returnParameters":{"id":943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":942,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":953,"src":"3564:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":941,"name":"address","nodeType":"ElementaryTypeName","src":"3564:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3563:9:8"},"scope":1724,"src":"3497:154:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1822],"body":{"id":968,"nodeType":"Block","src":"3793:69:8","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":962,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"3822:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":964,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"3836:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":965,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"3846:8:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":961,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"3803:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3803:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":967,"nodeType":"ExpressionStatement","src":"3803:52:8"}]},"documentation":{"id":954,"nodeType":"StructuredDocumentation","src":"3657:56:8","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":969,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3727:17:8","nodeType":"FunctionDefinition","parameters":{"id":959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":956,"mutability":"mutable","name":"operator","nameLocation":"3753:8:8","nodeType":"VariableDeclaration","scope":969,"src":"3745:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":955,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":958,"mutability":"mutable","name":"approved","nameLocation":"3768:8:8","nodeType":"VariableDeclaration","scope":969,"src":"3763:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":957,"name":"bool","nodeType":"ElementaryTypeName","src":"3763:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3744:33:8"},"returnParameters":{"id":960,"nodeType":"ParameterList","parameters":[],"src":"3793:0:8"},"scope":1724,"src":"3718:144:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1840],"body":{"id":985,"nodeType":"Block","src":"4022:59:8","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":979,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"4039:18:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":981,"indexExpression":{"id":980,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"4058:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:25:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":983,"indexExpression":{"id":982,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"4065:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:35:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":978,"id":984,"nodeType":"Return","src":"4032:42:8"}]},"documentation":{"id":970,"nodeType":"StructuredDocumentation","src":"3868:55:8","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":986,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3937:16:8","nodeType":"FunctionDefinition","parameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":972,"mutability":"mutable","name":"owner","nameLocation":"3962:5:8","nodeType":"VariableDeclaration","scope":986,"src":"3954:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":971,"name":"address","nodeType":"ElementaryTypeName","src":"3954:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":974,"mutability":"mutable","name":"operator","nameLocation":"3977:8:8","nodeType":"VariableDeclaration","scope":986,"src":"3969:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":973,"name":"address","nodeType":"ElementaryTypeName","src":"3969:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3953:33:8"},"returnParameters":{"id":978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":977,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":986,"src":"4016:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":976,"name":"bool","nodeType":"ElementaryTypeName","src":"4016:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4015:6:8"},"scope":1724,"src":"3928:153:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1806],"body":{"id":1031,"nodeType":"Block","src":"4223:498:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":996,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"4237:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4251:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4243:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":997,"name":"address","nodeType":"ElementaryTypeName","src":"4243:7:8","typeDescriptions":{}}},"id":1000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4243:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4237:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1010,"nodeType":"IfStatement","src":"4233:87:8","trueBody":{"id":1009,"nodeType":"Block","src":"4255:65:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4306:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4298:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1003,"name":"address","nodeType":"ElementaryTypeName","src":"4298:7:8","typeDescriptions":{}}},"id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4298:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1002,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"4276:21:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1008,"nodeType":"RevertStatement","src":"4269:40:8"}]}},{"assignments":[1012],"declarations":[{"constant":false,"id":1012,"mutability":"mutable","name":"previousOwner","nameLocation":"4546:13:8","nodeType":"VariableDeclaration","scope":1031,"src":"4538:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1011,"name":"address","nodeType":"ElementaryTypeName","src":"4538:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1019,"initialValue":{"arguments":[{"id":1014,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"4570:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1015,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"4574:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1016,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"4583:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1013,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"4562:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4562:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4538:58:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1020,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"4610:13:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1021,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"4627:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4610:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1030,"nodeType":"IfStatement","src":"4606:109:8","trueBody":{"id":1029,"nodeType":"Block","src":"4633:82:8","statements":[{"errorCall":{"arguments":[{"id":1024,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"4675:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1025,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"4681:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1026,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"4690:13:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1023,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"4654:20:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4654:50:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1028,"nodeType":"RevertStatement","src":"4647:57:8"}]}}]},"documentation":{"id":987,"nodeType":"StructuredDocumentation","src":"4087:51:8","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":1032,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4152:12:8","nodeType":"FunctionDefinition","parameters":{"id":994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":989,"mutability":"mutable","name":"from","nameLocation":"4173:4:8","nodeType":"VariableDeclaration","scope":1032,"src":"4165:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":988,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":991,"mutability":"mutable","name":"to","nameLocation":"4187:2:8","nodeType":"VariableDeclaration","scope":1032,"src":"4179:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":990,"name":"address","nodeType":"ElementaryTypeName","src":"4179:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":993,"mutability":"mutable","name":"tokenId","nameLocation":"4199:7:8","nodeType":"VariableDeclaration","scope":1032,"src":"4191:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":992,"name":"uint256","nodeType":"ElementaryTypeName","src":"4191:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4164:43:8"},"returnParameters":{"id":995,"nodeType":"ParameterList","parameters":[],"src":"4223:0:8"},"scope":1724,"src":"4143:578:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1796],"body":{"id":1049,"nodeType":"Block","src":"4863:56:8","statements":[{"expression":{"arguments":[{"id":1043,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"4890:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1044,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"4896:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1045,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"4900:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4909:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1042,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[1050,1076],"referencedDeclaration":1076,"src":"4873:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1048,"nodeType":"ExpressionStatement","src":"4873:39:8"}]},"documentation":{"id":1033,"nodeType":"StructuredDocumentation","src":"4727:55:8","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":1050,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4796:16:8","nodeType":"FunctionDefinition","parameters":{"id":1040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"from","nameLocation":"4821:4:8","nodeType":"VariableDeclaration","scope":1050,"src":"4813:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1034,"name":"address","nodeType":"ElementaryTypeName","src":"4813:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1037,"mutability":"mutable","name":"to","nameLocation":"4835:2:8","nodeType":"VariableDeclaration","scope":1050,"src":"4827:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1036,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1039,"mutability":"mutable","name":"tokenId","nameLocation":"4847:7:8","nodeType":"VariableDeclaration","scope":1050,"src":"4839:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1038,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4812:43:8"},"returnParameters":{"id":1041,"nodeType":"ParameterList","parameters":[],"src":"4863:0:8"},"scope":1724,"src":"4787:132:8","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1786],"body":{"id":1075,"nodeType":"Block","src":"5088:105:8","statements":[{"expression":{"arguments":[{"id":1063,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"5111:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1064,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"5117:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1065,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"5121:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1062,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"5098:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5098:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1067,"nodeType":"ExpressionStatement","src":"5098:31:8"},{"expression":{"arguments":[{"id":1069,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"5162:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1070,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"5168:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1071,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"5172:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1072,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"5181:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1068,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"5139:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:47:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1074,"nodeType":"ExpressionStatement","src":"5139:47:8"}]},"documentation":{"id":1051,"nodeType":"StructuredDocumentation","src":"4925:55:8","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":1076,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4994:16:8","nodeType":"FunctionDefinition","parameters":{"id":1060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1053,"mutability":"mutable","name":"from","nameLocation":"5019:4:8","nodeType":"VariableDeclaration","scope":1076,"src":"5011:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1052,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1055,"mutability":"mutable","name":"to","nameLocation":"5033:2:8","nodeType":"VariableDeclaration","scope":1076,"src":"5025:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1054,"name":"address","nodeType":"ElementaryTypeName","src":"5025:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1057,"mutability":"mutable","name":"tokenId","nameLocation":"5045:7:8","nodeType":"VariableDeclaration","scope":1076,"src":"5037:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1056,"name":"uint256","nodeType":"ElementaryTypeName","src":"5037:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1059,"mutability":"mutable","name":"data","nameLocation":"5067:4:8","nodeType":"VariableDeclaration","scope":1076,"src":"5054:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1058,"name":"bytes","nodeType":"ElementaryTypeName","src":"5054:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5010:62:8"},"returnParameters":{"id":1061,"nodeType":"ParameterList","parameters":[],"src":"5088:0:8"},"scope":1724,"src":"4985:208:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1088,"nodeType":"Block","src":"5782:40:8","statements":[{"expression":{"baseExpression":{"id":1084,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"5799:7:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1086,"indexExpression":{"id":1085,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"5807:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5799:16:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1083,"id":1087,"nodeType":"Return","src":"5792:23:8"}]},"documentation":{"id":1077,"nodeType":"StructuredDocumentation","src":"5199:503:8","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."},"id":1089,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"5716:8:8","nodeType":"FunctionDefinition","parameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1079,"mutability":"mutable","name":"tokenId","nameLocation":"5733:7:8","nodeType":"VariableDeclaration","scope":1089,"src":"5725:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1078,"name":"uint256","nodeType":"ElementaryTypeName","src":"5725:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5724:17:8"},"returnParameters":{"id":1083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1082,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1089,"src":"5773:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1081,"name":"address","nodeType":"ElementaryTypeName","src":"5773:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5772:9:8"},"scope":1724,"src":"5707:115:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1101,"nodeType":"Block","src":"6017:48:8","statements":[{"expression":{"baseExpression":{"id":1097,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"6034:15:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1099,"indexExpression":{"id":1098,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"6050:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6034:24:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1096,"id":1100,"nodeType":"Return","src":"6027:31:8"}]},"documentation":{"id":1090,"nodeType":"StructuredDocumentation","src":"5828:105:8","text":" @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."},"id":1102,"implemented":true,"kind":"function","modifiers":[],"name":"_getApproved","nameLocation":"5947:12:8","nodeType":"FunctionDefinition","parameters":{"id":1093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1092,"mutability":"mutable","name":"tokenId","nameLocation":"5968:7:8","nodeType":"VariableDeclaration","scope":1102,"src":"5960:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1091,"name":"uint256","nodeType":"ElementaryTypeName","src":"5960:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5959:17:8"},"returnParameters":{"id":1096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1102,"src":"6008:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1094,"name":"address","nodeType":"ElementaryTypeName","src":"6008:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6007:9:8"},"scope":1724,"src":"5938:127:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1137,"nodeType":"Block","src":"6485:163:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1114,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"6514:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6533:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6525:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1115,"name":"address","nodeType":"ElementaryTypeName","src":"6525:7:8","typeDescriptions":{}}},"id":1118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6525:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6514:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1120,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"6552:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1121,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"6561:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6552:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1124,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"6589:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1125,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"6596:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1123,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"6572:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6572:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:52:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1129,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"6621:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1128,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"6608:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6608:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1131,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"6633:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6608:32:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:88:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1134,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6551:90:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6514:127:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1113,"id":1136,"nodeType":"Return","src":"6495:146:8"}]},"documentation":{"id":1103,"nodeType":"StructuredDocumentation","src":"6071:300:8","text":" @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":1138,"implemented":true,"kind":"function","modifiers":[],"name":"_isAuthorized","nameLocation":"6385:13:8","nodeType":"FunctionDefinition","parameters":{"id":1110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1105,"mutability":"mutable","name":"owner","nameLocation":"6407:5:8","nodeType":"VariableDeclaration","scope":1138,"src":"6399:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1104,"name":"address","nodeType":"ElementaryTypeName","src":"6399:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1107,"mutability":"mutable","name":"spender","nameLocation":"6422:7:8","nodeType":"VariableDeclaration","scope":1138,"src":"6414:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1106,"name":"address","nodeType":"ElementaryTypeName","src":"6414:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1109,"mutability":"mutable","name":"tokenId","nameLocation":"6439:7:8","nodeType":"VariableDeclaration","scope":1138,"src":"6431:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1108,"name":"uint256","nodeType":"ElementaryTypeName","src":"6431:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6398:49:8"},"returnParameters":{"id":1113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1138,"src":"6479:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1111,"name":"bool","nodeType":"ElementaryTypeName","src":"6479:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6478:6:8"},"scope":1724,"src":"6376:272:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1174,"nodeType":"Block","src":"7179:271:8","statements":[{"condition":{"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7193:39:8","subExpression":{"arguments":[{"id":1149,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"7208:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1150,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"7215:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1151,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"7224:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1148,"name":"_isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"7194:13:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) view returns (bool)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7194:38:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1173,"nodeType":"IfStatement","src":"7189:255:8","trueBody":{"id":1172,"nodeType":"Block","src":"7234:210:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1154,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"7252:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7269:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7261:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1155,"name":"address","nodeType":"ElementaryTypeName","src":"7261:7:8","typeDescriptions":{}}},"id":1158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7261:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7252:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1170,"nodeType":"Block","src":"7350:84:8","statements":[{"errorCall":{"arguments":[{"id":1166,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"7402:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1167,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"7411:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1165,"name":"ERC721InsufficientApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"7375:26:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7375:44:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1169,"nodeType":"RevertStatement","src":"7368:51:8"}]},"id":1171,"nodeType":"IfStatement","src":"7248:186:8","trueBody":{"id":1164,"nodeType":"Block","src":"7273:71:8","statements":[{"errorCall":{"arguments":[{"id":1161,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"7321:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1160,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"7298:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7298:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1163,"nodeType":"RevertStatement","src":"7291:38:8"}]}}]}}]},"documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"6654:423:8","text":" @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n the `spender` for the specific `tokenId`.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":1175,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAuthorized","nameLocation":"7091:16:8","nodeType":"FunctionDefinition","parameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"owner","nameLocation":"7116:5:8","nodeType":"VariableDeclaration","scope":1175,"src":"7108:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1143,"mutability":"mutable","name":"spender","nameLocation":"7131:7:8","nodeType":"VariableDeclaration","scope":1175,"src":"7123:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1142,"name":"address","nodeType":"ElementaryTypeName","src":"7123:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1145,"mutability":"mutable","name":"tokenId","nameLocation":"7148:7:8","nodeType":"VariableDeclaration","scope":1175,"src":"7140:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1144,"name":"uint256","nodeType":"ElementaryTypeName","src":"7140:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:49:8"},"returnParameters":{"id":1147,"nodeType":"ParameterList","parameters":[],"src":"7179:0:8"},"scope":1724,"src":"7082:368:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1190,"nodeType":"Block","src":"8167:78:8","statements":[{"id":1189,"nodeType":"UncheckedBlock","src":"8177:62:8","statements":[{"expression":{"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1183,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"8201:9:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1185,"indexExpression":{"id":1184,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1178,"src":"8211:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8201:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1186,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"8223:5:8","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8201:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1188,"nodeType":"ExpressionStatement","src":"8201:27:8"}]}]},"documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"7456:631:8","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."},"id":1191,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"8101:16:8","nodeType":"FunctionDefinition","parameters":{"id":1181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1178,"mutability":"mutable","name":"account","nameLocation":"8126:7:8","nodeType":"VariableDeclaration","scope":1191,"src":"8118:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1177,"name":"address","nodeType":"ElementaryTypeName","src":"8118:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1180,"mutability":"mutable","name":"value","nameLocation":"8143:5:8","nodeType":"VariableDeclaration","scope":1191,"src":"8135:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1179,"name":"uint128","nodeType":"ElementaryTypeName","src":"8135:7:8","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"8117:32:8"},"returnParameters":{"id":1182,"nodeType":"ParameterList","parameters":[],"src":"8167:0:8"},"scope":1724,"src":"8092:153:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1280,"nodeType":"Block","src":"8933:700:8","statements":[{"assignments":[1204],"declarations":[{"constant":false,"id":1204,"mutability":"mutable","name":"from","nameLocation":"8951:4:8","nodeType":"VariableDeclaration","scope":1280,"src":"8943:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1203,"name":"address","nodeType":"ElementaryTypeName","src":"8943:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1208,"initialValue":{"arguments":[{"id":1206,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"8967:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1205,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"8958:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8958:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8943:32:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1209,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"9035:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9051:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9043:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1210,"name":"address","nodeType":"ElementaryTypeName","src":"9043:7:8","typeDescriptions":{}}},"id":1213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9043:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9035:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1222,"nodeType":"IfStatement","src":"9031:86:8","trueBody":{"id":1221,"nodeType":"Block","src":"9055:62:8","statements":[{"expression":{"arguments":[{"id":1216,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"9086:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1217,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"9092:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1218,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"9098:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1215,"name":"_checkAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"9069:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) view"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9069:37:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1220,"nodeType":"ExpressionStatement","src":"9069:37:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1223,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"9161:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9177:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9169:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1224,"name":"address","nodeType":"ElementaryTypeName","src":"9169:7:8","typeDescriptions":{}}},"id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9169:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9161:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1250,"nodeType":"IfStatement","src":"9157:256:8","trueBody":{"id":1249,"nodeType":"Block","src":"9181:232:8","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9294:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9286:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1230,"name":"address","nodeType":"ElementaryTypeName","src":"9286:7:8","typeDescriptions":{}}},"id":1233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9286:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1234,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"9298:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9315:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1236,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9307:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1235,"name":"address","nodeType":"ElementaryTypeName","src":"9307:7:8","typeDescriptions":{}}},"id":1238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9307:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":1239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9319:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1229,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1527,1593],"referencedDeclaration":1593,"src":"9277:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9277:48:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1241,"nodeType":"ExpressionStatement","src":"9277:48:8"},{"id":1248,"nodeType":"UncheckedBlock","src":"9340:63:8","statements":[{"expression":{"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1242,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"9368:9:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1244,"indexExpression":{"id":1243,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"9378:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9368:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":1245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9387:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9368:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1247,"nodeType":"ExpressionStatement","src":"9368:20:8"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1251,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"9427:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9441:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9433:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1252,"name":"address","nodeType":"ElementaryTypeName","src":"9433:7:8","typeDescriptions":{}}},"id":1255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9433:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9427:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1265,"nodeType":"IfStatement","src":"9423:107:8","trueBody":{"id":1264,"nodeType":"Block","src":"9445:85:8","statements":[{"id":1263,"nodeType":"UncheckedBlock","src":"9459:61:8","statements":[{"expression":{"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1257,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"9487:9:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1259,"indexExpression":{"id":1258,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"9497:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9487:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9504:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9487:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1262,"nodeType":"ExpressionStatement","src":"9487:18:8"}]}]}},{"expression":{"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1266,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"9540:7:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1268,"indexExpression":{"id":1267,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"9548:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9540:16:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1269,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"9559:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9540:21:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1271,"nodeType":"ExpressionStatement","src":"9540:21:8"},{"eventCall":{"arguments":[{"id":1273,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"9586:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1274,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"9592:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1275,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"9596:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1272,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1740,"src":"9577:8:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9577:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1277,"nodeType":"EmitStatement","src":"9572:32:8"},{"expression":{"id":1278,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"9622:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1202,"id":1279,"nodeType":"Return","src":"9615:11:8"}]},"documentation":{"id":1192,"nodeType":"StructuredDocumentation","src":"8251:582:8","text":" @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."},"id":1281,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"8847:7:8","nodeType":"FunctionDefinition","parameters":{"id":1199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1194,"mutability":"mutable","name":"to","nameLocation":"8863:2:8","nodeType":"VariableDeclaration","scope":1281,"src":"8855:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1193,"name":"address","nodeType":"ElementaryTypeName","src":"8855:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1196,"mutability":"mutable","name":"tokenId","nameLocation":"8875:7:8","nodeType":"VariableDeclaration","scope":1281,"src":"8867:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1195,"name":"uint256","nodeType":"ElementaryTypeName","src":"8867:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1198,"mutability":"mutable","name":"auth","nameLocation":"8892:4:8","nodeType":"VariableDeclaration","scope":1281,"src":"8884:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1197,"name":"address","nodeType":"ElementaryTypeName","src":"8884:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8854:43:8"},"returnParameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1281,"src":"8924:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1200,"name":"address","nodeType":"ElementaryTypeName","src":"8924:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8923:9:8"},"scope":1724,"src":"8838:795:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1330,"nodeType":"Block","src":"10008:274:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1289,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"10022:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10036:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10028:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1290,"name":"address","nodeType":"ElementaryTypeName","src":"10028:7:8","typeDescriptions":{}}},"id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10028:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10022:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1303,"nodeType":"IfStatement","src":"10018:87:8","trueBody":{"id":1302,"nodeType":"Block","src":"10040:65:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10091:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10083:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1296,"name":"address","nodeType":"ElementaryTypeName","src":"10083:7:8","typeDescriptions":{}}},"id":1299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10083:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1295,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"10061:21:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10061:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1301,"nodeType":"RevertStatement","src":"10054:40:8"}]}},{"assignments":[1305],"declarations":[{"constant":false,"id":1305,"mutability":"mutable","name":"previousOwner","nameLocation":"10122:13:8","nodeType":"VariableDeclaration","scope":1330,"src":"10114:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1304,"name":"address","nodeType":"ElementaryTypeName","src":"10114:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1314,"initialValue":{"arguments":[{"id":1307,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"10146:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1308,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"10150:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1310,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10159:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1309,"name":"address","nodeType":"ElementaryTypeName","src":"10159:7:8","typeDescriptions":{}}},"id":1312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1306,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"10138:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10138:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10114:56:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1315,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"10184:13:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10209:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10201:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1316,"name":"address","nodeType":"ElementaryTypeName","src":"10201:7:8","typeDescriptions":{}}},"id":1319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10201:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10184:27:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1329,"nodeType":"IfStatement","src":"10180:96:8","trueBody":{"id":1328,"nodeType":"Block","src":"10213:63:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10262:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1323,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10254:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1322,"name":"address","nodeType":"ElementaryTypeName","src":"10254:7:8","typeDescriptions":{}}},"id":1325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10254:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1321,"name":"ERC721InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"10234:19:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10234:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1327,"nodeType":"RevertStatement","src":"10227:38:8"}]}}]},"documentation":{"id":1282,"nodeType":"StructuredDocumentation","src":"9639:311:8","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":1331,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9964:5:8","nodeType":"FunctionDefinition","parameters":{"id":1287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1284,"mutability":"mutable","name":"to","nameLocation":"9978:2:8","nodeType":"VariableDeclaration","scope":1331,"src":"9970:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1283,"name":"address","nodeType":"ElementaryTypeName","src":"9970:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1286,"mutability":"mutable","name":"tokenId","nameLocation":"9990:7:8","nodeType":"VariableDeclaration","scope":1331,"src":"9982:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1285,"name":"uint256","nodeType":"ElementaryTypeName","src":"9982:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9969:29:8"},"returnParameters":{"id":1288,"nodeType":"ParameterList","parameters":[],"src":"10008:0:8"},"scope":1724,"src":"9955:327:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1345,"nodeType":"Block","src":"10690:43:8","statements":[{"expression":{"arguments":[{"id":1340,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"10710:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1341,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"10714:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10723:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1339,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1346,1372],"referencedDeclaration":1372,"src":"10700:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10700:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1344,"nodeType":"ExpressionStatement","src":"10700:26:8"}]},"documentation":{"id":1332,"nodeType":"StructuredDocumentation","src":"10288:340:8","text":" @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1346,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10642:9:8","nodeType":"FunctionDefinition","parameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1334,"mutability":"mutable","name":"to","nameLocation":"10660:2:8","nodeType":"VariableDeclaration","scope":1346,"src":"10652:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1333,"name":"address","nodeType":"ElementaryTypeName","src":"10652:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1336,"mutability":"mutable","name":"tokenId","nameLocation":"10672:7:8","nodeType":"VariableDeclaration","scope":1346,"src":"10664:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"10664:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10651:29:8"},"returnParameters":{"id":1338,"nodeType":"ParameterList","parameters":[],"src":"10690:0:8"},"scope":1724,"src":"10633:100:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1371,"nodeType":"Block","src":"11038:98:8","statements":[{"expression":{"arguments":[{"id":1357,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"11054:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1358,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"11058:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1356,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"11048:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11048:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1360,"nodeType":"ExpressionStatement","src":"11048:18:8"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11107:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11099:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1362,"name":"address","nodeType":"ElementaryTypeName","src":"11099:7:8","typeDescriptions":{}}},"id":1365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11099:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1366,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"11111:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1367,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"11115:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1368,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"11124:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1361,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"11076:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1370,"nodeType":"ExpressionStatement","src":"11076:53:8"}]},"documentation":{"id":1347,"nodeType":"StructuredDocumentation","src":"10739:210:8","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1372,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10963:9:8","nodeType":"FunctionDefinition","parameters":{"id":1354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1349,"mutability":"mutable","name":"to","nameLocation":"10981:2:8","nodeType":"VariableDeclaration","scope":1372,"src":"10973:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1348,"name":"address","nodeType":"ElementaryTypeName","src":"10973:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1351,"mutability":"mutable","name":"tokenId","nameLocation":"10993:7:8","nodeType":"VariableDeclaration","scope":1372,"src":"10985:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1350,"name":"uint256","nodeType":"ElementaryTypeName","src":"10985:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1353,"mutability":"mutable","name":"data","nameLocation":"11015:4:8","nodeType":"VariableDeclaration","scope":1372,"src":"11002:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1352,"name":"bytes","nodeType":"ElementaryTypeName","src":"11002:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10972:48:8"},"returnParameters":{"id":1355,"nodeType":"ParameterList","parameters":[],"src":"11038:0:8"},"scope":1724,"src":"10954:182:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1404,"nodeType":"Block","src":"11503:186:8","statements":[{"assignments":[1379],"declarations":[{"constant":false,"id":1379,"mutability":"mutable","name":"previousOwner","nameLocation":"11521:13:8","nodeType":"VariableDeclaration","scope":1404,"src":"11513:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1378,"name":"address","nodeType":"ElementaryTypeName","src":"11513:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1391,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":1383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11545:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1381,"name":"address","nodeType":"ElementaryTypeName","src":"11545:7:8","typeDescriptions":{}}},"id":1384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11545:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1385,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"11557:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11566:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1386,"name":"address","nodeType":"ElementaryTypeName","src":"11566:7:8","typeDescriptions":{}}},"id":1389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11566:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1380,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"11537:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11537:40:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11513:64:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1392,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"11591:13:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11608:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1393,"name":"address","nodeType":"ElementaryTypeName","src":"11608:7:8","typeDescriptions":{}}},"id":1396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11608:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11591:27:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1403,"nodeType":"IfStatement","src":"11587:96:8","trueBody":{"id":1402,"nodeType":"Block","src":"11620:63:8","statements":[{"errorCall":{"arguments":[{"id":1399,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"11664:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1398,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"11641:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11641:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1401,"nodeType":"RevertStatement","src":"11634:38:8"}]}}]},"documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"11142:315:8","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":1405,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11471:5:8","nodeType":"FunctionDefinition","parameters":{"id":1376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1375,"mutability":"mutable","name":"tokenId","nameLocation":"11485:7:8","nodeType":"VariableDeclaration","scope":1405,"src":"11477:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1374,"name":"uint256","nodeType":"ElementaryTypeName","src":"11477:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11476:17:8"},"returnParameters":{"id":1377,"nodeType":"ParameterList","parameters":[],"src":"11503:0:8"},"scope":1724,"src":"11462:227:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1464,"nodeType":"Block","src":"12084:389:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1415,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"12098:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1417,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12104:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1416,"name":"address","nodeType":"ElementaryTypeName","src":"12104:7:8","typeDescriptions":{}}},"id":1419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12104:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12098:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1429,"nodeType":"IfStatement","src":"12094:87:8","trueBody":{"id":1428,"nodeType":"Block","src":"12116:65:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12167:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1423,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12159:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1422,"name":"address","nodeType":"ElementaryTypeName","src":"12159:7:8","typeDescriptions":{}}},"id":1425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12159:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1421,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"12137:21:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12137:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1427,"nodeType":"RevertStatement","src":"12130:40:8"}]}},{"assignments":[1431],"declarations":[{"constant":false,"id":1431,"mutability":"mutable","name":"previousOwner","nameLocation":"12198:13:8","nodeType":"VariableDeclaration","scope":1464,"src":"12190:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1430,"name":"address","nodeType":"ElementaryTypeName","src":"12190:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1440,"initialValue":{"arguments":[{"id":1433,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"12222:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1434,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"12226:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12243:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12235:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1435,"name":"address","nodeType":"ElementaryTypeName","src":"12235:7:8","typeDescriptions":{}}},"id":1438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12235:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1432,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"12214:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12214:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12190:56:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1441,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"12260:13:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12277:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1442,"name":"address","nodeType":"ElementaryTypeName","src":"12277:7:8","typeDescriptions":{}}},"id":1445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12277:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12260:27:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1452,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"12362:13:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1453,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"12379:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12362:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1462,"nodeType":"IfStatement","src":"12358:109:8","trueBody":{"id":1461,"nodeType":"Block","src":"12385:82:8","statements":[{"errorCall":{"arguments":[{"id":1456,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"12427:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1457,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"12433:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1458,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"12442:13:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1455,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"12406:20:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12406:50:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1460,"nodeType":"RevertStatement","src":"12399:57:8"}]}},"id":1463,"nodeType":"IfStatement","src":"12256:211:8","trueBody":{"id":1451,"nodeType":"Block","src":"12289:63:8","statements":[{"errorCall":{"arguments":[{"id":1448,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"12333:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1447,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"12310:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12310:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1450,"nodeType":"RevertStatement","src":"12303:38:8"}]}}]},"documentation":{"id":1406,"nodeType":"StructuredDocumentation","src":"11695:313:8","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":1465,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"12022:9:8","nodeType":"FunctionDefinition","parameters":{"id":1413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1408,"mutability":"mutable","name":"from","nameLocation":"12040:4:8","nodeType":"VariableDeclaration","scope":1465,"src":"12032:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1407,"name":"address","nodeType":"ElementaryTypeName","src":"12032:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1410,"mutability":"mutable","name":"to","nameLocation":"12054:2:8","nodeType":"VariableDeclaration","scope":1465,"src":"12046:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1409,"name":"address","nodeType":"ElementaryTypeName","src":"12046:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1412,"mutability":"mutable","name":"tokenId","nameLocation":"12066:7:8","nodeType":"VariableDeclaration","scope":1465,"src":"12058:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1411,"name":"uint256","nodeType":"ElementaryTypeName","src":"12058:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12031:43:8"},"returnParameters":{"id":1414,"nodeType":"ParameterList","parameters":[],"src":"12084:0:8"},"scope":1724,"src":"12013:460:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1482,"nodeType":"Block","src":"13481:53:8","statements":[{"expression":{"arguments":[{"id":1476,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"13505:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1477,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"13511:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1478,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"13515:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13524:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1475,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[1483,1509],"referencedDeclaration":1509,"src":"13491:13:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13491:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1481,"nodeType":"ExpressionStatement","src":"13491:36:8"}]},"documentation":{"id":1466,"nodeType":"StructuredDocumentation","src":"12479:922:8","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1483,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13415:13:8","nodeType":"FunctionDefinition","parameters":{"id":1473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"from","nameLocation":"13437:4:8","nodeType":"VariableDeclaration","scope":1483,"src":"13429:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1467,"name":"address","nodeType":"ElementaryTypeName","src":"13429:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1470,"mutability":"mutable","name":"to","nameLocation":"13451:2:8","nodeType":"VariableDeclaration","scope":1483,"src":"13443:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1469,"name":"address","nodeType":"ElementaryTypeName","src":"13443:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1472,"mutability":"mutable","name":"tokenId","nameLocation":"13463:7:8","nodeType":"VariableDeclaration","scope":1483,"src":"13455:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1471,"name":"uint256","nodeType":"ElementaryTypeName","src":"13455:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13428:43:8"},"returnParameters":{"id":1474,"nodeType":"ParameterList","parameters":[],"src":"13481:0:8"},"scope":1724,"src":"13406:128:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1508,"nodeType":"Block","src":"13873:102:8","statements":[{"expression":{"arguments":[{"id":1496,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"13893:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1497,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"13899:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1498,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"13903:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1495,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"13883:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13883:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1500,"nodeType":"ExpressionStatement","src":"13883:28:8"},{"expression":{"arguments":[{"id":1502,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"13944:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1503,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"13950:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1504,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"13954:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1505,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"13963:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1501,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"13921:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:47:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1507,"nodeType":"ExpressionStatement","src":"13921:47:8"}]},"documentation":{"id":1484,"nodeType":"StructuredDocumentation","src":"13540:226:8","text":" @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1509,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13780:13:8","nodeType":"FunctionDefinition","parameters":{"id":1493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1486,"mutability":"mutable","name":"from","nameLocation":"13802:4:8","nodeType":"VariableDeclaration","scope":1509,"src":"13794:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1485,"name":"address","nodeType":"ElementaryTypeName","src":"13794:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1488,"mutability":"mutable","name":"to","nameLocation":"13816:2:8","nodeType":"VariableDeclaration","scope":1509,"src":"13808:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1487,"name":"address","nodeType":"ElementaryTypeName","src":"13808:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1490,"mutability":"mutable","name":"tokenId","nameLocation":"13828:7:8","nodeType":"VariableDeclaration","scope":1509,"src":"13820:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1489,"name":"uint256","nodeType":"ElementaryTypeName","src":"13820:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1492,"mutability":"mutable","name":"data","nameLocation":"13850:4:8","nodeType":"VariableDeclaration","scope":1509,"src":"13837:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1491,"name":"bytes","nodeType":"ElementaryTypeName","src":"13837:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13793:62:8"},"returnParameters":{"id":1494,"nodeType":"ParameterList","parameters":[],"src":"13873:0:8"},"scope":1724,"src":"13771:204:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1526,"nodeType":"Block","src":"14488:50:8","statements":[{"expression":{"arguments":[{"id":1520,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"14507:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1521,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"14511:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1522,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"14520:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":1523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14526:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1519,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1527,1593],"referencedDeclaration":1593,"src":"14498:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14498:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1525,"nodeType":"ExpressionStatement","src":"14498:33:8"}]},"documentation":{"id":1510,"nodeType":"StructuredDocumentation","src":"13981:432:8","text":" @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":1527,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14427:8:8","nodeType":"FunctionDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1512,"mutability":"mutable","name":"to","nameLocation":"14444:2:8","nodeType":"VariableDeclaration","scope":1527,"src":"14436:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1511,"name":"address","nodeType":"ElementaryTypeName","src":"14436:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1514,"mutability":"mutable","name":"tokenId","nameLocation":"14456:7:8","nodeType":"VariableDeclaration","scope":1527,"src":"14448:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1513,"name":"uint256","nodeType":"ElementaryTypeName","src":"14448:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1516,"mutability":"mutable","name":"auth","nameLocation":"14473:4:8","nodeType":"VariableDeclaration","scope":1527,"src":"14465:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1515,"name":"address","nodeType":"ElementaryTypeName","src":"14465:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14435:43:8"},"returnParameters":{"id":1518,"nodeType":"ParameterList","parameters":[],"src":"14488:0:8"},"scope":1724,"src":"14418:120:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1592,"nodeType":"Block","src":"14814:568:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1539,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"14880:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1540,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"14893:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14909:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14901:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1541,"name":"address","nodeType":"ElementaryTypeName","src":"14901:7:8","typeDescriptions":{}}},"id":1544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14901:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14893:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14880:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1585,"nodeType":"IfStatement","src":"14876:460:8","trueBody":{"id":1584,"nodeType":"Block","src":"14913:423:8","statements":[{"assignments":[1548],"declarations":[{"constant":false,"id":1548,"mutability":"mutable","name":"owner","nameLocation":"14935:5:8","nodeType":"VariableDeclaration","scope":1584,"src":"14927:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1547,"name":"address","nodeType":"ElementaryTypeName","src":"14927:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1552,"initialValue":{"arguments":[{"id":1550,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"14957:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1549,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"14943:13:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14943:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14927:38:8"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1553,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"15093:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15109:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15101:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1554,"name":"address","nodeType":"ElementaryTypeName","src":"15101:7:8","typeDescriptions":{}}},"id":1557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15101:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15093:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1559,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"15115:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1560,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"15124:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15115:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:35:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15132:30:8","subExpression":{"arguments":[{"id":1564,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"15150:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1565,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"15157:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1563,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"15133:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15133:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:69:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1574,"nodeType":"IfStatement","src":"15089:142:8","trueBody":{"id":1573,"nodeType":"Block","src":"15164:67:8","statements":[{"errorCall":{"arguments":[{"id":1570,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"15211:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1569,"name":"ERC721InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"15189:21:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15189:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1572,"nodeType":"RevertStatement","src":"15182:34:8"}]}},{"condition":{"id":1575,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"15249:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1583,"nodeType":"IfStatement","src":"15245:81:8","trueBody":{"id":1582,"nodeType":"Block","src":"15260:66:8","statements":[{"eventCall":{"arguments":[{"id":1577,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"15292:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1578,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"15299:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1579,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"15303:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1576,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"15283:8:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15283:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1581,"nodeType":"EmitStatement","src":"15278:33:8"}]}}]}},{"expression":{"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1586,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"15346:15:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1588,"indexExpression":{"id":1587,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"15362:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15346:24:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1589,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"15373:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15346:29:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1591,"nodeType":"ExpressionStatement","src":"15346:29:8"}]},"documentation":{"id":1528,"nodeType":"StructuredDocumentation","src":"14544:171:8","text":" @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."},"id":1593,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14729:8:8","nodeType":"FunctionDefinition","parameters":{"id":1537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1530,"mutability":"mutable","name":"to","nameLocation":"14746:2:8","nodeType":"VariableDeclaration","scope":1593,"src":"14738:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1529,"name":"address","nodeType":"ElementaryTypeName","src":"14738:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1532,"mutability":"mutable","name":"tokenId","nameLocation":"14758:7:8","nodeType":"VariableDeclaration","scope":1593,"src":"14750:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1531,"name":"uint256","nodeType":"ElementaryTypeName","src":"14750:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1534,"mutability":"mutable","name":"auth","nameLocation":"14775:4:8","nodeType":"VariableDeclaration","scope":1593,"src":"14767:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1533,"name":"address","nodeType":"ElementaryTypeName","src":"14767:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1536,"mutability":"mutable","name":"emitEvent","nameLocation":"14786:9:8","nodeType":"VariableDeclaration","scope":1593,"src":"14781:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1535,"name":"bool","nodeType":"ElementaryTypeName","src":"14781:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14737:59:8"},"returnParameters":{"id":1538,"nodeType":"ParameterList","parameters":[],"src":"14814:0:8"},"scope":1724,"src":"14720:662:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1629,"nodeType":"Block","src":"15684:219:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1603,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"15698:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15718:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15710:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1604,"name":"address","nodeType":"ElementaryTypeName","src":"15710:7:8","typeDescriptions":{}}},"id":1607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15710:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15698:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1614,"nodeType":"IfStatement","src":"15694:91:8","trueBody":{"id":1613,"nodeType":"Block","src":"15722:63:8","statements":[{"errorCall":{"arguments":[{"id":1610,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"15765:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1609,"name":"ERC721InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"15743:21:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15743:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1612,"nodeType":"RevertStatement","src":"15736:38:8"}]}},{"expression":{"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1615,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"15794:18:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1618,"indexExpression":{"id":1616,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"15813:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15794:25:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1619,"indexExpression":{"id":1617,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"15820:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15794:35:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1620,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"15832:8:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15794:46:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1622,"nodeType":"ExpressionStatement","src":"15794:46:8"},{"eventCall":{"arguments":[{"id":1624,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"15870:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1625,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"15877:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1626,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"15887:8:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1623,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"15855:14:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15855:41:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1628,"nodeType":"EmitStatement","src":"15850:46:8"}]},"documentation":{"id":1594,"nodeType":"StructuredDocumentation","src":"15388:198:8","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."},"id":1630,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"15600:18:8","nodeType":"FunctionDefinition","parameters":{"id":1601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"owner","nameLocation":"15627:5:8","nodeType":"VariableDeclaration","scope":1630,"src":"15619:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1595,"name":"address","nodeType":"ElementaryTypeName","src":"15619:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1598,"mutability":"mutable","name":"operator","nameLocation":"15642:8:8","nodeType":"VariableDeclaration","scope":1630,"src":"15634:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1597,"name":"address","nodeType":"ElementaryTypeName","src":"15634:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1600,"mutability":"mutable","name":"approved","nameLocation":"15657:8:8","nodeType":"VariableDeclaration","scope":1630,"src":"15652:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1599,"name":"bool","nodeType":"ElementaryTypeName","src":"15652:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15618:48:8"},"returnParameters":{"id":1602,"nodeType":"ParameterList","parameters":[],"src":"15684:0:8"},"scope":1724,"src":"15591:312:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1658,"nodeType":"Block","src":"16210:169:8","statements":[{"assignments":[1639],"declarations":[{"constant":false,"id":1639,"mutability":"mutable","name":"owner","nameLocation":"16228:5:8","nodeType":"VariableDeclaration","scope":1658,"src":"16220:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1638,"name":"address","nodeType":"ElementaryTypeName","src":"16220:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1643,"initialValue":{"arguments":[{"id":1641,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"16245:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1640,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"16236:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16236:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16220:33:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1644,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"16267:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16284:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16276:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1645,"name":"address","nodeType":"ElementaryTypeName","src":"16276:7:8","typeDescriptions":{}}},"id":1648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16276:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16267:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1655,"nodeType":"IfStatement","src":"16263:88:8","trueBody":{"id":1654,"nodeType":"Block","src":"16288:63:8","statements":[{"errorCall":{"arguments":[{"id":1651,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"16332:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1650,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"16309:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16309:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1653,"nodeType":"RevertStatement","src":"16302:38:8"}]}},{"expression":{"id":1656,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"16367:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1637,"id":1657,"nodeType":"Return","src":"16360:12:8"}]},"documentation":{"id":1631,"nodeType":"StructuredDocumentation","src":"15909:224:8","text":" @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."},"id":1659,"implemented":true,"kind":"function","modifiers":[],"name":"_requireOwned","nameLocation":"16147:13:8","nodeType":"FunctionDefinition","parameters":{"id":1634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1633,"mutability":"mutable","name":"tokenId","nameLocation":"16169:7:8","nodeType":"VariableDeclaration","scope":1659,"src":"16161:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1632,"name":"uint256","nodeType":"ElementaryTypeName","src":"16161:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16160:17:8"},"returnParameters":{"id":1637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1636,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1659,"src":"16201:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1635,"name":"address","nodeType":"ElementaryTypeName","src":"16201:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16200:9:8"},"scope":1724,"src":"16138:241:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1722,"nodeType":"Block","src":"17020:680:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1671,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"17034:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17037:4:8","memberName":"code","nodeType":"MemberAccess","src":"17034:7:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17042:6:8","memberName":"length","nodeType":"MemberAccess","src":"17034:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17051:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17034:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1721,"nodeType":"IfStatement","src":"17030:664:8","trueBody":{"id":1720,"nodeType":"Block","src":"17054:640:8","statements":[{"clauses":[{"block":{"id":1700,"nodeType":"Block","src":"17168:162:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1689,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"17190:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1690,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"17200:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1859_$","typeString":"type(contract IERC721Receiver)"}},"id":1691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17216:16:8","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1858,"src":"17200:32:8","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17233:8:8","memberName":"selector","nodeType":"MemberAccess","src":"17200:41:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17190:51:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1699,"nodeType":"IfStatement","src":"17186:130:8","trueBody":{"id":1698,"nodeType":"Block","src":"17243:73:8","statements":[{"errorCall":{"arguments":[{"id":1695,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"17294:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1694,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"17272:21:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17272:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1697,"nodeType":"RevertStatement","src":"17265:32:8"}]}}]},"errorName":"","id":1701,"nodeType":"TryCatchClause","parameters":{"id":1688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1687,"mutability":"mutable","name":"retval","nameLocation":"17160:6:8","nodeType":"VariableDeclaration","scope":1701,"src":"17153:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1686,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17153:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17152:15:8"},"src":"17144:186:8"},{"block":{"id":1717,"nodeType":"Block","src":"17359:325:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1705,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"17381:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17388:6:8","memberName":"length","nodeType":"MemberAccess","src":"17381:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17398:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17381:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1715,"nodeType":"Block","src":"17480:190:8","statements":[{"AST":{"nodeType":"YulBlock","src":"17566:86:8","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17603:2:8","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"17607:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17599:3:8"},"nodeType":"YulFunctionCall","src":"17599:15:8"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"17622:6:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17616:5:8"},"nodeType":"YulFunctionCall","src":"17616:13:8"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17592:6:8"},"nodeType":"YulFunctionCall","src":"17592:38:8"},"nodeType":"YulExpressionStatement","src":"17592:38:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1703,"isOffset":false,"isSlot":false,"src":"17607:6:8","valueSize":1},{"declaration":1703,"isOffset":false,"isSlot":false,"src":"17622:6:8","valueSize":1}],"id":1714,"nodeType":"InlineAssembly","src":"17557:95:8"}]},"id":1716,"nodeType":"IfStatement","src":"17377:293:8","trueBody":{"id":1713,"nodeType":"Block","src":"17401:73:8","statements":[{"errorCall":{"arguments":[{"id":1710,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"17452:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1709,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"17430:21:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17430:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1712,"nodeType":"RevertStatement","src":"17423:32:8"}]}}]},"errorName":"","id":1718,"nodeType":"TryCatchClause","parameters":{"id":1704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"reason","nameLocation":"17351:6:8","nodeType":"VariableDeclaration","scope":1718,"src":"17338:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1702,"name":"bytes","nodeType":"ElementaryTypeName","src":"17338:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17337:21:8"},"src":"17331:353:8"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1680,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"17109:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17109:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1682,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"17123:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1683,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"17129:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1684,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1668,"src":"17138:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1677,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"17088:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1676,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"17072:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1859_$","typeString":"type(contract IERC721Receiver)"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1859","typeString":"contract IERC721Receiver"}},"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17092:16:8","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1858,"src":"17072:36:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:71:8","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1719,"nodeType":"TryStatement","src":"17068:616:8"}]}}]},"documentation":{"id":1660,"nodeType":"StructuredDocumentation","src":"16385:528:8","text":" @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call"},"id":1723,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"16927:22:8","nodeType":"FunctionDefinition","parameters":{"id":1669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1662,"mutability":"mutable","name":"from","nameLocation":"16958:4:8","nodeType":"VariableDeclaration","scope":1723,"src":"16950:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1661,"name":"address","nodeType":"ElementaryTypeName","src":"16950:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1664,"mutability":"mutable","name":"to","nameLocation":"16972:2:8","nodeType":"VariableDeclaration","scope":1723,"src":"16964:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1663,"name":"address","nodeType":"ElementaryTypeName","src":"16964:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1666,"mutability":"mutable","name":"tokenId","nameLocation":"16984:7:8","nodeType":"VariableDeclaration","scope":1723,"src":"16976:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1665,"name":"uint256","nodeType":"ElementaryTypeName","src":"16976:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1668,"mutability":"mutable","name":"data","nameLocation":"17006:4:8","nodeType":"VariableDeclaration","scope":1723,"src":"16993:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1667,"name":"bytes","nodeType":"ElementaryTypeName","src":"16993:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16949:62:8"},"returnParameters":{"id":1670,"nodeType":"ParameterList","parameters":[],"src":"17020:0:8"},"scope":1724,"src":"16918:782:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1725,"src":"776:16926:8","usedErrors":[626,631,640,645,650,657,662,667],"usedEvents":[1740,1749,1758]}],"src":"107:17596:8"},"id":8},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[2742],"IERC721":[1841]},"id":1842,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1726,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:9"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1728,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1842,"sourceUnit":2743,"src":"134:62:9","symbolAliases":[{"foreign":{"id":1727,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"142:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1730,"name":"IERC165","nameLocations":["287:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":2742,"src":"287:7:9"},"id":1731,"nodeType":"InheritanceSpecifier","src":"287:7:9"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1729,"nodeType":"StructuredDocumentation","src":"198:67:9","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1841,"linearizedBaseContracts":[1841,2742],"name":"IERC721","nameLocation":"276:7:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1732,"nodeType":"StructuredDocumentation","src":"301:88:9","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1740,"name":"Transfer","nameLocation":"400:8:9","nodeType":"EventDefinition","parameters":{"id":1739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1734,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"425:4:9","nodeType":"VariableDeclaration","scope":1740,"src":"409:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1733,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1736,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"447:2:9","nodeType":"VariableDeclaration","scope":1740,"src":"431:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1735,"name":"address","nodeType":"ElementaryTypeName","src":"431:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1738,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"467:7:9","nodeType":"VariableDeclaration","scope":1740,"src":"451:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1737,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"408:67:9"},"src":"394:82:9"},{"anonymous":false,"documentation":{"id":1741,"nodeType":"StructuredDocumentation","src":"482:94:9","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1749,"name":"Approval","nameLocation":"587:8:9","nodeType":"EventDefinition","parameters":{"id":1748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1743,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"612:5:9","nodeType":"VariableDeclaration","scope":1749,"src":"596:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1742,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1745,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"635:8:9","nodeType":"VariableDeclaration","scope":1749,"src":"619:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1744,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1747,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:9","nodeType":"VariableDeclaration","scope":1749,"src":"645:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"595:74:9"},"src":"581:89:9"},{"anonymous":false,"documentation":{"id":1750,"nodeType":"StructuredDocumentation","src":"676:117:9","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1758,"name":"ApprovalForAll","nameLocation":"804:14:9","nodeType":"EventDefinition","parameters":{"id":1757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1752,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"835:5:9","nodeType":"VariableDeclaration","scope":1758,"src":"819:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1751,"name":"address","nodeType":"ElementaryTypeName","src":"819:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1754,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"858:8:9","nodeType":"VariableDeclaration","scope":1758,"src":"842:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1753,"name":"address","nodeType":"ElementaryTypeName","src":"842:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1756,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"873:8:9","nodeType":"VariableDeclaration","scope":1758,"src":"868:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1755,"name":"bool","nodeType":"ElementaryTypeName","src":"868:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"818:64:9"},"src":"798:85:9"},{"documentation":{"id":1759,"nodeType":"StructuredDocumentation","src":"889:76:9","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1766,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"979:9:9","nodeType":"FunctionDefinition","parameters":{"id":1762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1761,"mutability":"mutable","name":"owner","nameLocation":"997:5:9","nodeType":"VariableDeclaration","scope":1766,"src":"989:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1760,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"988:15:9"},"returnParameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1764,"mutability":"mutable","name":"balance","nameLocation":"1035:7:9","nodeType":"VariableDeclaration","scope":1766,"src":"1027:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1763,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:17:9"},"scope":1841,"src":"970:74:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1767,"nodeType":"StructuredDocumentation","src":"1050:131:9","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1774,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1195:7:9","nodeType":"FunctionDefinition","parameters":{"id":1770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1769,"mutability":"mutable","name":"tokenId","nameLocation":"1211:7:9","nodeType":"VariableDeclaration","scope":1774,"src":"1203:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1768,"name":"uint256","nodeType":"ElementaryTypeName","src":"1203:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1202:17:9"},"returnParameters":{"id":1773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1772,"mutability":"mutable","name":"owner","nameLocation":"1251:5:9","nodeType":"VariableDeclaration","scope":1774,"src":"1243:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1771,"name":"address","nodeType":"ElementaryTypeName","src":"1243:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1242:15:9"},"scope":1841,"src":"1186:72:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1775,"nodeType":"StructuredDocumentation","src":"1264:565:9","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1786,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1843:16:9","nodeType":"FunctionDefinition","parameters":{"id":1784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1777,"mutability":"mutable","name":"from","nameLocation":"1868:4:9","nodeType":"VariableDeclaration","scope":1786,"src":"1860:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1776,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1779,"mutability":"mutable","name":"to","nameLocation":"1882:2:9","nodeType":"VariableDeclaration","scope":1786,"src":"1874:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1778,"name":"address","nodeType":"ElementaryTypeName","src":"1874:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1781,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:9","nodeType":"VariableDeclaration","scope":1786,"src":"1886:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1780,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1783,"mutability":"mutable","name":"data","nameLocation":"1918:4:9","nodeType":"VariableDeclaration","scope":1786,"src":"1903:19:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1782,"name":"bytes","nodeType":"ElementaryTypeName","src":"1903:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1859:64:9"},"returnParameters":{"id":1785,"nodeType":"ParameterList","parameters":[],"src":"1932:0:9"},"scope":1841,"src":"1834:99:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1787,"nodeType":"StructuredDocumentation","src":"1939:705:9","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1796,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2658:16:9","nodeType":"FunctionDefinition","parameters":{"id":1794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1789,"mutability":"mutable","name":"from","nameLocation":"2683:4:9","nodeType":"VariableDeclaration","scope":1796,"src":"2675:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1788,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1791,"mutability":"mutable","name":"to","nameLocation":"2697:2:9","nodeType":"VariableDeclaration","scope":1796,"src":"2689:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1790,"name":"address","nodeType":"ElementaryTypeName","src":"2689:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1793,"mutability":"mutable","name":"tokenId","nameLocation":"2709:7:9","nodeType":"VariableDeclaration","scope":1796,"src":"2701:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1792,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2674:43:9"},"returnParameters":{"id":1795,"nodeType":"ParameterList","parameters":[],"src":"2726:0:9"},"scope":1841,"src":"2649:78:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1797,"nodeType":"StructuredDocumentation","src":"2733:732:9","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1806,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3479:12:9","nodeType":"FunctionDefinition","parameters":{"id":1804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1799,"mutability":"mutable","name":"from","nameLocation":"3500:4:9","nodeType":"VariableDeclaration","scope":1806,"src":"3492:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1798,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1801,"mutability":"mutable","name":"to","nameLocation":"3514:2:9","nodeType":"VariableDeclaration","scope":1806,"src":"3506:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1800,"name":"address","nodeType":"ElementaryTypeName","src":"3506:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1803,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:9","nodeType":"VariableDeclaration","scope":1806,"src":"3518:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1802,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:43:9"},"returnParameters":{"id":1805,"nodeType":"ParameterList","parameters":[],"src":"3543:0:9"},"scope":1841,"src":"3470:74:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1807,"nodeType":"StructuredDocumentation","src":"3550:452:9","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1814,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4016:7:9","nodeType":"FunctionDefinition","parameters":{"id":1812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1809,"mutability":"mutable","name":"to","nameLocation":"4032:2:9","nodeType":"VariableDeclaration","scope":1814,"src":"4024:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1808,"name":"address","nodeType":"ElementaryTypeName","src":"4024:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1811,"mutability":"mutable","name":"tokenId","nameLocation":"4044:7:9","nodeType":"VariableDeclaration","scope":1814,"src":"4036:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1810,"name":"uint256","nodeType":"ElementaryTypeName","src":"4036:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4023:29:9"},"returnParameters":{"id":1813,"nodeType":"ParameterList","parameters":[],"src":"4061:0:9"},"scope":1841,"src":"4007:55:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1815,"nodeType":"StructuredDocumentation","src":"4068:315:9","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1822,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4397:17:9","nodeType":"FunctionDefinition","parameters":{"id":1820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"operator","nameLocation":"4423:8:9","nodeType":"VariableDeclaration","scope":1822,"src":"4415:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1816,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1819,"mutability":"mutable","name":"approved","nameLocation":"4438:8:9","nodeType":"VariableDeclaration","scope":1822,"src":"4433:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1818,"name":"bool","nodeType":"ElementaryTypeName","src":"4433:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4414:33:9"},"returnParameters":{"id":1821,"nodeType":"ParameterList","parameters":[],"src":"4456:0:9"},"scope":1841,"src":"4388:69:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1823,"nodeType":"StructuredDocumentation","src":"4463:139:9","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1830,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4616:11:9","nodeType":"FunctionDefinition","parameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1825,"mutability":"mutable","name":"tokenId","nameLocation":"4636:7:9","nodeType":"VariableDeclaration","scope":1830,"src":"4628:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1824,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4627:17:9"},"returnParameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"operator","nameLocation":"4676:8:9","nodeType":"VariableDeclaration","scope":1830,"src":"4668:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1827,"name":"address","nodeType":"ElementaryTypeName","src":"4668:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4667:18:9"},"scope":1841,"src":"4607:79:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1831,"nodeType":"StructuredDocumentation","src":"4692:138:9","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1840,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4844:16:9","nodeType":"FunctionDefinition","parameters":{"id":1836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"owner","nameLocation":"4869:5:9","nodeType":"VariableDeclaration","scope":1840,"src":"4861:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1832,"name":"address","nodeType":"ElementaryTypeName","src":"4861:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1835,"mutability":"mutable","name":"operator","nameLocation":"4884:8:9","nodeType":"VariableDeclaration","scope":1840,"src":"4876:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1834,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4860:33:9"},"returnParameters":{"id":1839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1838,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1840,"src":"4917:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1837,"name":"bool","nodeType":"ElementaryTypeName","src":"4917:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4916:6:9"},"scope":1841,"src":"4835:88:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1842,"src":"266:4659:9","usedErrors":[],"usedEvents":[1740,1749,1758]}],"src":"108:4818:9"},"id":9},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1859]},"id":1860,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1843,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1844,"nodeType":"StructuredDocumentation","src":"142:152:10","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1859,"linearizedBaseContracts":[1859],"name":"IERC721Receiver","nameLocation":"305:15:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1845,"nodeType":"StructuredDocumentation","src":"327:500:10","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1858,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"841:16:10","nodeType":"FunctionDefinition","parameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1847,"mutability":"mutable","name":"operator","nameLocation":"875:8:10","nodeType":"VariableDeclaration","scope":1858,"src":"867:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1846,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1849,"mutability":"mutable","name":"from","nameLocation":"901:4:10","nodeType":"VariableDeclaration","scope":1858,"src":"893:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1848,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1851,"mutability":"mutable","name":"tokenId","nameLocation":"923:7:10","nodeType":"VariableDeclaration","scope":1858,"src":"915:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1850,"name":"uint256","nodeType":"ElementaryTypeName","src":"915:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1853,"mutability":"mutable","name":"data","nameLocation":"955:4:10","nodeType":"VariableDeclaration","scope":1858,"src":"940:19:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1852,"name":"bytes","nodeType":"ElementaryTypeName","src":"940:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"857:108:10"},"returnParameters":{"id":1857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1858,"src":"984:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1855,"name":"bytes4","nodeType":"ElementaryTypeName","src":"984:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"983:8:10"},"scope":1859,"src":"832:160:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1860,"src":"295:699:10","usedErrors":[],"usedEvents":[]}],"src":"116:879:10"},"id":10},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol","exportedSymbols":{"ERC721":[1724],"ERC721Enumerable":[2243],"IERC165":[2742],"IERC721Enumerable":[2401]},"id":2244,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1861,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"128:24:11"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":1863,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2244,"sourceUnit":1725,"src":"154:37:11","symbolAliases":[{"foreign":{"id":1862,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"162:6:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol","file":"./IERC721Enumerable.sol","id":1865,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2244,"sourceUnit":2402,"src":"192:58:11","symbolAliases":[{"foreign":{"id":1864,"name":"IERC721Enumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"200:17:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../../utils/introspection/ERC165.sol","id":1867,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2244,"sourceUnit":2731,"src":"251:64:11","symbolAliases":[{"foreign":{"id":1866,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"259:7:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1869,"name":"ERC721","nameLocations":["746:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1724,"src":"746:6:11"},"id":1870,"nodeType":"InheritanceSpecifier","src":"746:6:11"},{"baseName":{"id":1871,"name":"IERC721Enumerable","nameLocations":["754:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":2401,"src":"754:17:11"},"id":1872,"nodeType":"InheritanceSpecifier","src":"754:17:11"}],"canonicalName":"ERC721Enumerable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1868,"nodeType":"StructuredDocumentation","src":"317:390:11","text":" @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\n of all the token ids in the contract as well as all token ids owned by each account.\n CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\n interfere with enumerability and should not be used together with `ERC721Enumerable`."},"fullyImplemented":true,"id":2243,"linearizedBaseContracts":[2243,2401,1724,668,2429,1841,2730,2742,2451],"name":"ERC721Enumerable","nameLocation":"726:16:11","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1878,"mutability":"mutable","name":"_ownedTokens","nameLocation":"846:12:11","nodeType":"VariableDeclaration","scope":2243,"src":"778:80:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"typeName":{"id":1877,"keyName":"owner","keyNameLocation":"794:5:11","keyType":{"id":1873,"name":"address","nodeType":"ElementaryTypeName","src":"786:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"778:59:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1876,"keyName":"index","keyNameLocation":"819:5:11","keyType":{"id":1874,"name":"uint256","nodeType":"ElementaryTypeName","src":"811:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"803:33:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1875,"name":"uint256","nodeType":"ElementaryTypeName","src":"828:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":1882,"mutability":"mutable","name":"_ownedTokensIndex","nameLocation":"908:17:11","nodeType":"VariableDeclaration","scope":2243,"src":"864:61:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1881,"keyName":"tokenId","keyNameLocation":"880:7:11","keyType":{"id":1879,"name":"uint256","nodeType":"ElementaryTypeName","src":"872:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"864:35:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1880,"name":"uint256","nodeType":"ElementaryTypeName","src":"891:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1885,"mutability":"mutable","name":"_allTokens","nameLocation":"950:10:11","nodeType":"VariableDeclaration","scope":2243,"src":"932:28:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[]"},"typeName":{"baseType":{"id":1883,"name":"uint256","nodeType":"ElementaryTypeName","src":"932:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1884,"nodeType":"ArrayTypeName","src":"932:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"private"},{"constant":false,"id":1889,"mutability":"mutable","name":"_allTokensIndex","nameLocation":"1010:15:11","nodeType":"VariableDeclaration","scope":2243,"src":"966:59:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1888,"keyName":"tokenId","keyNameLocation":"982:7:11","keyType":{"id":1886,"name":"uint256","nodeType":"ElementaryTypeName","src":"974:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"966:35:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"993:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"documentation":{"id":1890,"nodeType":"StructuredDocumentation","src":"1032:168:11","text":" @dev An `owner`'s token query was out of bounds for `index`.\n NOTE: The owner being `address(0)` indicates a global out of bounds index."},"errorSelector":"a57d13dc","id":1896,"name":"ERC721OutOfBoundsIndex","nameLocation":"1211:22:11","nodeType":"ErrorDefinition","parameters":{"id":1895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1892,"mutability":"mutable","name":"owner","nameLocation":"1242:5:11","nodeType":"VariableDeclaration","scope":1896,"src":"1234:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1891,"name":"address","nodeType":"ElementaryTypeName","src":"1234:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1894,"mutability":"mutable","name":"index","nameLocation":"1257:5:11","nodeType":"VariableDeclaration","scope":1896,"src":"1249:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1893,"name":"uint256","nodeType":"ElementaryTypeName","src":"1249:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1233:30:11"},"src":"1205:59:11"},{"documentation":{"id":1897,"nodeType":"StructuredDocumentation","src":"1270:50:11","text":" @dev Batch mint is not allowed."},"errorSelector":"59171fc1","id":1899,"name":"ERC721EnumerableForbiddenBatchMint","nameLocation":"1331:34:11","nodeType":"ErrorDefinition","parameters":{"id":1898,"nodeType":"ParameterList","parameters":[],"src":"1365:2:11"},"src":"1325:43:11"},{"baseFunctions":[816,2741],"body":{"id":1922,"nodeType":"Block","src":"1543:114:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1910,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"1560:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1912,"name":"IERC721Enumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"1580:17:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Enumerable_$2401_$","typeString":"type(contract IERC721Enumerable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Enumerable_$2401_$","typeString":"type(contract IERC721Enumerable)"}],"id":1911,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1575:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1575:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Enumerable_$2401","typeString":"type(contract IERC721Enumerable)"}},"id":1914,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1599:11:11","memberName":"interfaceId","nodeType":"MemberAccess","src":"1575:35:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1560:50:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1918,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"1638:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1916,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1614:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721Enumerable_$2243_$","typeString":"type(contract super ERC721Enumerable)"}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1620:17:11","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":816,"src":"1614:23:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1614:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1560:90:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1909,"id":1921,"nodeType":"Return","src":"1553:97:11"}]},"documentation":{"id":1900,"nodeType":"StructuredDocumentation","src":"1374:56:11","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1923,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1444:17:11","nodeType":"FunctionDefinition","overrides":{"id":1906,"nodeType":"OverrideSpecifier","overrides":[{"id":1904,"name":"IERC165","nameLocations":["1511:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":2742,"src":"1511:7:11"},{"id":1905,"name":"ERC721","nameLocations":["1520:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1724,"src":"1520:6:11"}],"src":"1502:25:11"},"parameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"interfaceId","nameLocation":"1469:11:11","nodeType":"VariableDeclaration","scope":1923,"src":"1462:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1901,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1462:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1461:20:11"},"returnParameters":{"id":1909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1923,"src":"1537:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1907,"name":"bool","nodeType":"ElementaryTypeName","src":"1537:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1536:6:11"},"scope":2243,"src":"1435:222:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2392],"body":{"id":1951,"nodeType":"Block","src":"1833:158:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1933,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"1847:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"arguments":[{"id":1935,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"1866:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1934,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"1856:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1856:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1847:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1944,"nodeType":"IfStatement","src":"1843:99:11","trueBody":{"id":1943,"nodeType":"Block","src":"1874:68:11","statements":[{"errorCall":{"arguments":[{"id":1939,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"1918:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1940,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"1925:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1938,"name":"ERC721OutOfBoundsIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"1895:22:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1895:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1942,"nodeType":"RevertStatement","src":"1888:43:11"}]}},{"expression":{"baseExpression":{"baseExpression":{"id":1945,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"1958:12:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":1947,"indexExpression":{"id":1946,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"1971:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1958:19:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1949,"indexExpression":{"id":1948,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"1978:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1958:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1932,"id":1950,"nodeType":"Return","src":"1951:33:11"}]},"documentation":{"id":1924,"nodeType":"StructuredDocumentation","src":"1663:68:11","text":" @dev See {IERC721Enumerable-tokenOfOwnerByIndex}."},"functionSelector":"2f745c59","id":1952,"implemented":true,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nameLocation":"1745:19:11","nodeType":"FunctionDefinition","parameters":{"id":1929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1926,"mutability":"mutable","name":"owner","nameLocation":"1773:5:11","nodeType":"VariableDeclaration","scope":1952,"src":"1765:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1925,"name":"address","nodeType":"ElementaryTypeName","src":"1765:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1928,"mutability":"mutable","name":"index","nameLocation":"1788:5:11","nodeType":"VariableDeclaration","scope":1952,"src":"1780:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1927,"name":"uint256","nodeType":"ElementaryTypeName","src":"1780:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1764:30:11"},"returnParameters":{"id":1932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1931,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1952,"src":"1824:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1930,"name":"uint256","nodeType":"ElementaryTypeName","src":"1824:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1823:9:11"},"scope":2243,"src":"1736:255:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2382],"body":{"id":1961,"nodeType":"Block","src":"2123:41:11","statements":[{"expression":{"expression":{"id":1958,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"2140:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2151:6:11","memberName":"length","nodeType":"MemberAccess","src":"2140:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1957,"id":1960,"nodeType":"Return","src":"2133:24:11"}]},"documentation":{"id":1953,"nodeType":"StructuredDocumentation","src":"1997:60:11","text":" @dev See {IERC721Enumerable-totalSupply}."},"functionSelector":"18160ddd","id":1962,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2071:11:11","nodeType":"FunctionDefinition","parameters":{"id":1954,"nodeType":"ParameterList","parameters":[],"src":"2082:2:11"},"returnParameters":{"id":1957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1956,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1962,"src":"2114:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1955,"name":"uint256","nodeType":"ElementaryTypeName","src":"2114:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2113:9:11"},"scope":2243,"src":"2062:102:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2400],"body":{"id":1988,"nodeType":"Block","src":"2311:151:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1970,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"2325:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1971,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"2334:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2334:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2325:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1983,"nodeType":"IfStatement","src":"2321:101:11","trueBody":{"id":1982,"nodeType":"Block","src":"2349:73:11","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2401:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2393:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1975,"name":"address","nodeType":"ElementaryTypeName","src":"2393:7:11","typeDescriptions":{}}},"id":1978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2393:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1979,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"2405:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1974,"name":"ERC721OutOfBoundsIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"2370:22:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2370:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1981,"nodeType":"RevertStatement","src":"2363:48:11"}]}},{"expression":{"baseExpression":{"id":1984,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"2438:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1986,"indexExpression":{"id":1985,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"2449:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2438:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1969,"id":1987,"nodeType":"Return","src":"2431:24:11"}]},"documentation":{"id":1963,"nodeType":"StructuredDocumentation","src":"2170:61:11","text":" @dev See {IERC721Enumerable-tokenByIndex}."},"functionSelector":"4f6ccce7","id":1989,"implemented":true,"kind":"function","modifiers":[],"name":"tokenByIndex","nameLocation":"2245:12:11","nodeType":"FunctionDefinition","parameters":{"id":1966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1965,"mutability":"mutable","name":"index","nameLocation":"2266:5:11","nodeType":"VariableDeclaration","scope":1989,"src":"2258:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1964,"name":"uint256","nodeType":"ElementaryTypeName","src":"2258:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2257:15:11"},"returnParameters":{"id":1969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1968,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1989,"src":"2302:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1967,"name":"uint256","nodeType":"ElementaryTypeName","src":"2302:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:9:11"},"scope":2243,"src":"2236:226:11","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1281],"body":{"id":2057,"nodeType":"Block","src":"2622:521:11","statements":[{"assignments":[2003],"declarations":[{"constant":false,"id":2003,"mutability":"mutable","name":"previousOwner","nameLocation":"2640:13:11","nodeType":"VariableDeclaration","scope":2057,"src":"2632:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2002,"name":"address","nodeType":"ElementaryTypeName","src":"2632:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2010,"initialValue":{"arguments":[{"id":2006,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"2670:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2007,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"2674:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2008,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"2683:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2004,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2656:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721Enumerable_$2243_$","typeString":"type(contract super ERC721Enumerable)"}},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2662:7:11","memberName":"_update","nodeType":"MemberAccess","referencedDeclaration":1281,"src":"2656:13:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2656:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2632:56:11"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2011,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"2703:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2728:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2720:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2012,"name":"address","nodeType":"ElementaryTypeName","src":"2720:7:11","typeDescriptions":{}}},"id":2015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2720:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2703:27:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2022,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"2807:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2023,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"2824:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2807:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2031,"nodeType":"IfStatement","src":"2803:106:11","trueBody":{"id":2030,"nodeType":"Block","src":"2828:81:11","statements":[{"expression":{"arguments":[{"id":2026,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"2875:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2027,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"2890:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2025,"name":"_removeTokenFromOwnerEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"2842:32:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:56:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2029,"nodeType":"ExpressionStatement","src":"2842:56:11"}]}},"id":2032,"nodeType":"IfStatement","src":"2699:210:11","trueBody":{"id":2021,"nodeType":"Block","src":"2732:65:11","statements":[{"expression":{"arguments":[{"id":2018,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"2778:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2017,"name":"_addTokenToAllTokensEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"2746:31:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2020,"nodeType":"ExpressionStatement","src":"2746:40:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2033,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"2922:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2936:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2035,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2928:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2034,"name":"address","nodeType":"ElementaryTypeName","src":"2928:7:11","typeDescriptions":{}}},"id":2037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2928:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2922:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2044,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"3020:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2045,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"3037:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2053,"nodeType":"IfStatement","src":"3016:90:11","trueBody":{"id":2052,"nodeType":"Block","src":"3041:65:11","statements":[{"expression":{"arguments":[{"id":2048,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"3083:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2049,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"3087:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2047,"name":"_addTokenToOwnerEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"3055:27:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3055:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2051,"nodeType":"ExpressionStatement","src":"3055:40:11"}]}},"id":2054,"nodeType":"IfStatement","src":"2918:188:11","trueBody":{"id":2043,"nodeType":"Block","src":"2940:70:11","statements":[{"expression":{"arguments":[{"id":2040,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"2991:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2039,"name":"_removeTokenFromAllTokensEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"2954:36:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2954:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2042,"nodeType":"ExpressionStatement","src":"2954:45:11"}]}},{"expression":{"id":2055,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"3123:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2001,"id":2056,"nodeType":"Return","src":"3116:20:11"}]},"documentation":{"id":1990,"nodeType":"StructuredDocumentation","src":"2468:45:11","text":" @dev See {ERC721-_update}."},"id":2058,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"2527:7:11","nodeType":"FunctionDefinition","overrides":{"id":1998,"nodeType":"OverrideSpecifier","overrides":[],"src":"2595:8:11"},"parameters":{"id":1997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1992,"mutability":"mutable","name":"to","nameLocation":"2543:2:11","nodeType":"VariableDeclaration","scope":2058,"src":"2535:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1991,"name":"address","nodeType":"ElementaryTypeName","src":"2535:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1994,"mutability":"mutable","name":"tokenId","nameLocation":"2555:7:11","nodeType":"VariableDeclaration","scope":2058,"src":"2547:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1993,"name":"uint256","nodeType":"ElementaryTypeName","src":"2547:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1996,"mutability":"mutable","name":"auth","nameLocation":"2572:4:11","nodeType":"VariableDeclaration","scope":2058,"src":"2564:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1995,"name":"address","nodeType":"ElementaryTypeName","src":"2564:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2534:43:11"},"returnParameters":{"id":2001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2058,"src":"2613:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1999,"name":"address","nodeType":"ElementaryTypeName","src":"2613:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2612:9:11"},"scope":2243,"src":"2518:625:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2088,"nodeType":"Block","src":"3511:140:11","statements":[{"assignments":[2067],"declarations":[{"constant":false,"id":2067,"mutability":"mutable","name":"length","nameLocation":"3529:6:11","nodeType":"VariableDeclaration","scope":2088,"src":"3521:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2066,"name":"uint256","nodeType":"ElementaryTypeName","src":"3521:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2073,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2069,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"3548:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2068,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"3538:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3538:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3554:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3538:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3521:34:11"},{"expression":{"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2074,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"3565:12:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2077,"indexExpression":{"id":2075,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"3578:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3565:16:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2078,"indexExpression":{"id":2076,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"3582:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3565:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2079,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"3592:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3565:34:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2081,"nodeType":"ExpressionStatement","src":"3565:34:11"},{"expression":{"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2082,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"3609:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2084,"indexExpression":{"id":2083,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"3627:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3609:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2085,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"3638:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3609:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2087,"nodeType":"ExpressionStatement","src":"3609:35:11"}]},"documentation":{"id":2059,"nodeType":"StructuredDocumentation","src":"3149:283:11","text":" @dev Private function to add a token to this extension's ownership-tracking data structures.\n @param to address representing the new owner of the given token ID\n @param tokenId uint256 ID of the token to be added to the tokens list of the given address"},"id":2089,"implemented":true,"kind":"function","modifiers":[],"name":"_addTokenToOwnerEnumeration","nameLocation":"3446:27:11","nodeType":"FunctionDefinition","parameters":{"id":2064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"mutability":"mutable","name":"to","nameLocation":"3482:2:11","nodeType":"VariableDeclaration","scope":2089,"src":"3474:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2060,"name":"address","nodeType":"ElementaryTypeName","src":"3474:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2063,"mutability":"mutable","name":"tokenId","nameLocation":"3494:7:11","nodeType":"VariableDeclaration","scope":2089,"src":"3486:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2062,"name":"uint256","nodeType":"ElementaryTypeName","src":"3486:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3473:29:11"},"returnParameters":{"id":2065,"nodeType":"ParameterList","parameters":[],"src":"3511:0:11"},"scope":2243,"src":"3437:214:11","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2108,"nodeType":"Block","src":"3912:95:11","statements":[{"expression":{"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2095,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"3922:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2097,"indexExpression":{"id":2096,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"3938:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3922:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2098,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"3949:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3960:6:11","memberName":"length","nodeType":"MemberAccess","src":"3949:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3922:44:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2101,"nodeType":"ExpressionStatement","src":"3922:44:11"},{"expression":{"arguments":[{"id":2105,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"3992:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2102,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"3976:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3987:4:11","memberName":"push","nodeType":"MemberAccess","src":"3976:15:11","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3976:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2107,"nodeType":"ExpressionStatement","src":"3976:24:11"}]},"documentation":{"id":2090,"nodeType":"StructuredDocumentation","src":"3657:184:11","text":" @dev Private function to add a token to this extension's token tracking data structures.\n @param tokenId uint256 ID of the token to be added to the tokens list"},"id":2109,"implemented":true,"kind":"function","modifiers":[],"name":"_addTokenToAllTokensEnumeration","nameLocation":"3855:31:11","nodeType":"FunctionDefinition","parameters":{"id":2093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2092,"mutability":"mutable","name":"tokenId","nameLocation":"3895:7:11","nodeType":"VariableDeclaration","scope":2109,"src":"3887:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2091,"name":"uint256","nodeType":"ElementaryTypeName","src":"3887:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3886:17:11"},"returnParameters":{"id":2094,"nodeType":"ParameterList","parameters":[],"src":"3912:0:11"},"scope":2243,"src":"3846:161:11","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2168,"nodeType":"Block","src":"4705:878:11","statements":[{"assignments":[2118],"declarations":[{"constant":false,"id":2118,"mutability":"mutable","name":"lastTokenIndex","nameLocation":"4894:14:11","nodeType":"VariableDeclaration","scope":2168,"src":"4886:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2117,"name":"uint256","nodeType":"ElementaryTypeName","src":"4886:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2122,"initialValue":{"arguments":[{"id":2120,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"4921:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2119,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"4911:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4911:15:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4886:40:11"},{"assignments":[2124],"declarations":[{"constant":false,"id":2124,"mutability":"mutable","name":"tokenIndex","nameLocation":"4944:10:11","nodeType":"VariableDeclaration","scope":2168,"src":"4936:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2123,"name":"uint256","nodeType":"ElementaryTypeName","src":"4936:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2128,"initialValue":{"baseExpression":{"id":2125,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"4957:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2127,"indexExpression":{"id":2126,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"4975:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4957:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4936:47:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2129,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"5087:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2130,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"5101:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:28:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2155,"nodeType":"IfStatement","src":"5083:323:11","trueBody":{"id":2154,"nodeType":"Block","src":"5117:289:11","statements":[{"assignments":[2133],"declarations":[{"constant":false,"id":2133,"mutability":"mutable","name":"lastTokenId","nameLocation":"5139:11:11","nodeType":"VariableDeclaration","scope":2154,"src":"5131:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2132,"name":"uint256","nodeType":"ElementaryTypeName","src":"5131:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2139,"initialValue":{"baseExpression":{"baseExpression":{"id":2134,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"5153:12:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2136,"indexExpression":{"id":2135,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"5166:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5153:18:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2138,"indexExpression":{"id":2137,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"5172:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5153:34:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5131:56:11"},{"expression":{"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2140,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"5202:12:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2143,"indexExpression":{"id":2141,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"5215:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5202:18:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2144,"indexExpression":{"id":2142,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"5221:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5202:30:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2145,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"5235:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5202:44:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2147,"nodeType":"ExpressionStatement","src":"5202:44:11"},{"expression":{"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2148,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"5318:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2150,"indexExpression":{"id":2149,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"5336:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5318:30:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2151,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"5351:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5318:43:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2153,"nodeType":"ExpressionStatement","src":"5318:43:11"}]}},{"expression":{"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5492:33:11","subExpression":{"baseExpression":{"id":2156,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"5499:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2158,"indexExpression":{"id":2157,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"5517:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5499:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2160,"nodeType":"ExpressionStatement","src":"5492:33:11"},{"expression":{"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5535:41:11","subExpression":{"baseExpression":{"baseExpression":{"id":2161,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"5542:12:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2163,"indexExpression":{"id":2162,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"5555:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5542:18:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2165,"indexExpression":{"id":2164,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"5561:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5542:34:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2167,"nodeType":"ExpressionStatement","src":"5535:41:11"}]},"documentation":{"id":2110,"nodeType":"StructuredDocumentation","src":"4013:606:11","text":" @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n This has O(1) time complexity, but alters the order of the _ownedTokens array.\n @param from address representing the previous owner of the given token ID\n @param tokenId uint256 ID of the token to be removed from the tokens list of the given address"},"id":2169,"implemented":true,"kind":"function","modifiers":[],"name":"_removeTokenFromOwnerEnumeration","nameLocation":"4633:32:11","nodeType":"FunctionDefinition","parameters":{"id":2115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2112,"mutability":"mutable","name":"from","nameLocation":"4674:4:11","nodeType":"VariableDeclaration","scope":2169,"src":"4666:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2111,"name":"address","nodeType":"ElementaryTypeName","src":"4666:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2114,"mutability":"mutable","name":"tokenId","nameLocation":"4688:7:11","nodeType":"VariableDeclaration","scope":2169,"src":"4680:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2113,"name":"uint256","nodeType":"ElementaryTypeName","src":"4680:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4665:31:11"},"returnParameters":{"id":2116,"nodeType":"ParameterList","parameters":[],"src":"4705:0:11"},"scope":2243,"src":"4624:959:11","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2216,"nodeType":"Block","src":"5942:990:11","statements":[{"assignments":[2176],"declarations":[{"constant":false,"id":2176,"mutability":"mutable","name":"lastTokenIndex","nameLocation":"6128:14:11","nodeType":"VariableDeclaration","scope":2216,"src":"6120:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2175,"name":"uint256","nodeType":"ElementaryTypeName","src":"6120:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2181,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2177,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"6145:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6156:6:11","memberName":"length","nodeType":"MemberAccess","src":"6145:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6165:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6145:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6120:46:11"},{"assignments":[2183],"declarations":[{"constant":false,"id":2183,"mutability":"mutable","name":"tokenIndex","nameLocation":"6184:10:11","nodeType":"VariableDeclaration","scope":2216,"src":"6176:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2182,"name":"uint256","nodeType":"ElementaryTypeName","src":"6176:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2187,"initialValue":{"baseExpression":{"id":2184,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"6197:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2186,"indexExpression":{"id":2185,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"6213:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6197:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6176:45:11"},{"assignments":[2189],"declarations":[{"constant":false,"id":2189,"mutability":"mutable","name":"lastTokenId","nameLocation":"6551:11:11","nodeType":"VariableDeclaration","scope":2216,"src":"6543:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2188,"name":"uint256","nodeType":"ElementaryTypeName","src":"6543:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2193,"initialValue":{"baseExpression":{"id":2190,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"6565:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2192,"indexExpression":{"id":2191,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"6576:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6565:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6543:48:11"},{"expression":{"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2194,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"6602:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2196,"indexExpression":{"id":2195,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"6613:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6602:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2197,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"6627:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6602:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2199,"nodeType":"ExpressionStatement","src":"6602:36:11"},{"expression":{"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2200,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"6706:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2202,"indexExpression":{"id":2201,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"6722:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6706:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2203,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"6737:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6706:41:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2205,"nodeType":"ExpressionStatement","src":"6706:41:11"},{"expression":{"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"6868:31:11","subExpression":{"baseExpression":{"id":2206,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"6875:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2208,"indexExpression":{"id":2207,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"6891:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6875:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2210,"nodeType":"ExpressionStatement","src":"6868:31:11"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2211,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"6909:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6920:3:11","memberName":"pop","nodeType":"MemberAccess","src":"6909:14:11","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer)"}},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6909:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2215,"nodeType":"ExpressionStatement","src":"6909:16:11"}]},"documentation":{"id":2170,"nodeType":"StructuredDocumentation","src":"5589:277:11","text":" @dev Private function to remove a token from this extension's token tracking data structures.\n This has O(1) time complexity, but alters the order of the _allTokens array.\n @param tokenId uint256 ID of the token to be removed from the tokens list"},"id":2217,"implemented":true,"kind":"function","modifiers":[],"name":"_removeTokenFromAllTokensEnumeration","nameLocation":"5880:36:11","nodeType":"FunctionDefinition","parameters":{"id":2173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2172,"mutability":"mutable","name":"tokenId","nameLocation":"5925:7:11","nodeType":"VariableDeclaration","scope":2217,"src":"5917:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2171,"name":"uint256","nodeType":"ElementaryTypeName","src":"5917:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5916:17:11"},"returnParameters":{"id":2174,"nodeType":"ParameterList","parameters":[],"src":"5942:0:11"},"scope":2243,"src":"5871:1061:11","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"baseFunctions":[1191],"body":{"id":2241,"nodeType":"Block","src":"7134:149:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2226,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7148:6:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7157:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7148:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2233,"nodeType":"IfStatement","src":"7144:84:11","trueBody":{"id":2232,"nodeType":"Block","src":"7160:68:11","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2229,"name":"ERC721EnumerableForbiddenBatchMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"7181:34:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7181:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2231,"nodeType":"RevertStatement","src":"7174:43:11"}]}},{"expression":{"arguments":[{"id":2237,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"7260:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2238,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7269:6:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":2234,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"7237:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721Enumerable_$2243_$","typeString":"type(contract super ERC721Enumerable)"}},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7243:16:11","memberName":"_increaseBalance","nodeType":"MemberAccess","referencedDeclaration":1191,"src":"7237:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint128_$returns$__$","typeString":"function (address,uint128)"}},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7237:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2240,"nodeType":"ExpressionStatement","src":"7237:39:11"}]},"documentation":{"id":2218,"nodeType":"StructuredDocumentation","src":"6938:106:11","text":" See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch"},"id":2242,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"7058:16:11","nodeType":"FunctionDefinition","overrides":{"id":2224,"nodeType":"OverrideSpecifier","overrides":[],"src":"7125:8:11"},"parameters":{"id":2223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2220,"mutability":"mutable","name":"account","nameLocation":"7083:7:11","nodeType":"VariableDeclaration","scope":2242,"src":"7075:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2219,"name":"address","nodeType":"ElementaryTypeName","src":"7075:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2222,"mutability":"mutable","name":"amount","nameLocation":"7100:6:11","nodeType":"VariableDeclaration","scope":2242,"src":"7092:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2221,"name":"uint128","nodeType":"ElementaryTypeName","src":"7092:7:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"7074:33:11"},"returnParameters":{"id":2225,"nodeType":"ParameterList","parameters":[],"src":"7134:0:11"},"scope":2243,"src":"7049:234:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2244,"src":"708:6577:11","usedErrors":[626,631,640,645,650,657,662,667,1896,1899],"usedEvents":[1740,1749,1758]}],"src":"128:7158:11"},"id":11},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","exportedSymbols":{"ERC721":[1724],"ERC721URIStorage":[2369],"IERC165":[2742],"IERC4906":[574],"Strings":[2706]},"id":2370,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2245,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"128:24:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":2247,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2370,"sourceUnit":1725,"src":"154:37:12","symbolAliases":[{"foreign":{"id":2246,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"162:6:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../../utils/Strings.sol","id":2249,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2370,"sourceUnit":2707,"src":"192:51:12","symbolAliases":[{"foreign":{"id":2248,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"200:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4906.sol","file":"../../../interfaces/IERC4906.sol","id":2251,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2370,"sourceUnit":575,"src":"244:58:12","symbolAliases":[{"foreign":{"id":2250,"name":"IERC4906","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"252:8:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"../../../interfaces/IERC165.sol","id":2253,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2370,"sourceUnit":551,"src":"303:56:12","symbolAliases":[{"foreign":{"id":2252,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"311:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2255,"name":"IERC4906","nameLocations":["469:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":574,"src":"469:8:12"},"id":2256,"nodeType":"InheritanceSpecifier","src":"469:8:12"},{"baseName":{"id":2257,"name":"ERC721","nameLocations":["479:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1724,"src":"479:6:12"},"id":2258,"nodeType":"InheritanceSpecifier","src":"479:6:12"}],"canonicalName":"ERC721URIStorage","contractDependencies":[],"contractKind":"contract","documentation":{"id":2254,"nodeType":"StructuredDocumentation","src":"361:69:12","text":" @dev ERC721 token with storage based token URI management."},"fullyImplemented":true,"id":2369,"linearizedBaseContracts":[2369,1724,668,2429,574,1841,2730,2742,2451],"name":"ERC721URIStorage","nameLocation":"449:16:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2261,"libraryName":{"id":2259,"name":"Strings","nameLocations":["498:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":2706,"src":"498:7:12"},"nodeType":"UsingForDirective","src":"492:26:12","typeName":{"id":2260,"name":"uint256","nodeType":"ElementaryTypeName","src":"510:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":true,"id":2267,"mutability":"constant","name":"ERC4906_INTERFACE_ID","nameLocation":"730:20:12","nodeType":"VariableDeclaration","scope":2369,"src":"706:65:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2262,"name":"bytes4","nodeType":"ElementaryTypeName","src":"706:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"arguments":[{"hexValue":"30783439303634393036","id":2265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"760:10:12","typeDescriptions":{"typeIdentifier":"t_rational_1225148678_by_1","typeString":"int_const 1225148678"},"value":"0x49064906"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1225148678_by_1","typeString":"int_const 1225148678"}],"id":2264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"753:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":2263,"name":"bytes4","nodeType":"ElementaryTypeName","src":"753:6:12","typeDescriptions":{}}},"id":2266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"753:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"private"},{"constant":false,"id":2271,"mutability":"mutable","name":"_tokenURIs","nameLocation":"860:10:12","nodeType":"VariableDeclaration","scope":2369,"src":"817:53:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":2270,"keyName":"tokenId","keyNameLocation":"833:7:12","keyType":{"id":2268,"name":"uint256","nodeType":"ElementaryTypeName","src":"825:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"817:34:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2269,"name":"string","nodeType":"ElementaryTypeName","src":"844:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"private"},{"baseFunctions":[816,2741],"body":{"id":2291,"nodeType":"Block","src":"1045:99:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2282,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"1062:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2283,"name":"ERC4906_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"1077:20:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1062:35:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2287,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"1125:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2285,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1101:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$2369_$","typeString":"type(contract super ERC721URIStorage)"}},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1107:17:12","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":816,"src":"1101:23:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1101:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1062:75:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2281,"id":2290,"nodeType":"Return","src":"1055:82:12"}]},"documentation":{"id":2272,"nodeType":"StructuredDocumentation","src":"877:55:12","text":" @dev See {IERC165-supportsInterface}"},"functionSelector":"01ffc9a7","id":2292,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"946:17:12","nodeType":"FunctionDefinition","overrides":{"id":2278,"nodeType":"OverrideSpecifier","overrides":[{"id":2276,"name":"ERC721","nameLocations":["1013:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1724,"src":"1013:6:12"},{"id":2277,"name":"IERC165","nameLocations":["1021:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":2742,"src":"1021:7:12"}],"src":"1004:25:12"},"parameters":{"id":2275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2274,"mutability":"mutable","name":"interfaceId","nameLocation":"971:11:12","nodeType":"VariableDeclaration","scope":2292,"src":"964:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2273,"name":"bytes4","nodeType":"ElementaryTypeName","src":"964:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"963:20:12"},"returnParameters":{"id":2281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2292,"src":"1039:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2279,"name":"bool","nodeType":"ElementaryTypeName","src":"1039:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1038:6:12"},"scope":2369,"src":"937:207:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[911],"body":{"id":2348,"nodeType":"Block","src":"1298:505:12","statements":[{"expression":{"arguments":[{"id":2302,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2295,"src":"1322:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2301,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"1308:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1308:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2304,"nodeType":"ExpressionStatement","src":"1308:22:12"},{"assignments":[2306],"declarations":[{"constant":false,"id":2306,"mutability":"mutable","name":"_tokenURI","nameLocation":"1355:9:12","nodeType":"VariableDeclaration","scope":2348,"src":"1341:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2305,"name":"string","nodeType":"ElementaryTypeName","src":"1341:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2310,"initialValue":{"baseExpression":{"id":2307,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"1367:10:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2309,"indexExpression":{"id":2308,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2295,"src":"1378:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1367:19:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1341:45:12"},{"assignments":[2312],"declarations":[{"constant":false,"id":2312,"mutability":"mutable","name":"base","nameLocation":"1410:4:12","nodeType":"VariableDeclaration","scope":2348,"src":"1396:18:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2311,"name":"string","nodeType":"ElementaryTypeName","src":"1396:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2315,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2313,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"1417:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1417:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1396:31:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2318,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2312,"src":"1506:4:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1500:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2316,"name":"bytes","nodeType":"ElementaryTypeName","src":"1500:5:12","typeDescriptions":{}}},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1500:11:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1512:6:12","memberName":"length","nodeType":"MemberAccess","src":"1500:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1522:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1500:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2326,"nodeType":"IfStatement","src":"1496:70:12","trueBody":{"id":2325,"nodeType":"Block","src":"1525:41:12","statements":[{"expression":{"id":2323,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"1546:9:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2300,"id":2324,"nodeType":"Return","src":"1539:16:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2329,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"1671:9:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1665:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2327,"name":"bytes","nodeType":"ElementaryTypeName","src":"1665:5:12","typeDescriptions":{}}},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1665:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1682:6:12","memberName":"length","nodeType":"MemberAccess","src":"1665:23:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1691:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1665:27:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2342,"nodeType":"IfStatement","src":"1661:95:12","trueBody":{"id":2341,"nodeType":"Block","src":"1694:62:12","statements":[{"expression":{"arguments":[{"id":2337,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2312,"src":"1729:4:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2338,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"1735:9:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2335,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1715:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2334,"name":"string","nodeType":"ElementaryTypeName","src":"1715:6:12","typeDescriptions":{}}},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1722:6:12","memberName":"concat","nodeType":"MemberAccess","src":"1715:13:12","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1715:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2300,"id":2340,"nodeType":"Return","src":"1708:37:12"}]}},{"expression":{"arguments":[{"id":2345,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2295,"src":"1788:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2343,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1773:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$2369_$","typeString":"type(contract super ERC721URIStorage)"}},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1779:8:12","memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":911,"src":"1773:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1773:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2300,"id":2347,"nodeType":"Return","src":"1766:30:12"}]},"documentation":{"id":2293,"nodeType":"StructuredDocumentation","src":"1150:55:12","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":2349,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1219:8:12","nodeType":"FunctionDefinition","overrides":{"id":2297,"nodeType":"OverrideSpecifier","overrides":[],"src":"1265:8:12"},"parameters":{"id":2296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2295,"mutability":"mutable","name":"tokenId","nameLocation":"1236:7:12","nodeType":"VariableDeclaration","scope":2349,"src":"1228:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2294,"name":"uint256","nodeType":"ElementaryTypeName","src":"1228:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1227:17:12"},"returnParameters":{"id":2300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2349,"src":"1283:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2298,"name":"string","nodeType":"ElementaryTypeName","src":"1283:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1282:15:12"},"scope":2369,"src":"1210:593:12","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2367,"nodeType":"Block","src":"2003:86:12","statements":[{"expression":{"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2357,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"2013:10:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2359,"indexExpression":{"id":2358,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"2024:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2013:19:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2360,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"2035:9:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2013:31:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2362,"nodeType":"ExpressionStatement","src":"2013:31:12"},{"eventCall":{"arguments":[{"id":2364,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"2074:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2363,"name":"MetadataUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"2059:14:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2059:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2366,"nodeType":"EmitStatement","src":"2054:28:12"}]},"documentation":{"id":2350,"nodeType":"StructuredDocumentation","src":"1809:108:12","text":" @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n Emits {MetadataUpdate}."},"id":2368,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenURI","nameLocation":"1931:12:12","nodeType":"FunctionDefinition","parameters":{"id":2355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2352,"mutability":"mutable","name":"tokenId","nameLocation":"1952:7:12","nodeType":"VariableDeclaration","scope":2368,"src":"1944:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2351,"name":"uint256","nodeType":"ElementaryTypeName","src":"1944:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2354,"mutability":"mutable","name":"_tokenURI","nameLocation":"1975:9:12","nodeType":"VariableDeclaration","scope":2368,"src":"1961:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2353,"name":"string","nodeType":"ElementaryTypeName","src":"1961:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1943:42:12"},"returnParameters":{"id":2356,"nodeType":"ParameterList","parameters":[],"src":"2003:0:12"},"scope":2369,"src":"1922:167:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2370,"src":"431:1660:12","usedErrors":[626,631,640,645,650,657,662,667],"usedEvents":[566,573,1740,1749,1758]}],"src":"128:1964:12"},"id":12},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol","exportedSymbols":{"IERC721":[1841],"IERC721Enumerable":[2401]},"id":2402,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2371,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"129:24:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":2373,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2402,"sourceUnit":1842,"src":"155:39:13","symbolAliases":[{"foreign":{"id":2372,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"163:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2375,"name":"IERC721","nameLocations":["364:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"364:7:13"},"id":2376,"nodeType":"InheritanceSpecifier","src":"364:7:13"}],"canonicalName":"IERC721Enumerable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2374,"nodeType":"StructuredDocumentation","src":"196:136:13","text":" @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":2401,"linearizedBaseContracts":[2401,1841,2742],"name":"IERC721Enumerable","nameLocation":"343:17:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2377,"nodeType":"StructuredDocumentation","src":"378:82:13","text":" @dev Returns the total amount of tokens stored by the contract."},"functionSelector":"18160ddd","id":2382,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"474:11:13","nodeType":"FunctionDefinition","parameters":{"id":2378,"nodeType":"ParameterList","parameters":[],"src":"485:2:13"},"returnParameters":{"id":2381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2382,"src":"511:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2379,"name":"uint256","nodeType":"ElementaryTypeName","src":"511:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"510:9:13"},"scope":2401,"src":"465:55:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2383,"nodeType":"StructuredDocumentation","src":"526:171:13","text":" @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"functionSelector":"2f745c59","id":2392,"implemented":false,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nameLocation":"711:19:13","nodeType":"FunctionDefinition","parameters":{"id":2388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2385,"mutability":"mutable","name":"owner","nameLocation":"739:5:13","nodeType":"VariableDeclaration","scope":2392,"src":"731:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2384,"name":"address","nodeType":"ElementaryTypeName","src":"731:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2387,"mutability":"mutable","name":"index","nameLocation":"754:5:13","nodeType":"VariableDeclaration","scope":2392,"src":"746:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2386,"name":"uint256","nodeType":"ElementaryTypeName","src":"746:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"730:30:13"},"returnParameters":{"id":2391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2390,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2392,"src":"784:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2389,"name":"uint256","nodeType":"ElementaryTypeName","src":"784:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"783:9:13"},"scope":2401,"src":"702:91:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2393,"nodeType":"StructuredDocumentation","src":"799:164:13","text":" @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."},"functionSelector":"4f6ccce7","id":2400,"implemented":false,"kind":"function","modifiers":[],"name":"tokenByIndex","nameLocation":"977:12:13","nodeType":"FunctionDefinition","parameters":{"id":2396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2395,"mutability":"mutable","name":"index","nameLocation":"998:5:13","nodeType":"VariableDeclaration","scope":2400,"src":"990:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2394,"name":"uint256","nodeType":"ElementaryTypeName","src":"990:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"989:15:13"},"returnParameters":{"id":2399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2398,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2400,"src":"1028:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2397,"name":"uint256","nodeType":"ElementaryTypeName","src":"1028:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1027:9:13"},"scope":2401,"src":"968:69:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2402,"src":"333:706:13","usedErrors":[],"usedEvents":[1740,1749,1758]}],"src":"129:911:13"},"id":13},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC721":[1841],"IERC721Metadata":[2429]},"id":2430,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2403,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"127:24:14"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":2405,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2430,"sourceUnit":1842,"src":"153:39:14","symbolAliases":[{"foreign":{"id":2404,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"161:7:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2407,"name":"IERC721","nameLocations":["357:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"357:7:14"},"id":2408,"nodeType":"InheritanceSpecifier","src":"357:7:14"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":2406,"nodeType":"StructuredDocumentation","src":"194:133:14","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":2429,"linearizedBaseContracts":[2429,1841,2742],"name":"IERC721Metadata","nameLocation":"338:15:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2409,"nodeType":"StructuredDocumentation","src":"371:58:14","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":2414,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"443:4:14","nodeType":"FunctionDefinition","parameters":{"id":2410,"nodeType":"ParameterList","parameters":[],"src":"447:2:14"},"returnParameters":{"id":2413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2414,"src":"473:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2411,"name":"string","nodeType":"ElementaryTypeName","src":"473:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"472:15:14"},"scope":2429,"src":"434:54:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2415,"nodeType":"StructuredDocumentation","src":"494:60:14","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":2420,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"568:6:14","nodeType":"FunctionDefinition","parameters":{"id":2416,"nodeType":"ParameterList","parameters":[],"src":"574:2:14"},"returnParameters":{"id":2419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2418,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2420,"src":"600:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2417,"name":"string","nodeType":"ElementaryTypeName","src":"600:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"599:15:14"},"scope":2429,"src":"559:56:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2421,"nodeType":"StructuredDocumentation","src":"621:90:14","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":2428,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"725:8:14","nodeType":"FunctionDefinition","parameters":{"id":2424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2423,"mutability":"mutable","name":"tokenId","nameLocation":"742:7:14","nodeType":"VariableDeclaration","scope":2428,"src":"734:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2422,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"733:17:14"},"returnParameters":{"id":2427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2428,"src":"774:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2425,"name":"string","nodeType":"ElementaryTypeName","src":"774:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"773:15:14"},"scope":2429,"src":"716:73:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2430,"src":"328:463:14","usedErrors":[],"usedEvents":[1740,1749,1758]}],"src":"127:665:14"},"id":14},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2451]},"id":2452,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2431,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:15"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2432,"nodeType":"StructuredDocumentation","src":"127:496:15","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2451,"linearizedBaseContracts":[2451],"name":"Context","nameLocation":"642:7:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":2440,"nodeType":"Block","src":"718:34:15","statements":[{"expression":{"expression":{"id":2437,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:15","memberName":"sender","nodeType":"MemberAccess","src":"735:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2436,"id":2439,"nodeType":"Return","src":"728:17:15"}]},"id":2441,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:15","nodeType":"FunctionDefinition","parameters":{"id":2433,"nodeType":"ParameterList","parameters":[],"src":"675:2:15"},"returnParameters":{"id":2436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2441,"src":"709:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2434,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:15"},"scope":2451,"src":"656:96:15","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2449,"nodeType":"Block","src":"825:32:15","statements":[{"expression":{"expression":{"id":2446,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:15","memberName":"data","nodeType":"MemberAccess","src":"842:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2445,"id":2448,"nodeType":"Return","src":"835:15:15"}]},"id":2450,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:15","nodeType":"FunctionDefinition","parameters":{"id":2442,"nodeType":"ParameterList","parameters":[],"src":"775:2:15"},"returnParameters":{"id":2445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2450,"src":"809:14:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2443,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:15"},"scope":2451,"src":"758:99:15","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2452,"src":"624:235:15","usedErrors":[],"usedEvents":[]}],"src":"101:759:15"},"id":15},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3796],"SignedMath":[3901],"Strings":[2706]},"id":2707,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2453,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:16"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2455,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2707,"sourceUnit":3797,"src":"127:37:16","symbolAliases":[{"foreign":{"id":2454,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"135:4:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":2457,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2707,"sourceUnit":3902,"src":"165:49:16","symbolAliases":[{"foreign":{"id":2456,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"173:10:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":2458,"nodeType":"StructuredDocumentation","src":"216:34:16","text":" @dev String operations."},"fullyImplemented":true,"id":2706,"linearizedBaseContracts":[2706],"name":"Strings","nameLocation":"259:7:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2461,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:16","nodeType":"VariableDeclaration","scope":2706,"src":"273:56:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2459,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:16","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2464,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:16","nodeType":"VariableDeclaration","scope":2706,"src":"335:42:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2462,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:16","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":2465,"nodeType":"StructuredDocumentation","src":"384:81:16","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":2471,"name":"StringsInsufficientHexLength","nameLocation":"476:28:16","nodeType":"ErrorDefinition","parameters":{"id":2470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2467,"mutability":"mutable","name":"value","nameLocation":"513:5:16","nodeType":"VariableDeclaration","scope":2471,"src":"505:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2466,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2469,"mutability":"mutable","name":"length","nameLocation":"528:6:16","nodeType":"VariableDeclaration","scope":2471,"src":"520:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2468,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:16"},"src":"470:66:16"},{"body":{"id":2518,"nodeType":"Block","src":"708:627:16","statements":[{"id":2517,"nodeType":"UncheckedBlock","src":"718:611:16","statements":[{"assignments":[2480],"declarations":[{"constant":false,"id":2480,"mutability":"mutable","name":"length","nameLocation":"750:6:16","nodeType":"VariableDeclaration","scope":2517,"src":"742:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2479,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2487,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2483,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"770:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2481,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"759:4:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3796_$","typeString":"type(library Math)"}},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:16","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3616,"src":"759:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:16"},{"assignments":[2489],"declarations":[{"constant":false,"id":2489,"mutability":"mutable","name":"buffer","nameLocation":"808:6:16","nodeType":"VariableDeclaration","scope":2517,"src":"794:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2488,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2494,"initialValue":{"arguments":[{"id":2492,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"828:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2490,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:16"},{"assignments":[2496],"declarations":[{"constant":false,"id":2496,"mutability":"mutable","name":"ptr","nameLocation":"857:3:16","nodeType":"VariableDeclaration","scope":2517,"src":"849:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2495,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2497,"nodeType":"VariableDeclarationStatement","src":"849:11:16"},{"AST":{"nodeType":"YulBlock","src":"930:67:16","statements":[{"nodeType":"YulAssignment","src":"948:35:16","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"959:6:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"971:2:16","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"975:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:16"},"nodeType":"YulFunctionCall","src":"967:15:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:16"},"nodeType":"YulFunctionCall","src":"955:28:16"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"948:3:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2489,"isOffset":false,"isSlot":false,"src":"959:6:16","valueSize":1},{"declaration":2480,"isOffset":false,"isSlot":false,"src":"975:6:16","valueSize":1},{"declaration":2496,"isOffset":false,"isSlot":false,"src":"948:3:16","valueSize":1}],"id":2498,"nodeType":"InlineAssembly","src":"921:76:16"},{"body":{"id":2513,"nodeType":"Block","src":"1023:269:16","statements":[{"expression":{"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:16","subExpression":{"id":2500,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2496,"src":"1041:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2502,"nodeType":"ExpressionStatement","src":"1041:5:16"},{"AST":{"nodeType":"YulBlock","src":"1124:86:16","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1154:3:16"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"1175:2:16","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1164:3:16"},"nodeType":"YulFunctionCall","src":"1164:14:16"},{"name":"HEX_DIGITS","nodeType":"YulIdentifier","src":"1180:10:16"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1159:4:16"},"nodeType":"YulFunctionCall","src":"1159:32:16"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1146:7:16"},"nodeType":"YulFunctionCall","src":"1146:46:16"},"nodeType":"YulExpressionStatement","src":"1146:46:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2461,"isOffset":false,"isSlot":false,"src":"1180:10:16","valueSize":1},{"declaration":2496,"isOffset":false,"isSlot":false,"src":"1154:3:16","valueSize":1},{"declaration":2474,"isOffset":false,"isSlot":false,"src":"1168:5:16","valueSize":1}],"id":2503,"nodeType":"InlineAssembly","src":"1115:95:16"},{"expression":{"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2504,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"1227:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2507,"nodeType":"ExpressionStatement","src":"1227:11:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"1260:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2512,"nodeType":"IfStatement","src":"1256:21:16","trueBody":{"id":2511,"nodeType":"Break","src":"1272:5:16"}}]},"condition":{"hexValue":"74727565","id":2499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2514,"nodeType":"WhileStatement","src":"1010:282:16"},{"expression":{"id":2515,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"1312:6:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2478,"id":2516,"nodeType":"Return","src":"1305:13:16"}]}]},"documentation":{"id":2472,"nodeType":"StructuredDocumentation","src":"542:90:16","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2519,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:16","nodeType":"FunctionDefinition","parameters":{"id":2475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2474,"mutability":"mutable","name":"value","nameLocation":"663:5:16","nodeType":"VariableDeclaration","scope":2519,"src":"655:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2473,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:16"},"returnParameters":{"id":2478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2477,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2519,"src":"693:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2476,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:16"},"scope":2706,"src":"637:698:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2544,"nodeType":"Block","src":"1511:92:16","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2530,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"1542:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:16","trueExpression":{"hexValue":"2d","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":2539,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"1588:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2537,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"1573:10:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$3901_$","typeString":"type(library SignedMath)"}},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:16","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":3900,"src":"1573:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2536,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"1564:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2527,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:16","typeDescriptions":{}}},"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:16","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:16","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2526,"id":2543,"nodeType":"Return","src":"1521:75:16"}]},"documentation":{"id":2520,"nodeType":"StructuredDocumentation","src":"1341:89:16","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":2545,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:16","nodeType":"FunctionDefinition","parameters":{"id":2523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2522,"mutability":"mutable","name":"value","nameLocation":"1466:5:16","nodeType":"VariableDeclaration","scope":2545,"src":"1459:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2521,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:16"},"returnParameters":{"id":2526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2545,"src":"1496:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2524,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:16"},"scope":2706,"src":"1435:168:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2564,"nodeType":"Block","src":"1782:100:16","statements":[{"id":2563,"nodeType":"UncheckedBlock","src":"1792:84:16","statements":[{"expression":{"arguments":[{"id":2554,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2548,"src":"1835:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2557,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2548,"src":"1854:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2555,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"1842:4:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3796_$","typeString":"type(library Math)"}},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:16","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3738,"src":"1842:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2553,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2565,2648,2668],"referencedDeclaration":2648,"src":"1823:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2552,"id":2562,"nodeType":"Return","src":"1816:49:16"}]}]},"documentation":{"id":2546,"nodeType":"StructuredDocumentation","src":"1609:94:16","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2565,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:16","nodeType":"FunctionDefinition","parameters":{"id":2549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2548,"mutability":"mutable","name":"value","nameLocation":"1737:5:16","nodeType":"VariableDeclaration","scope":2565,"src":"1729:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2547,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:16"},"returnParameters":{"id":2552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2551,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2565,"src":"1767:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2550,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:16"},"scope":2706,"src":"1708:174:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2647,"nodeType":"Block","src":"2095:435:16","statements":[{"assignments":[2576],"declarations":[{"constant":false,"id":2576,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:16","nodeType":"VariableDeclaration","scope":2647,"src":"2105:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2575,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2578,"initialValue":{"id":2577,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"2126:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:16"},{"assignments":[2580],"declarations":[{"constant":false,"id":2580,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:16","nodeType":"VariableDeclaration","scope":2647,"src":"2141:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2579,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2589,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2584,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"2177:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2581,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:16"},{"expression":{"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2590,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"2198:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2592,"indexExpression":{"hexValue":"30","id":2591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2595,"nodeType":"ExpressionStatement","src":"2198:15:16"},{"expression":{"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2596,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"2223:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2598,"indexExpression":{"hexValue":"31","id":2597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2601,"nodeType":"ExpressionStatement","src":"2223:15:16"},{"body":{"id":2630,"nodeType":"Block","src":"2293:95:16","statements":[{"expression":{"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2616,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"2307:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2618,"indexExpression":{"id":2617,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"2314:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2619,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"2319:10:16","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2623,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2620,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"2330:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:16","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2625,"nodeType":"ExpressionStatement","src":"2307:40:16"},{"expression":{"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2626,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"2361:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2629,"nodeType":"ExpressionStatement","src":"2361:16:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2610,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"2281:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2631,"initializationExpression":{"assignments":[2603],"declarations":[{"constant":false,"id":2603,"mutability":"mutable","name":"i","nameLocation":"2261:1:16","nodeType":"VariableDeclaration","scope":2631,"src":"2253:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2602,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2609,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2605,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"2269:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:16"},"loopExpression":{"expression":{"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:16","subExpression":{"id":2613,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"2290:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2615,"nodeType":"ExpressionStatement","src":"2288:3:16"},"nodeType":"ForStatement","src":"2248:140:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2632,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"2401:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2641,"nodeType":"IfStatement","src":"2397:96:16","trueBody":{"id":2640,"nodeType":"Block","src":"2418:75:16","statements":[{"errorCall":{"arguments":[{"id":2636,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"2468:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2637,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"2475:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2635,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2471,"src":"2439:28:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2639,"nodeType":"RevertStatement","src":"2432:50:16"}]}},{"expression":{"arguments":[{"id":2644,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"2516:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2642,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:16","typeDescriptions":{}}},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2574,"id":2646,"nodeType":"Return","src":"2502:21:16"}]},"documentation":{"id":2566,"nodeType":"StructuredDocumentation","src":"1888:112:16","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2648,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:16","nodeType":"FunctionDefinition","parameters":{"id":2571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2568,"mutability":"mutable","name":"value","nameLocation":"2034:5:16","nodeType":"VariableDeclaration","scope":2648,"src":"2026:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2567,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2570,"mutability":"mutable","name":"length","nameLocation":"2049:6:16","nodeType":"VariableDeclaration","scope":2648,"src":"2041:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2569,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:16"},"returnParameters":{"id":2574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2573,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2648,"src":"2080:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2572,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:16"},"scope":2706,"src":"2005:525:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2667,"nodeType":"Block","src":"2762:75:16","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2661,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"2807:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2660,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2659,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:16","typeDescriptions":{}}},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2657,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:16","typeDescriptions":{}}},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2664,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"2815:14:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2656,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2565,2648,2668],"referencedDeclaration":2648,"src":"2779:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2655,"id":2666,"nodeType":"Return","src":"2772:58:16"}]},"documentation":{"id":2649,"nodeType":"StructuredDocumentation","src":"2536:148:16","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":2668,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:16","nodeType":"FunctionDefinition","parameters":{"id":2652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2651,"mutability":"mutable","name":"addr","nameLocation":"2718:4:16","nodeType":"VariableDeclaration","scope":2668,"src":"2710:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2650,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:16"},"returnParameters":{"id":2655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2654,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2668,"src":"2747:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2653,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:16"},"scope":2706,"src":"2689:148:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2704,"nodeType":"Block","src":"2992:104:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2680,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"3015:1:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2679,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2678,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:16","typeDescriptions":{}}},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:16","memberName":"length","nodeType":"MemberAccess","src":"3009:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2685,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"3034:1:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2683,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:16","typeDescriptions":{}}},"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:16","memberName":"length","nodeType":"MemberAccess","src":"3028:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2692,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"3063:1:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2690,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:16","typeDescriptions":{}}},"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2689,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3047:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2698,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"3086:1:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2696,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:16","typeDescriptions":{}}},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2695,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3070:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2677,"id":2703,"nodeType":"Return","src":"3002:87:16"}]},"documentation":{"id":2669,"nodeType":"StructuredDocumentation","src":"2843:66:16","text":" @dev Returns true if the two strings are equal."},"id":2705,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:16","nodeType":"FunctionDefinition","parameters":{"id":2674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2671,"mutability":"mutable","name":"a","nameLocation":"2943:1:16","nodeType":"VariableDeclaration","scope":2705,"src":"2929:15:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2670,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2673,"mutability":"mutable","name":"b","nameLocation":"2960:1:16","nodeType":"VariableDeclaration","scope":2705,"src":"2946:15:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2672,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:16"},"returnParameters":{"id":2677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2676,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2705,"src":"2986:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2675,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:16"},"scope":2706,"src":"2914:182:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2707,"src":"251:2847:16","usedErrors":[2471],"usedEvents":[]}],"src":"101:2998:16"},"id":16},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2730],"IERC165":[2742]},"id":2731,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2708,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:17"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2710,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2731,"sourceUnit":2743,"src":"140:38:17","symbolAliases":[{"foreign":{"id":2709,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"148:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2712,"name":"IERC165","nameLocations":["687:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":2742,"src":"687:7:17"},"id":2713,"nodeType":"InheritanceSpecifier","src":"687:7:17"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2711,"nodeType":"StructuredDocumentation","src":"180:478:17","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":2730,"linearizedBaseContracts":[2730,2742],"name":"ERC165","nameLocation":"677:6:17","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2741],"body":{"id":2728,"nodeType":"Block","src":"844:64:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2721,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"861:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2723,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"881:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2742_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2742_$","typeString":"type(contract IERC165)"}],"id":2722,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"876:4:17","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2742","typeString":"type(contract IERC165)"}},"id":2725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:17","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2720,"id":2727,"nodeType":"Return","src":"854:47:17"}]},"documentation":{"id":2714,"nodeType":"StructuredDocumentation","src":"701:56:17","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2729,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:17","nodeType":"FunctionDefinition","parameters":{"id":2717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2716,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:17","nodeType":"VariableDeclaration","scope":2729,"src":"789:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2715,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:17"},"returnParameters":{"id":2720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2729,"src":"838:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2718,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:17"},"scope":2730,"src":"762:146:17","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2731,"src":"659:251:17","usedErrors":[],"usedEvents":[]}],"src":"114:797:17"},"id":17},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2742]},"id":2743,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2732,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2733,"nodeType":"StructuredDocumentation","src":"141:279:18","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2742,"linearizedBaseContracts":[2742],"name":"IERC165","nameLocation":"431:7:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2734,"nodeType":"StructuredDocumentation","src":"445:340:18","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2741,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:18","nodeType":"FunctionDefinition","parameters":{"id":2737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2736,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:18","nodeType":"VariableDeclaration","scope":2741,"src":"817:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2735,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:18"},"returnParameters":{"id":2740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2739,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2741,"src":"860:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2738,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:18"},"scope":2742,"src":"790:76:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2743,"src":"421:447:18","usedErrors":[],"usedEvents":[]}],"src":"115:754:18"},"id":18},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3796]},"id":3797,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2744,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2745,"nodeType":"StructuredDocumentation","src":"129:73:19","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3796,"linearizedBaseContracts":[3796],"name":"Math","nameLocation":"211:4:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2746,"nodeType":"StructuredDocumentation","src":"222:50:19","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":2748,"name":"MathOverflowedMulDiv","nameLocation":"283:20:19","nodeType":"ErrorDefinition","parameters":{"id":2747,"nodeType":"ParameterList","parameters":[],"src":"303:2:19"},"src":"277:29:19"},{"canonicalName":"Math.Rounding","id":2753,"members":[{"id":2749,"name":"Floor","nameLocation":"336:5:19","nodeType":"EnumValue","src":"336:5:19"},{"id":2750,"name":"Ceil","nameLocation":"379:4:19","nodeType":"EnumValue","src":"379:4:19"},{"id":2751,"name":"Trunc","nameLocation":"421:5:19","nodeType":"EnumValue","src":"421:5:19"},{"id":2752,"name":"Expand","nameLocation":"451:6:19","nodeType":"EnumValue","src":"451:6:19"}],"name":"Rounding","nameLocation":"317:8:19","nodeType":"EnumDefinition","src":"312:169:19"},{"body":{"id":2784,"nodeType":"Block","src":"661:140:19","statements":[{"id":2783,"nodeType":"UncheckedBlock","src":"671:124:19","statements":[{"assignments":[2766],"declarations":[{"constant":false,"id":2766,"mutability":"mutable","name":"c","nameLocation":"703:1:19","nodeType":"VariableDeclaration","scope":2783,"src":"695:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2765,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2770,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2767,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"707:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2768,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"711:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2771,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"730:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2772,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"734:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2778,"nodeType":"IfStatement","src":"726:28:19","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2776,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2764,"id":2777,"nodeType":"Return","src":"737:17:19"}},{"expression":{"components":[{"hexValue":"74727565","id":2779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2780,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"782:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2781,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2764,"id":2782,"nodeType":"Return","src":"768:16:19"}]}]},"documentation":{"id":2754,"nodeType":"StructuredDocumentation","src":"487:93:19","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":2785,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:19","nodeType":"FunctionDefinition","parameters":{"id":2759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2756,"mutability":"mutable","name":"a","nameLocation":"609:1:19","nodeType":"VariableDeclaration","scope":2785,"src":"601:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2755,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2758,"mutability":"mutable","name":"b","nameLocation":"620:1:19","nodeType":"VariableDeclaration","scope":2785,"src":"612:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2757,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:19"},"returnParameters":{"id":2764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2785,"src":"646:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2760,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2785,"src":"652:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2762,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:19"},"scope":3796,"src":"585:216:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2812,"nodeType":"Block","src":"984:113:19","statements":[{"id":2811,"nodeType":"UncheckedBlock","src":"994:97:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2797,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2790,"src":"1022:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2798,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2788,"src":"1026:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2804,"nodeType":"IfStatement","src":"1018:28:19","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2802,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2796,"id":2803,"nodeType":"Return","src":"1029:17:19"}},{"expression":{"components":[{"hexValue":"74727565","id":2805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2806,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2788,"src":"1074:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2807,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2790,"src":"1078:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2809,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2796,"id":2810,"nodeType":"Return","src":"1060:20:19"}]}]},"documentation":{"id":2786,"nodeType":"StructuredDocumentation","src":"807:96:19","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":2813,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:19","nodeType":"FunctionDefinition","parameters":{"id":2791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2788,"mutability":"mutable","name":"a","nameLocation":"932:1:19","nodeType":"VariableDeclaration","scope":2813,"src":"924:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2790,"mutability":"mutable","name":"b","nameLocation":"943:1:19","nodeType":"VariableDeclaration","scope":2813,"src":"935:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2789,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:19"},"returnParameters":{"id":2796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2793,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2813,"src":"969:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2792,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2813,"src":"975:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2794,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:19"},"scope":3796,"src":"908:189:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2854,"nodeType":"Block","src":"1283:417:19","statements":[{"id":2853,"nodeType":"UncheckedBlock","src":"1293:401:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2825,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"1551:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2832,"nodeType":"IfStatement","src":"1547:28:19","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":2828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":2829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2830,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2824,"id":2831,"nodeType":"Return","src":"1559:16:19"}},{"assignments":[2834],"declarations":[{"constant":false,"id":2834,"mutability":"mutable","name":"c","nameLocation":"1597:1:19","nodeType":"VariableDeclaration","scope":2853,"src":"1589:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2833,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2838,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2835,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"1601:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2836,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2818,"src":"1605:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2839,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"1624:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2840,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"1628:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2842,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2818,"src":"1633:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2848,"nodeType":"IfStatement","src":"1620:33:19","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2846,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2824,"id":2847,"nodeType":"Return","src":"1636:17:19"}},{"expression":{"components":[{"hexValue":"74727565","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2850,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"1681:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2851,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2824,"id":2852,"nodeType":"Return","src":"1667:16:19"}]}]},"documentation":{"id":2814,"nodeType":"StructuredDocumentation","src":"1103:99:19","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":2855,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:19","nodeType":"FunctionDefinition","parameters":{"id":2819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2816,"mutability":"mutable","name":"a","nameLocation":"1231:1:19","nodeType":"VariableDeclaration","scope":2855,"src":"1223:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2815,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2818,"mutability":"mutable","name":"b","nameLocation":"1242:1:19","nodeType":"VariableDeclaration","scope":2855,"src":"1234:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2817,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:19"},"returnParameters":{"id":2824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2855,"src":"1268:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2820,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2823,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2855,"src":"1274:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2822,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:19"},"scope":3796,"src":"1207:493:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2882,"nodeType":"Block","src":"1887:114:19","statements":[{"id":2881,"nodeType":"UncheckedBlock","src":"1897:98:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2867,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"1925:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2874,"nodeType":"IfStatement","src":"1921:29:19","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2872,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2866,"id":2873,"nodeType":"Return","src":"1933:17:19"}},{"expression":{"components":[{"hexValue":"74727565","id":2875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2876,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"1978:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2877,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"1982:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2879,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2866,"id":2880,"nodeType":"Return","src":"1964:20:19"}]}]},"documentation":{"id":2856,"nodeType":"StructuredDocumentation","src":"1706:100:19","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":2883,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:19","nodeType":"FunctionDefinition","parameters":{"id":2861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2858,"mutability":"mutable","name":"a","nameLocation":"1835:1:19","nodeType":"VariableDeclaration","scope":2883,"src":"1827:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2857,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2860,"mutability":"mutable","name":"b","nameLocation":"1846:1:19","nodeType":"VariableDeclaration","scope":2883,"src":"1838:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2859,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:19"},"returnParameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2863,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2883,"src":"1872:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2862,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2883,"src":"1878:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2864,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:19"},"scope":3796,"src":"1811:190:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2910,"nodeType":"Block","src":"2198:114:19","statements":[{"id":2909,"nodeType":"UncheckedBlock","src":"2208:98:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2895,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"2236:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2902,"nodeType":"IfStatement","src":"2232:29:19","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2900,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2894,"id":2901,"nodeType":"Return","src":"2244:17:19"}},{"expression":{"components":[{"hexValue":"74727565","id":2903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2904,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"2289:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2905,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"2293:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2907,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2894,"id":2908,"nodeType":"Return","src":"2275:20:19"}]}]},"documentation":{"id":2884,"nodeType":"StructuredDocumentation","src":"2007:110:19","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":2911,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:19","nodeType":"FunctionDefinition","parameters":{"id":2889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2886,"mutability":"mutable","name":"a","nameLocation":"2146:1:19","nodeType":"VariableDeclaration","scope":2911,"src":"2138:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2885,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2888,"mutability":"mutable","name":"b","nameLocation":"2157:1:19","nodeType":"VariableDeclaration","scope":2911,"src":"2149:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2887,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:19"},"returnParameters":{"id":2894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2911,"src":"2183:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2890,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2911,"src":"2189:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2892,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:19"},"scope":3796,"src":"2122:190:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2928,"nodeType":"Block","src":"2449:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2921,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"2466:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2922,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"2470:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2925,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"2478:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:19","trueExpression":{"id":2924,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"2474:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2920,"id":2927,"nodeType":"Return","src":"2459:20:19"}]},"documentation":{"id":2912,"nodeType":"StructuredDocumentation","src":"2318:59:19","text":" @dev Returns the largest of two numbers."},"id":2929,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:19","nodeType":"FunctionDefinition","parameters":{"id":2917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2914,"mutability":"mutable","name":"a","nameLocation":"2403:1:19","nodeType":"VariableDeclaration","scope":2929,"src":"2395:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2913,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2916,"mutability":"mutable","name":"b","nameLocation":"2414:1:19","nodeType":"VariableDeclaration","scope":2929,"src":"2406:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2915,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:19"},"returnParameters":{"id":2920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2929,"src":"2440:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2918,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:19"},"scope":3796,"src":"2382:104:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2946,"nodeType":"Block","src":"2624:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2939,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"2641:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2940,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"2645:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2943,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"2653:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:19","trueExpression":{"id":2942,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"2649:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2938,"id":2945,"nodeType":"Return","src":"2634:20:19"}]},"documentation":{"id":2930,"nodeType":"StructuredDocumentation","src":"2492:60:19","text":" @dev Returns the smallest of two numbers."},"id":2947,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:19","nodeType":"FunctionDefinition","parameters":{"id":2935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2932,"mutability":"mutable","name":"a","nameLocation":"2578:1:19","nodeType":"VariableDeclaration","scope":2947,"src":"2570:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2931,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2934,"mutability":"mutable","name":"b","nameLocation":"2589:1:19","nodeType":"VariableDeclaration","scope":2947,"src":"2581:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2933,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:19"},"returnParameters":{"id":2938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2947,"src":"2615:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2936,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:19"},"scope":3796,"src":"2557:104:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2969,"nodeType":"Block","src":"2845:82:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2957,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"2900:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2958,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"2904:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2960,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2961,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"2910:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2962,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"2914:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2964,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2956,"id":2968,"nodeType":"Return","src":"2892:28:19"}]},"documentation":{"id":2948,"nodeType":"StructuredDocumentation","src":"2667:102:19","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2970,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:19","nodeType":"FunctionDefinition","parameters":{"id":2953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2950,"mutability":"mutable","name":"a","nameLocation":"2799:1:19","nodeType":"VariableDeclaration","scope":2970,"src":"2791:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2949,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2952,"mutability":"mutable","name":"b","nameLocation":"2810:1:19","nodeType":"VariableDeclaration","scope":2970,"src":"2802:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2951,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:19"},"returnParameters":{"id":2956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2970,"src":"2836:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2954,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:19"},"scope":3796,"src":"2774:153:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3003,"nodeType":"Block","src":"3219:260:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2980,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"3233:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2988,"nodeType":"IfStatement","src":"3229:127:19","trueBody":{"id":2987,"nodeType":"Block","src":"3241:115:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2983,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"3340:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2984,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"3344:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2979,"id":2986,"nodeType":"Return","src":"3333:12:19"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2989,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"3444:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2993,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"3458:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2996,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2997,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"3467:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:19","trueExpression":{"hexValue":"30","id":2992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2979,"id":3002,"nodeType":"Return","src":"3437:35:19"}]},"documentation":{"id":2971,"nodeType":"StructuredDocumentation","src":"2933:210:19","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":3004,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:19","nodeType":"FunctionDefinition","parameters":{"id":2976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"a","nameLocation":"3173:1:19","nodeType":"VariableDeclaration","scope":3004,"src":"3165:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2972,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2975,"mutability":"mutable","name":"b","nameLocation":"3184:1:19","nodeType":"VariableDeclaration","scope":3004,"src":"3176:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2974,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:19"},"returnParameters":{"id":2979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2978,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3004,"src":"3210:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2977,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:19"},"scope":3796,"src":"3148:331:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3129,"nodeType":"Block","src":"3901:4018:19","statements":[{"id":3128,"nodeType":"UncheckedBlock","src":"3911:4002:19","statements":[{"assignments":[3017],"declarations":[{"constant":false,"id":3017,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:19","nodeType":"VariableDeclaration","scope":3128,"src":"4232:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3016,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3021,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3018,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"4248:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3019,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"4252:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:19"},{"assignments":[3023],"declarations":[{"constant":false,"id":3023,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:19","nodeType":"VariableDeclaration","scope":3128,"src":"4312:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3022,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3024,"nodeType":"VariableDeclarationStatement","src":"4312:13:19"},{"AST":{"nodeType":"YulBlock","src":"4392:122:19","statements":[{"nodeType":"YulVariableDeclaration","src":"4410:30:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4427:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"4430:1:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4437:1:19","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4433:3:19"},"nodeType":"YulFunctionCall","src":"4433:6:19"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4420:6:19"},"nodeType":"YulFunctionCall","src":"4420:20:19"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4414:2:19","type":""}]},{"nodeType":"YulAssignment","src":"4457:43:19","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4474:2:19"},{"name":"prod0","nodeType":"YulIdentifier","src":"4478:5:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4470:3:19"},"nodeType":"YulFunctionCall","src":"4470:14:19"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4489:2:19"},{"name":"prod0","nodeType":"YulIdentifier","src":"4493:5:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:19"},"nodeType":"YulFunctionCall","src":"4486:13:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:19"},"nodeType":"YulFunctionCall","src":"4466:34:19"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4457:5:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3017,"isOffset":false,"isSlot":false,"src":"4478:5:19","valueSize":1},{"declaration":3017,"isOffset":false,"isSlot":false,"src":"4493:5:19","valueSize":1},{"declaration":3023,"isOffset":false,"isSlot":false,"src":"4457:5:19","valueSize":1},{"declaration":3007,"isOffset":false,"isSlot":false,"src":"4427:1:19","valueSize":1},{"declaration":3009,"isOffset":false,"isSlot":false,"src":"4430:1:19","valueSize":1}],"id":3025,"nodeType":"InlineAssembly","src":"4383:131:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3026,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"4595:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3034,"nodeType":"IfStatement","src":"4591:368:19","trueBody":{"id":3033,"nodeType":"Block","src":"4607:352:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3029,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3017,"src":"4925:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3030,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"4933:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3015,"id":3032,"nodeType":"Return","src":"4918:26:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3035,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"5065:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3036,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"5080:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3042,"nodeType":"IfStatement","src":"5061:88:19","trueBody":{"id":3041,"nodeType":"Block","src":"5087:62:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3038,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"5112:20:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3040,"nodeType":"RevertStatement","src":"5105:29:19"}]}},{"assignments":[3044],"declarations":[{"constant":false,"id":3044,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:19","nodeType":"VariableDeclaration","scope":3128,"src":"5404:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3043,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3045,"nodeType":"VariableDeclarationStatement","src":"5404:17:19"},{"AST":{"nodeType":"YulBlock","src":"5444:291:19","statements":[{"nodeType":"YulAssignment","src":"5513:38:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5533:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"5536:1:19"},{"name":"denominator","nodeType":"YulIdentifier","src":"5539:11:19"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5526:6:19"},"nodeType":"YulFunctionCall","src":"5526:25:19"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5513:9:19"}]},{"nodeType":"YulAssignment","src":"5633:41:19","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5646:5:19"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5656:9:19"},{"name":"prod0","nodeType":"YulIdentifier","src":"5667:5:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5653:2:19"},"nodeType":"YulFunctionCall","src":"5653:20:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5642:3:19"},"nodeType":"YulFunctionCall","src":"5642:32:19"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5633:5:19"}]},{"nodeType":"YulAssignment","src":"5691:30:19","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5704:5:19"},{"name":"remainder","nodeType":"YulIdentifier","src":"5711:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5700:3:19"},"nodeType":"YulFunctionCall","src":"5700:21:19"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5691:5:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3011,"isOffset":false,"isSlot":false,"src":"5539:11:19","valueSize":1},{"declaration":3017,"isOffset":false,"isSlot":false,"src":"5667:5:19","valueSize":1},{"declaration":3017,"isOffset":false,"isSlot":false,"src":"5691:5:19","valueSize":1},{"declaration":3017,"isOffset":false,"isSlot":false,"src":"5704:5:19","valueSize":1},{"declaration":3023,"isOffset":false,"isSlot":false,"src":"5633:5:19","valueSize":1},{"declaration":3023,"isOffset":false,"isSlot":false,"src":"5646:5:19","valueSize":1},{"declaration":3044,"isOffset":false,"isSlot":false,"src":"5513:9:19","valueSize":1},{"declaration":3044,"isOffset":false,"isSlot":false,"src":"5656:9:19","valueSize":1},{"declaration":3044,"isOffset":false,"isSlot":false,"src":"5711:9:19","valueSize":1},{"declaration":3007,"isOffset":false,"isSlot":false,"src":"5533:1:19","valueSize":1},{"declaration":3009,"isOffset":false,"isSlot":false,"src":"5536:1:19","valueSize":1}],"id":3046,"nodeType":"InlineAssembly","src":"5435:300:19"},{"assignments":[3048],"declarations":[{"constant":false,"id":3048,"mutability":"mutable","name":"twos","nameLocation":"5947:4:19","nodeType":"VariableDeclaration","scope":3128,"src":"5939:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3047,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3055,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3049,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"5954:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":3050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3051,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"5973:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3053,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:19"},{"AST":{"nodeType":"YulBlock","src":"6008:362:19","statements":[{"nodeType":"YulAssignment","src":"6073:37:19","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6092:11:19"},{"name":"twos","nodeType":"YulIdentifier","src":"6105:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6088:3:19"},"nodeType":"YulFunctionCall","src":"6088:22:19"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6073:11:19"}]},{"nodeType":"YulAssignment","src":"6177:25:19","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6190:5:19"},{"name":"twos","nodeType":"YulIdentifier","src":"6197:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6186:3:19"},"nodeType":"YulFunctionCall","src":"6186:16:19"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6177:5:19"}]},{"nodeType":"YulAssignment","src":"6317:39:19","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6337:1:19","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6340:4:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6333:3:19"},"nodeType":"YulFunctionCall","src":"6333:12:19"},{"name":"twos","nodeType":"YulIdentifier","src":"6347:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6329:3:19"},"nodeType":"YulFunctionCall","src":"6329:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"6354:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:19"},"nodeType":"YulFunctionCall","src":"6325:31:19"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6317:4:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3011,"isOffset":false,"isSlot":false,"src":"6073:11:19","valueSize":1},{"declaration":3011,"isOffset":false,"isSlot":false,"src":"6092:11:19","valueSize":1},{"declaration":3017,"isOffset":false,"isSlot":false,"src":"6177:5:19","valueSize":1},{"declaration":3017,"isOffset":false,"isSlot":false,"src":"6190:5:19","valueSize":1},{"declaration":3048,"isOffset":false,"isSlot":false,"src":"6105:4:19","valueSize":1},{"declaration":3048,"isOffset":false,"isSlot":false,"src":"6197:4:19","valueSize":1},{"declaration":3048,"isOffset":false,"isSlot":false,"src":"6317:4:19","valueSize":1},{"declaration":3048,"isOffset":false,"isSlot":false,"src":"6340:4:19","valueSize":1},{"declaration":3048,"isOffset":false,"isSlot":false,"src":"6347:4:19","valueSize":1}],"id":3056,"nodeType":"InlineAssembly","src":"5999:371:19"},{"expression":{"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3057,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3017,"src":"6436:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3058,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"6445:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3059,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"6453:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3062,"nodeType":"ExpressionStatement","src":"6436:21:19"},{"assignments":[3064],"declarations":[{"constant":false,"id":3064,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:19","nodeType":"VariableDeclaration","scope":3128,"src":"6775:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3063,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3071,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3066,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"6798:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3068,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:19"},{"expression":{"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3072,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7031:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3074,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"7046:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3075,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7060:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3079,"nodeType":"ExpressionStatement","src":"7031:36:19"},{"expression":{"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3080,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7100:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3082,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"7115:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3083,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7129:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3087,"nodeType":"ExpressionStatement","src":"7100:36:19"},{"expression":{"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3088,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7170:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3090,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"7185:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3091,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7199:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3095,"nodeType":"ExpressionStatement","src":"7170:36:19"},{"expression":{"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3096,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7240:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3098,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"7255:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3099,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7269:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3103,"nodeType":"ExpressionStatement","src":"7240:36:19"},{"expression":{"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3104,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7310:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3106,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"7325:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3107,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7339:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3111,"nodeType":"ExpressionStatement","src":"7310:36:19"},{"expression":{"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3112,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7381:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3114,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"7396:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3115,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7410:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3119,"nodeType":"ExpressionStatement","src":"7381:36:19"},{"expression":{"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3120,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"7851:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3121,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3017,"src":"7860:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3122,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"7868:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3125,"nodeType":"ExpressionStatement","src":"7851:24:19"},{"expression":{"id":3126,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"7896:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3015,"id":3127,"nodeType":"Return","src":"7889:13:19"}]}]},"documentation":{"id":3005,"nodeType":"StructuredDocumentation","src":"3485:313:19","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":3130,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:19","nodeType":"FunctionDefinition","parameters":{"id":3012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3007,"mutability":"mutable","name":"x","nameLocation":"3827:1:19","nodeType":"VariableDeclaration","scope":3130,"src":"3819:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3006,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3009,"mutability":"mutable","name":"y","nameLocation":"3838:1:19","nodeType":"VariableDeclaration","scope":3130,"src":"3830:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3008,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3011,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:19","nodeType":"VariableDeclaration","scope":3130,"src":"3841:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3010,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:19"},"returnParameters":{"id":3015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3014,"mutability":"mutable","name":"result","nameLocation":"3893:6:19","nodeType":"VariableDeclaration","scope":3130,"src":"3885:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3013,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:19"},"scope":3796,"src":"3803:4116:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3172,"nodeType":"Block","src":"8161:192:19","statements":[{"assignments":[3146],"declarations":[{"constant":false,"id":3146,"mutability":"mutable","name":"result","nameLocation":"8179:6:19","nodeType":"VariableDeclaration","scope":3172,"src":"8171:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3145,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3152,"initialValue":{"arguments":[{"id":3148,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"8195:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3149,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"8198:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3150,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"8201:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3147,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3130,3173],"referencedDeclaration":3130,"src":"8188:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3154,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"8244:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}],"id":3153,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"8227:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2753_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3157,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"8264:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3158,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"8267:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3159,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"8270:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3156,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:19","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3169,"nodeType":"IfStatement","src":"8223:101:19","trueBody":{"id":3168,"nodeType":"Block","src":"8288:36:19","statements":[{"expression":{"id":3166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3164,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"8302:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3167,"nodeType":"ExpressionStatement","src":"8302:11:19"}]}},{"expression":{"id":3170,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"8340:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3144,"id":3171,"nodeType":"Return","src":"8333:13:19"}]},"documentation":{"id":3131,"nodeType":"StructuredDocumentation","src":"7925:121:19","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3173,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:19","nodeType":"FunctionDefinition","parameters":{"id":3141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3133,"mutability":"mutable","name":"x","nameLocation":"8075:1:19","nodeType":"VariableDeclaration","scope":3173,"src":"8067:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3132,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3135,"mutability":"mutable","name":"y","nameLocation":"8086:1:19","nodeType":"VariableDeclaration","scope":3173,"src":"8078:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3134,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3137,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:19","nodeType":"VariableDeclaration","scope":3173,"src":"8089:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3136,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3140,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:19","nodeType":"VariableDeclaration","scope":3173,"src":"8110:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"},"typeName":{"id":3139,"nodeType":"UserDefinedTypeName","pathNode":{"id":3138,"name":"Rounding","nameLocations":["8110:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2753,"src":"8110:8:19"},"referencedDeclaration":2753,"src":"8110:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:19"},"returnParameters":{"id":3144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3173,"src":"8152:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3142,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:19"},"scope":3796,"src":"8051:302:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3284,"nodeType":"Block","src":"8644:1585:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3181,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"8658:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3187,"nodeType":"IfStatement","src":"8654:45:19","trueBody":{"id":3186,"nodeType":"Block","src":"8666:33:19","statements":[{"expression":{"hexValue":"30","id":3184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3180,"id":3185,"nodeType":"Return","src":"8680:8:19"}]}},{"assignments":[3189],"declarations":[{"constant":false,"id":3189,"mutability":"mutable","name":"result","nameLocation":"9386:6:19","nodeType":"VariableDeclaration","scope":3284,"src":"9378:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3188,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3198,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3192,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"9406:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3191,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3452,3487],"referencedDeclaration":3452,"src":"9401:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3196,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:19"},{"id":3283,"nodeType":"UncheckedBlock","src":"9815:408:19","statements":[{"expression":{"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3199,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"9839:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3200,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"9849:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3201,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"9858:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3202,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"9862:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3205,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3209,"nodeType":"ExpressionStatement","src":"9839:35:19"},{"expression":{"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3210,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"9888:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3211,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"9898:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3212,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"9907:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3213,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"9911:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3216,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3220,"nodeType":"ExpressionStatement","src":"9888:35:19"},{"expression":{"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3221,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"9937:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3222,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"9947:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3223,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"9956:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3224,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"9960:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3227,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3231,"nodeType":"ExpressionStatement","src":"9937:35:19"},{"expression":{"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3232,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"9986:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3233,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"9996:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3234,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"10005:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3235,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"10009:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3238,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3242,"nodeType":"ExpressionStatement","src":"9986:35:19"},{"expression":{"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3243,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"10035:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3244,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"10045:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3245,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"10054:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3246,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"10058:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3249,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3253,"nodeType":"ExpressionStatement","src":"10035:35:19"},{"expression":{"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3254,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"10084:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3255,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"10094:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3256,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"10103:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3257,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"10107:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3260,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3264,"nodeType":"ExpressionStatement","src":"10084:35:19"},{"expression":{"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3265,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"10133:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3266,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"10143:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3267,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"10152:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3268,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"10156:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3271,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3275,"nodeType":"ExpressionStatement","src":"10133:35:19"},{"expression":{"arguments":[{"id":3277,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"10193:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3278,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"10201:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3279,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"10205:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3276,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"10189:3:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3180,"id":3282,"nodeType":"Return","src":"10182:30:19"}]}]},"documentation":{"id":3174,"nodeType":"StructuredDocumentation","src":"8359:223:19","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3285,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:19","nodeType":"FunctionDefinition","parameters":{"id":3177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3176,"mutability":"mutable","name":"a","nameLocation":"8609:1:19","nodeType":"VariableDeclaration","scope":3285,"src":"8601:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3175,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:19"},"returnParameters":{"id":3180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3285,"src":"8635:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3178,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:19"},"scope":3796,"src":"8587:1642:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3319,"nodeType":"Block","src":"10405:164:19","statements":[{"id":3318,"nodeType":"UncheckedBlock","src":"10415:148:19","statements":[{"assignments":[3297],"declarations":[{"constant":false,"id":3297,"mutability":"mutable","name":"result","nameLocation":"10447:6:19","nodeType":"VariableDeclaration","scope":3318,"src":"10439:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3296,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3301,"initialValue":{"arguments":[{"id":3299,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"10461:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3298,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3285,3320],"referencedDeclaration":3285,"src":"10456:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3302,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"10484:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3304,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"10511:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}],"id":3303,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"10494:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2753_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3306,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"10524:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3307,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"10533:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3309,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"10542:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:19","trueExpression":{"hexValue":"31","id":3312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3315,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3295,"id":3317,"nodeType":"Return","src":"10477:75:19"}]}]},"documentation":{"id":3286,"nodeType":"StructuredDocumentation","src":"10235:89:19","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3320,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:19","nodeType":"FunctionDefinition","parameters":{"id":3292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3288,"mutability":"mutable","name":"a","nameLocation":"10351:1:19","nodeType":"VariableDeclaration","scope":3320,"src":"10343:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3287,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3291,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:19","nodeType":"VariableDeclaration","scope":3320,"src":"10354:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"},"typeName":{"id":3290,"nodeType":"UserDefinedTypeName","pathNode":{"id":3289,"name":"Rounding","nameLocations":["10354:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2753,"src":"10354:8:19"},"referencedDeclaration":2753,"src":"10354:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:19"},"returnParameters":{"id":3295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3320,"src":"10396:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3293,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:19"},"scope":3796,"src":"10329:240:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3451,"nodeType":"Block","src":"10760:922:19","statements":[{"assignments":[3329],"declarations":[{"constant":false,"id":3329,"mutability":"mutable","name":"result","nameLocation":"10778:6:19","nodeType":"VariableDeclaration","scope":3451,"src":"10770:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3328,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3331,"initialValue":{"hexValue":"30","id":3330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:19"},{"id":3448,"nodeType":"UncheckedBlock","src":"10798:855:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3332,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"10826:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3346,"nodeType":"IfStatement","src":"10822:99:19","trueBody":{"id":3345,"nodeType":"Block","src":"10844:77:19","statements":[{"expression":{"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"10862:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3340,"nodeType":"ExpressionStatement","src":"10862:13:19"},{"expression":{"id":3343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3341,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"10893:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3344,"nodeType":"ExpressionStatement","src":"10893:13:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3347,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"10938:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3361,"nodeType":"IfStatement","src":"10934:96:19","trueBody":{"id":3360,"nodeType":"Block","src":"10955:75:19","statements":[{"expression":{"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"10973:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3355,"nodeType":"ExpressionStatement","src":"10973:12:19"},{"expression":{"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3356,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"11003:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3359,"nodeType":"ExpressionStatement","src":"11003:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"11047:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3376,"nodeType":"IfStatement","src":"11043:96:19","trueBody":{"id":3375,"nodeType":"Block","src":"11064:75:19","statements":[{"expression":{"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3367,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"11082:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3370,"nodeType":"ExpressionStatement","src":"11082:12:19"},{"expression":{"id":3373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"11112:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3374,"nodeType":"ExpressionStatement","src":"11112:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3377,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"11156:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3391,"nodeType":"IfStatement","src":"11152:96:19","trueBody":{"id":3390,"nodeType":"Block","src":"11173:75:19","statements":[{"expression":{"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"11191:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3385,"nodeType":"ExpressionStatement","src":"11191:12:19"},{"expression":{"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3386,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"11221:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3389,"nodeType":"ExpressionStatement","src":"11221:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3392,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"11265:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3406,"nodeType":"IfStatement","src":"11261:93:19","trueBody":{"id":3405,"nodeType":"Block","src":"11281:73:19","statements":[{"expression":{"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3397,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"11299:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3400,"nodeType":"ExpressionStatement","src":"11299:11:19"},{"expression":{"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3401,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"11328:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3404,"nodeType":"ExpressionStatement","src":"11328:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"11371:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3421,"nodeType":"IfStatement","src":"11367:93:19","trueBody":{"id":3420,"nodeType":"Block","src":"11387:73:19","statements":[{"expression":{"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"11405:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3415,"nodeType":"ExpressionStatement","src":"11405:11:19"},{"expression":{"id":3418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3416,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"11434:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3419,"nodeType":"ExpressionStatement","src":"11434:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"11477:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3436,"nodeType":"IfStatement","src":"11473:93:19","trueBody":{"id":3435,"nodeType":"Block","src":"11493:73:19","statements":[{"expression":{"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"11511:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3430,"nodeType":"ExpressionStatement","src":"11511:11:19"},{"expression":{"id":3433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3431,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"11540:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3434,"nodeType":"ExpressionStatement","src":"11540:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3437,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"11583:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3447,"nodeType":"IfStatement","src":"11579:64:19","trueBody":{"id":3446,"nodeType":"Block","src":"11599:44:19","statements":[{"expression":{"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3442,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"11617:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3445,"nodeType":"ExpressionStatement","src":"11617:11:19"}]}}]},{"expression":{"id":3449,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"11669:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3327,"id":3450,"nodeType":"Return","src":"11662:13:19"}]},"documentation":{"id":3321,"nodeType":"StructuredDocumentation","src":"10575:119:19","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3452,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:19","nodeType":"FunctionDefinition","parameters":{"id":3324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3323,"mutability":"mutable","name":"value","nameLocation":"10721:5:19","nodeType":"VariableDeclaration","scope":3452,"src":"10713:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3322,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:19"},"returnParameters":{"id":3327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3452,"src":"10751:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3325,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:19"},"scope":3796,"src":"10699:983:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3486,"nodeType":"Block","src":"11915:168:19","statements":[{"id":3485,"nodeType":"UncheckedBlock","src":"11925:152:19","statements":[{"assignments":[3464],"declarations":[{"constant":false,"id":3464,"mutability":"mutable","name":"result","nameLocation":"11957:6:19","nodeType":"VariableDeclaration","scope":3485,"src":"11949:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3463,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3468,"initialValue":{"arguments":[{"id":3466,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"11971:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3465,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3452,3487],"referencedDeclaration":3452,"src":"11966:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3469,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"11998:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3471,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"12025:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}],"id":3470,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"12008:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2753_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3474,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"12043:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3476,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"12052:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:19","trueExpression":{"hexValue":"31","id":3479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3482,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3462,"id":3484,"nodeType":"Return","src":"11991:75:19"}]}]},"documentation":{"id":3453,"nodeType":"StructuredDocumentation","src":"11688:142:19","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3487,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:19","nodeType":"FunctionDefinition","parameters":{"id":3459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3455,"mutability":"mutable","name":"value","nameLocation":"11857:5:19","nodeType":"VariableDeclaration","scope":3487,"src":"11849:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3454,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3458,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:19","nodeType":"VariableDeclaration","scope":3487,"src":"11864:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"},"typeName":{"id":3457,"nodeType":"UserDefinedTypeName","pathNode":{"id":3456,"name":"Rounding","nameLocations":["11864:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2753,"src":"11864:8:19"},"referencedDeclaration":2753,"src":"11864:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:19"},"returnParameters":{"id":3462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3461,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3487,"src":"11906:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3460,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:19"},"scope":3796,"src":"11835:248:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3615,"nodeType":"Block","src":"12276:854:19","statements":[{"assignments":[3496],"declarations":[{"constant":false,"id":3496,"mutability":"mutable","name":"result","nameLocation":"12294:6:19","nodeType":"VariableDeclaration","scope":3615,"src":"12286:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3495,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3498,"initialValue":{"hexValue":"30","id":3497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:19"},{"id":3612,"nodeType":"UncheckedBlock","src":"12314:787:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3499,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"12342:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3515,"nodeType":"IfStatement","src":"12338:103:19","trueBody":{"id":3514,"nodeType":"Block","src":"12361:80:19","statements":[{"expression":{"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3504,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"12379:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3509,"nodeType":"ExpressionStatement","src":"12379:17:19"},{"expression":{"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3510,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"12414:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3513,"nodeType":"ExpressionStatement","src":"12414:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3516,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"12458:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3532,"nodeType":"IfStatement","src":"12454:103:19","trueBody":{"id":3531,"nodeType":"Block","src":"12477:80:19","statements":[{"expression":{"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3521,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"12495:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3526,"nodeType":"ExpressionStatement","src":"12495:17:19"},{"expression":{"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3527,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"12530:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3530,"nodeType":"ExpressionStatement","src":"12530:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3533,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"12574:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3549,"nodeType":"IfStatement","src":"12570:103:19","trueBody":{"id":3548,"nodeType":"Block","src":"12593:80:19","statements":[{"expression":{"id":3542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"12611:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3543,"nodeType":"ExpressionStatement","src":"12611:17:19"},{"expression":{"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3544,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"12646:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3547,"nodeType":"ExpressionStatement","src":"12646:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3550,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"12690:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3566,"nodeType":"IfStatement","src":"12686:100:19","trueBody":{"id":3565,"nodeType":"Block","src":"12708:78:19","statements":[{"expression":{"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3555,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"12726:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3560,"nodeType":"ExpressionStatement","src":"12726:16:19"},{"expression":{"id":3563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3561,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"12760:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3564,"nodeType":"ExpressionStatement","src":"12760:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"12803:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:19","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3583,"nodeType":"IfStatement","src":"12799:100:19","trueBody":{"id":3582,"nodeType":"Block","src":"12821:78:19","statements":[{"expression":{"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3572,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"12839:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:19","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3577,"nodeType":"ExpressionStatement","src":"12839:16:19"},{"expression":{"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3578,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"12873:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3581,"nodeType":"ExpressionStatement","src":"12873:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3584,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"12916:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3600,"nodeType":"IfStatement","src":"12912:100:19","trueBody":{"id":3599,"nodeType":"Block","src":"12934:78:19","statements":[{"expression":{"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3589,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"12952:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3594,"nodeType":"ExpressionStatement","src":"12952:16:19"},{"expression":{"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3595,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"12986:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3598,"nodeType":"ExpressionStatement","src":"12986:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3601,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"13029:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3611,"nodeType":"IfStatement","src":"13025:66:19","trueBody":{"id":3610,"nodeType":"Block","src":"13047:44:19","statements":[{"expression":{"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3606,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"13065:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3609,"nodeType":"ExpressionStatement","src":"13065:11:19"}]}}]},{"expression":{"id":3613,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"13117:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3494,"id":3614,"nodeType":"Return","src":"13110:13:19"}]},"documentation":{"id":3488,"nodeType":"StructuredDocumentation","src":"12089:120:19","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3616,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:19","nodeType":"FunctionDefinition","parameters":{"id":3491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3490,"mutability":"mutable","name":"value","nameLocation":"12237:5:19","nodeType":"VariableDeclaration","scope":3616,"src":"12229:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3489,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:19"},"returnParameters":{"id":3494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3493,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3616,"src":"12267:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3492,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:19"},"scope":3796,"src":"12214:916:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3650,"nodeType":"Block","src":"13365:170:19","statements":[{"id":3649,"nodeType":"UncheckedBlock","src":"13375:154:19","statements":[{"assignments":[3628],"declarations":[{"constant":false,"id":3628,"mutability":"mutable","name":"result","nameLocation":"13407:6:19","nodeType":"VariableDeclaration","scope":3649,"src":"13399:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3627,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3632,"initialValue":{"arguments":[{"id":3630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3619,"src":"13422:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3629,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3616,3651],"referencedDeclaration":3616,"src":"13416:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3633,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3628,"src":"13449:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3635,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3622,"src":"13476:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}],"id":3634,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"13459:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2753_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3638,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3628,"src":"13495:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3619,"src":"13504:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:19","trueExpression":{"hexValue":"31","id":3643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3646,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3626,"id":3648,"nodeType":"Return","src":"13442:76:19"}]}]},"documentation":{"id":3617,"nodeType":"StructuredDocumentation","src":"13136:143:19","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3651,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:19","nodeType":"FunctionDefinition","parameters":{"id":3623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3619,"mutability":"mutable","name":"value","nameLocation":"13307:5:19","nodeType":"VariableDeclaration","scope":3651,"src":"13299:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3618,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3622,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:19","nodeType":"VariableDeclaration","scope":3651,"src":"13314:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"},"typeName":{"id":3621,"nodeType":"UserDefinedTypeName","pathNode":{"id":3620,"name":"Rounding","nameLocations":["13314:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2753,"src":"13314:8:19"},"referencedDeclaration":2753,"src":"13314:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:19"},"returnParameters":{"id":3626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3625,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3651,"src":"13356:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3624,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:19"},"scope":3796,"src":"13284:251:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3737,"nodeType":"Block","src":"13855:600:19","statements":[{"assignments":[3660],"declarations":[{"constant":false,"id":3660,"mutability":"mutable","name":"result","nameLocation":"13873:6:19","nodeType":"VariableDeclaration","scope":3737,"src":"13865:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3659,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3662,"initialValue":{"hexValue":"30","id":3661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:19"},{"id":3734,"nodeType":"UncheckedBlock","src":"13893:533:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3663,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"13921:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3677,"nodeType":"IfStatement","src":"13917:98:19","trueBody":{"id":3676,"nodeType":"Block","src":"13939:76:19","statements":[{"expression":{"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3668,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"13957:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3671,"nodeType":"ExpressionStatement","src":"13957:13:19"},{"expression":{"id":3674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3672,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"13988:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3675,"nodeType":"ExpressionStatement","src":"13988:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3678,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"14032:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3692,"nodeType":"IfStatement","src":"14028:95:19","trueBody":{"id":3691,"nodeType":"Block","src":"14049:74:19","statements":[{"expression":{"id":3685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3683,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"14067:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3686,"nodeType":"ExpressionStatement","src":"14067:12:19"},{"expression":{"id":3689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3687,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"14097:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3690,"nodeType":"ExpressionStatement","src":"14097:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"14140:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3707,"nodeType":"IfStatement","src":"14136:95:19","trueBody":{"id":3706,"nodeType":"Block","src":"14157:74:19","statements":[{"expression":{"id":3700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3698,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"14175:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3701,"nodeType":"ExpressionStatement","src":"14175:12:19"},{"expression":{"id":3704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3702,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"14205:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3705,"nodeType":"ExpressionStatement","src":"14205:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3708,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"14248:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3722,"nodeType":"IfStatement","src":"14244:95:19","trueBody":{"id":3721,"nodeType":"Block","src":"14265:74:19","statements":[{"expression":{"id":3715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"14283:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3716,"nodeType":"ExpressionStatement","src":"14283:12:19"},{"expression":{"id":3719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3717,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"14313:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3720,"nodeType":"ExpressionStatement","src":"14313:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"14356:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3733,"nodeType":"IfStatement","src":"14352:64:19","trueBody":{"id":3732,"nodeType":"Block","src":"14372:44:19","statements":[{"expression":{"id":3730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3728,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"14390:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3731,"nodeType":"ExpressionStatement","src":"14390:11:19"}]}}]},{"expression":{"id":3735,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"14442:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3658,"id":3736,"nodeType":"Return","src":"14435:13:19"}]},"documentation":{"id":3652,"nodeType":"StructuredDocumentation","src":"13541:246:19","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3738,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:19","nodeType":"FunctionDefinition","parameters":{"id":3655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3654,"mutability":"mutable","name":"value","nameLocation":"13816:5:19","nodeType":"VariableDeclaration","scope":3738,"src":"13808:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3653,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:19"},"returnParameters":{"id":3658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3657,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3738,"src":"13846:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3656,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:19"},"scope":3796,"src":"13792:663:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3775,"nodeType":"Block","src":"14692:177:19","statements":[{"id":3774,"nodeType":"UncheckedBlock","src":"14702:161:19","statements":[{"assignments":[3750],"declarations":[{"constant":false,"id":3750,"mutability":"mutable","name":"result","nameLocation":"14734:6:19","nodeType":"VariableDeclaration","scope":3774,"src":"14726:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3749,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3754,"initialValue":{"arguments":[{"id":3752,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"14750:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3751,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3738,3776],"referencedDeclaration":3738,"src":"14743:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3755,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3750,"src":"14777:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3757,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"14804:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}],"id":3756,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"14787:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2753_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3760,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3750,"src":"14823:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3763,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3765,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"14838:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:19","trueExpression":{"hexValue":"31","id":3768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3771,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3748,"id":3773,"nodeType":"Return","src":"14770:82:19"}]}]},"documentation":{"id":3739,"nodeType":"StructuredDocumentation","src":"14461:144:19","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3776,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:19","nodeType":"FunctionDefinition","parameters":{"id":3745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3741,"mutability":"mutable","name":"value","nameLocation":"14634:5:19","nodeType":"VariableDeclaration","scope":3776,"src":"14626:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3740,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3744,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:19","nodeType":"VariableDeclaration","scope":3776,"src":"14641:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"},"typeName":{"id":3743,"nodeType":"UserDefinedTypeName","pathNode":{"id":3742,"name":"Rounding","nameLocations":["14641:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2753,"src":"14641:8:19"},"referencedDeclaration":2753,"src":"14641:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:19"},"returnParameters":{"id":3748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3776,"src":"14683:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3746,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:19"},"scope":3796,"src":"14610:259:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3794,"nodeType":"Block","src":"15067:48:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3787,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"15090:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}],"id":3786,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3785,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:19","typeDescriptions":{}}},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":3789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3784,"id":3793,"nodeType":"Return","src":"15077:31:19"}]},"documentation":{"id":3777,"nodeType":"StructuredDocumentation","src":"14875:113:19","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":3795,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:19","nodeType":"FunctionDefinition","parameters":{"id":3781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3780,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:19","nodeType":"VariableDeclaration","scope":3795,"src":"15019:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"},"typeName":{"id":3779,"nodeType":"UserDefinedTypeName","pathNode":{"id":3778,"name":"Rounding","nameLocations":["15019:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2753,"src":"15019:8:19"},"referencedDeclaration":2753,"src":"15019:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2753","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:19"},"returnParameters":{"id":3784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3783,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3795,"src":"15061:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3782,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:19"},"scope":3796,"src":"14993:122:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3797,"src":"203:14914:19","usedErrors":[2748],"usedEvents":[]}],"src":"103:15015:19"},"id":19},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[3901]},"id":3902,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3798,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":3799,"nodeType":"StructuredDocumentation","src":"135:80:20","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3901,"linearizedBaseContracts":[3901],"name":"SignedMath","nameLocation":"224:10:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":3816,"nodeType":"Block","src":"376:37:20","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3809,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"393:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3810,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"397:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3813,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"405:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:20","trueExpression":{"id":3812,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"401:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3808,"id":3815,"nodeType":"Return","src":"386:20:20"}]},"documentation":{"id":3800,"nodeType":"StructuredDocumentation","src":"241:66:20","text":" @dev Returns the largest of two signed numbers."},"id":3817,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:20","nodeType":"FunctionDefinition","parameters":{"id":3805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3802,"mutability":"mutable","name":"a","nameLocation":"332:1:20","nodeType":"VariableDeclaration","scope":3817,"src":"325:8:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3801,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3804,"mutability":"mutable","name":"b","nameLocation":"342:1:20","nodeType":"VariableDeclaration","scope":3817,"src":"335:8:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3803,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:20"},"returnParameters":{"id":3808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3817,"src":"368:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3806,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:20"},"scope":3901,"src":"312:101:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3834,"nodeType":"Block","src":"555:37:20","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3827,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"572:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3828,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"576:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3831,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"584:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:20","trueExpression":{"id":3830,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"580:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3826,"id":3833,"nodeType":"Return","src":"565:20:20"}]},"documentation":{"id":3818,"nodeType":"StructuredDocumentation","src":"419:67:20","text":" @dev Returns the smallest of two signed numbers."},"id":3835,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:20","nodeType":"FunctionDefinition","parameters":{"id":3823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3820,"mutability":"mutable","name":"a","nameLocation":"511:1:20","nodeType":"VariableDeclaration","scope":3835,"src":"504:8:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3819,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3822,"mutability":"mutable","name":"b","nameLocation":"521:1:20","nodeType":"VariableDeclaration","scope":3835,"src":"514:8:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3821,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:20"},"returnParameters":{"id":3826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3835,"src":"547:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3824,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:20"},"scope":3901,"src":"491:101:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3878,"nodeType":"Block","src":"797:162:20","statements":[{"assignments":[3846],"declarations":[{"constant":false,"id":3846,"mutability":"mutable","name":"x","nameLocation":"866:1:20","nodeType":"VariableDeclaration","scope":3878,"src":"859:8:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3845,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3859,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3847,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3838,"src":"871:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3848,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"875:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3850,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3851,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3838,"src":"882:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3852,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"886:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3854,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3857,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:20"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3860,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"911:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3865,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"931:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3863,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:20","typeDescriptions":{}}},"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:20","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3862,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3861,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:20","typeDescriptions":{}}},"id":3869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3870,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3838,"src":"945:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3871,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"949:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3873,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3875,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3844,"id":3877,"nodeType":"Return","src":"904:48:20"}]},"documentation":{"id":3836,"nodeType":"StructuredDocumentation","src":"598:126:20","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":3879,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:20","nodeType":"FunctionDefinition","parameters":{"id":3841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3838,"mutability":"mutable","name":"a","nameLocation":"753:1:20","nodeType":"VariableDeclaration","scope":3879,"src":"746:8:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3837,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3840,"mutability":"mutable","name":"b","nameLocation":"763:1:20","nodeType":"VariableDeclaration","scope":3879,"src":"756:8:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3839,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:20"},"returnParameters":{"id":3844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3879,"src":"789:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3842,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:20"},"scope":3901,"src":"729:230:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3899,"nodeType":"Block","src":"1103:158:20","statements":[{"id":3898,"nodeType":"UncheckedBlock","src":"1113:142:20","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3889,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3882,"src":"1228:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:20","subExpression":{"id":3893,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3882,"src":"1242:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:20","trueExpression":{"id":3892,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3882,"src":"1237:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3887,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:20","typeDescriptions":{}}},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3886,"id":3897,"nodeType":"Return","src":"1213:31:20"}]}]},"documentation":{"id":3880,"nodeType":"StructuredDocumentation","src":"965:78:20","text":" @dev Returns the absolute unsigned value of a signed value."},"id":3900,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:20","nodeType":"FunctionDefinition","parameters":{"id":3883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3882,"mutability":"mutable","name":"n","nameLocation":"1068:1:20","nodeType":"VariableDeclaration","scope":3900,"src":"1061:8:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3881,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:20"},"returnParameters":{"id":3886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3900,"src":"1094:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3884,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:20"},"scope":3901,"src":"1048:213:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3902,"src":"216:1047:20","usedErrors":[],"usedEvents":[]}],"src":"109:1155:20"},"id":20},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[4514]},"id":4515,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3903,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"205:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":3904,"nodeType":"StructuredDocumentation","src":"231:1098:21","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```solidity\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":4514,"linearizedBaseContracts":[4514],"name":"EnumerableSet","nameLocation":"1338:13:21","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":3912,"members":[{"constant":false,"id":3907,"mutability":"mutable","name":"_values","nameLocation":"1862:7:21","nodeType":"VariableDeclaration","scope":3912,"src":"1852:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3905,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1852:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3906,"nodeType":"ArrayTypeName","src":"1852:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":3911,"mutability":"mutable","name":"_positions","nameLocation":"2054:10:21","nodeType":"VariableDeclaration","scope":3912,"src":"2020:44:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":3910,"keyName":"value","keyNameLocation":"2036:5:21","keyType":{"id":3908,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2028:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2020:33:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3909,"name":"uint256","nodeType":"ElementaryTypeName","src":"2045:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1805:3:21","nodeType":"StructDefinition","scope":4514,"src":"1798:273:21","visibility":"public"},{"body":{"id":3953,"nodeType":"Block","src":"2310:337:21","statements":[{"condition":{"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2324:22:21","subExpression":{"arguments":[{"id":3924,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"2335:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":3925,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3918,"src":"2340:5:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3923,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"2325:9:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2325:21:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3951,"nodeType":"Block","src":"2604:37:21","statements":[{"expression":{"hexValue":"66616c7365","id":3949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2625:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3922,"id":3950,"nodeType":"Return","src":"2618:12:21"}]},"id":3952,"nodeType":"IfStatement","src":"2320:321:21","trueBody":{"id":3948,"nodeType":"Block","src":"2348:250:21","statements":[{"expression":{"arguments":[{"id":3933,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3918,"src":"2379:5:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":3928,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"2362:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3931,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2366:7:21","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3907,"src":"2362:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2374:4:21","memberName":"push","nodeType":"MemberAccess","src":"2362:16:21","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2362:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3935,"nodeType":"ExpressionStatement","src":"2362:23:21"},{"expression":{"id":3944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3936,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"2520:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3939,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2524:10:21","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3911,"src":"2520:14:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3940,"indexExpression":{"id":3938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3918,"src":"2535:5:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2520:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":3941,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"2544:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3942,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2548:7:21","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3907,"src":"2544:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2556:6:21","memberName":"length","nodeType":"MemberAccess","src":"2544:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2520:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3945,"nodeType":"ExpressionStatement","src":"2520:42:21"},{"expression":{"hexValue":"74727565","id":3946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2583:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3922,"id":3947,"nodeType":"Return","src":"2576:11:21"}]}}]},"documentation":{"id":3913,"nodeType":"StructuredDocumentation","src":"2077:159:21","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3954,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2250:4:21","nodeType":"FunctionDefinition","parameters":{"id":3919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"mutability":"mutable","name":"set","nameLocation":"2267:3:21","nodeType":"VariableDeclaration","scope":3954,"src":"2255:15:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3915,"nodeType":"UserDefinedTypeName","pathNode":{"id":3914,"name":"Set","nameLocations":["2255:3:21"],"nodeType":"IdentifierPath","referencedDeclaration":3912,"src":"2255:3:21"},"referencedDeclaration":3912,"src":"2255:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":3918,"mutability":"mutable","name":"value","nameLocation":"2280:5:21","nodeType":"VariableDeclaration","scope":3954,"src":"2272:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3917,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2272:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2254:32:21"},"returnParameters":{"id":3922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3921,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3954,"src":"2304:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3920,"name":"bool","nodeType":"ElementaryTypeName","src":"2304:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2303:6:21"},"scope":4514,"src":"2241:406:21","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4037,"nodeType":"Block","src":"2887:1296:21","statements":[{"assignments":[3966],"declarations":[{"constant":false,"id":3966,"mutability":"mutable","name":"position","nameLocation":"2999:8:21","nodeType":"VariableDeclaration","scope":4037,"src":"2991:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3965,"name":"uint256","nodeType":"ElementaryTypeName","src":"2991:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3971,"initialValue":{"baseExpression":{"expression":{"id":3967,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"3010:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3968,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3014:10:21","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3911,"src":"3010:14:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3970,"indexExpression":{"id":3969,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3960,"src":"3025:5:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3010:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2991:40:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3972,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3966,"src":"3046:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3058:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3046:13:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4035,"nodeType":"Block","src":"4140:37:21","statements":[{"expression":{"hexValue":"66616c7365","id":4033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4161:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3964,"id":4034,"nodeType":"Return","src":"4154:12:21"}]},"id":4036,"nodeType":"IfStatement","src":"3042:1135:21","trueBody":{"id":4032,"nodeType":"Block","src":"3061:1073:21","statements":[{"assignments":[3976],"declarations":[{"constant":false,"id":3976,"mutability":"mutable","name":"valueIndex","nameLocation":"3421:10:21","nodeType":"VariableDeclaration","scope":4032,"src":"3413:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3975,"name":"uint256","nodeType":"ElementaryTypeName","src":"3413:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3980,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3977,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3966,"src":"3434:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3445:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3434:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3413:33:21"},{"assignments":[3982],"declarations":[{"constant":false,"id":3982,"mutability":"mutable","name":"lastIndex","nameLocation":"3468:9:21","nodeType":"VariableDeclaration","scope":4032,"src":"3460:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3981,"name":"uint256","nodeType":"ElementaryTypeName","src":"3460:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3988,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3983,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"3480:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3984,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3484:7:21","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3907,"src":"3480:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3492:6:21","memberName":"length","nodeType":"MemberAccess","src":"3480:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3501:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3480:22:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3460:42:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3989,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"3521:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3990,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"3535:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3521:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4016,"nodeType":"IfStatement","src":"3517:378:21","trueBody":{"id":4015,"nodeType":"Block","src":"3546:349:21","statements":[{"assignments":[3993],"declarations":[{"constant":false,"id":3993,"mutability":"mutable","name":"lastValue","nameLocation":"3572:9:21","nodeType":"VariableDeclaration","scope":4015,"src":"3564:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3992,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3998,"initialValue":{"baseExpression":{"expression":{"id":3994,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"3584:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3995,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3588:7:21","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3907,"src":"3584:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3997,"indexExpression":{"id":3996,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"3596:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3584:22:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3564:42:21"},{"expression":{"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3999,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"3705:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4002,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3709:7:21","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3907,"src":"3705:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4003,"indexExpression":{"id":4001,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"3717:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3705:23:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4004,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3993,"src":"3731:9:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3705:35:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4006,"nodeType":"ExpressionStatement","src":"3705:35:21"},{"expression":{"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4007,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"3844:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4010,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3848:10:21","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3911,"src":"3844:14:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4011,"indexExpression":{"id":4009,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3993,"src":"3859:9:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3844:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4012,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3966,"src":"3872:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3844:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4014,"nodeType":"ExpressionStatement","src":"3844:36:21"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":4017,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"3973:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4020,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3977:7:21","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3907,"src":"3973:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3985:3:21","memberName":"pop","nodeType":"MemberAccess","src":"3973:15:21","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":4022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3973:17:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4023,"nodeType":"ExpressionStatement","src":"3973:17:21"},{"expression":{"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4069:28:21","subExpression":{"baseExpression":{"expression":{"id":4024,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"4076:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4025,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4080:10:21","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3911,"src":"4076:14:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4027,"indexExpression":{"id":4026,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3960,"src":"4091:5:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4076:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4029,"nodeType":"ExpressionStatement","src":"4069:28:21"},{"expression":{"hexValue":"74727565","id":4030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4119:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3964,"id":4031,"nodeType":"Return","src":"4112:11:21"}]}}]},"documentation":{"id":3955,"nodeType":"StructuredDocumentation","src":"2653:157:21","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4038,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2824:7:21","nodeType":"FunctionDefinition","parameters":{"id":3961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3958,"mutability":"mutable","name":"set","nameLocation":"2844:3:21","nodeType":"VariableDeclaration","scope":4038,"src":"2832:15:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3957,"nodeType":"UserDefinedTypeName","pathNode":{"id":3956,"name":"Set","nameLocations":["2832:3:21"],"nodeType":"IdentifierPath","referencedDeclaration":3912,"src":"2832:3:21"},"referencedDeclaration":3912,"src":"2832:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":3960,"mutability":"mutable","name":"value","nameLocation":"2857:5:21","nodeType":"VariableDeclaration","scope":4038,"src":"2849:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2849:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2831:32:21"},"returnParameters":{"id":3964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4038,"src":"2881:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3962,"name":"bool","nodeType":"ElementaryTypeName","src":"2881:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2880:6:21"},"scope":4514,"src":"2815:1368:21","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4056,"nodeType":"Block","src":"4343:50:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":4049,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"4360:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4050,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4364:10:21","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3911,"src":"4360:14:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4052,"indexExpression":{"id":4051,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4044,"src":"4375:5:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4360:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4385:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4360:26:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4048,"id":4055,"nodeType":"Return","src":"4353:33:21"}]},"documentation":{"id":4039,"nodeType":"StructuredDocumentation","src":"4189:70:21","text":" @dev Returns true if the value is in the set. O(1)."},"id":4057,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4273:9:21","nodeType":"FunctionDefinition","parameters":{"id":4045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4042,"mutability":"mutable","name":"set","nameLocation":"4295:3:21","nodeType":"VariableDeclaration","scope":4057,"src":"4283:15:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4041,"nodeType":"UserDefinedTypeName","pathNode":{"id":4040,"name":"Set","nameLocations":["4283:3:21"],"nodeType":"IdentifierPath","referencedDeclaration":3912,"src":"4283:3:21"},"referencedDeclaration":3912,"src":"4283:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4044,"mutability":"mutable","name":"value","nameLocation":"4308:5:21","nodeType":"VariableDeclaration","scope":4057,"src":"4300:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4043,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4300:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4282:32:21"},"returnParameters":{"id":4048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4047,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4057,"src":"4337:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4046,"name":"bool","nodeType":"ElementaryTypeName","src":"4337:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4336:6:21"},"scope":4514,"src":"4264:129:21","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4070,"nodeType":"Block","src":"4539:42:21","statements":[{"expression":{"expression":{"expression":{"id":4066,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"4556:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4067,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4560:7:21","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3907,"src":"4556:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4568:6:21","memberName":"length","nodeType":"MemberAccess","src":"4556:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4065,"id":4069,"nodeType":"Return","src":"4549:25:21"}]},"documentation":{"id":4058,"nodeType":"StructuredDocumentation","src":"4399:70:21","text":" @dev Returns the number of values on the set. O(1)."},"id":4071,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4483:7:21","nodeType":"FunctionDefinition","parameters":{"id":4062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4061,"mutability":"mutable","name":"set","nameLocation":"4503:3:21","nodeType":"VariableDeclaration","scope":4071,"src":"4491:15:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4060,"nodeType":"UserDefinedTypeName","pathNode":{"id":4059,"name":"Set","nameLocations":["4491:3:21"],"nodeType":"IdentifierPath","referencedDeclaration":3912,"src":"4491:3:21"},"referencedDeclaration":3912,"src":"4491:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4490:17:21"},"returnParameters":{"id":4065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4071,"src":"4530:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4063,"name":"uint256","nodeType":"ElementaryTypeName","src":"4530:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4529:9:21"},"scope":4514,"src":"4474:107:21","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4087,"nodeType":"Block","src":"4999:42:21","statements":[{"expression":{"baseExpression":{"expression":{"id":4082,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"5016:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4083,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5020:7:21","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3907,"src":"5016:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4085,"indexExpression":{"id":4084,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"5028:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5016:18:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4081,"id":4086,"nodeType":"Return","src":"5009:25:21"}]},"documentation":{"id":4072,"nodeType":"StructuredDocumentation","src":"4587:331:21","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4088,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4932:3:21","nodeType":"FunctionDefinition","parameters":{"id":4078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4075,"mutability":"mutable","name":"set","nameLocation":"4948:3:21","nodeType":"VariableDeclaration","scope":4088,"src":"4936:15:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4074,"nodeType":"UserDefinedTypeName","pathNode":{"id":4073,"name":"Set","nameLocations":["4936:3:21"],"nodeType":"IdentifierPath","referencedDeclaration":3912,"src":"4936:3:21"},"referencedDeclaration":3912,"src":"4936:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4077,"mutability":"mutable","name":"index","nameLocation":"4961:5:21","nodeType":"VariableDeclaration","scope":4088,"src":"4953:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4076,"name":"uint256","nodeType":"ElementaryTypeName","src":"4953:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4935:32:21"},"returnParameters":{"id":4081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4080,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4088,"src":"4990:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4079,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4990:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4989:9:21"},"scope":4514,"src":"4923:118:21","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4101,"nodeType":"Block","src":"5655:35:21","statements":[{"expression":{"expression":{"id":4098,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4092,"src":"5672:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4099,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5676:7:21","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3907,"src":"5672:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":4097,"id":4100,"nodeType":"Return","src":"5665:18:21"}]},"documentation":{"id":4089,"nodeType":"StructuredDocumentation","src":"5047:529:21","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4102,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5590:7:21","nodeType":"FunctionDefinition","parameters":{"id":4093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4092,"mutability":"mutable","name":"set","nameLocation":"5610:3:21","nodeType":"VariableDeclaration","scope":4102,"src":"5598:15:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4091,"nodeType":"UserDefinedTypeName","pathNode":{"id":4090,"name":"Set","nameLocations":["5598:3:21"],"nodeType":"IdentifierPath","referencedDeclaration":3912,"src":"5598:3:21"},"referencedDeclaration":3912,"src":"5598:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"5597:17:21"},"returnParameters":{"id":4097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4096,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4102,"src":"5637:16:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4094,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5637:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4095,"nodeType":"ArrayTypeName","src":"5637:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5636:18:21"},"scope":4514,"src":"5581:109:21","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":4106,"members":[{"constant":false,"id":4105,"mutability":"mutable","name":"_inner","nameLocation":"5747:6:21","nodeType":"VariableDeclaration","scope":4106,"src":"5743:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4104,"nodeType":"UserDefinedTypeName","pathNode":{"id":4103,"name":"Set","nameLocations":["5743:3:21"],"nodeType":"IdentifierPath","referencedDeclaration":3912,"src":"5743:3:21"},"referencedDeclaration":3912,"src":"5743:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5722:10:21","nodeType":"StructDefinition","scope":4514,"src":"5715:45:21","visibility":"public"},{"body":{"id":4123,"nodeType":"Block","src":"6006:47:21","statements":[{"expression":{"arguments":[{"expression":{"id":4118,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"6028:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4119,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6032:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4105,"src":"6028:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4112,"src":"6040:5:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4117,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3954,"src":"6023:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3912_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6023:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4116,"id":4122,"nodeType":"Return","src":"6016:30:21"}]},"documentation":{"id":4107,"nodeType":"StructuredDocumentation","src":"5766:159:21","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4124,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5939:3:21","nodeType":"FunctionDefinition","parameters":{"id":4113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4110,"mutability":"mutable","name":"set","nameLocation":"5962:3:21","nodeType":"VariableDeclaration","scope":4124,"src":"5943:22:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4109,"nodeType":"UserDefinedTypeName","pathNode":{"id":4108,"name":"Bytes32Set","nameLocations":["5943:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":4106,"src":"5943:10:21"},"referencedDeclaration":4106,"src":"5943:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4112,"mutability":"mutable","name":"value","nameLocation":"5975:5:21","nodeType":"VariableDeclaration","scope":4124,"src":"5967:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4111,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5967:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5942:39:21"},"returnParameters":{"id":4116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4124,"src":"6000:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4114,"name":"bool","nodeType":"ElementaryTypeName","src":"6000:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5999:6:21"},"scope":4514,"src":"5930:123:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4141,"nodeType":"Block","src":"6300:50:21","statements":[{"expression":{"arguments":[{"expression":{"id":4136,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"6325:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4137,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6329:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4105,"src":"6325:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4138,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4130,"src":"6337:5:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4135,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"6317:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3912_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6317:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4134,"id":4140,"nodeType":"Return","src":"6310:33:21"}]},"documentation":{"id":4125,"nodeType":"StructuredDocumentation","src":"6059:157:21","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4142,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6230:6:21","nodeType":"FunctionDefinition","parameters":{"id":4131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4128,"mutability":"mutable","name":"set","nameLocation":"6256:3:21","nodeType":"VariableDeclaration","scope":4142,"src":"6237:22:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4127,"nodeType":"UserDefinedTypeName","pathNode":{"id":4126,"name":"Bytes32Set","nameLocations":["6237:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":4106,"src":"6237:10:21"},"referencedDeclaration":4106,"src":"6237:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4130,"mutability":"mutable","name":"value","nameLocation":"6269:5:21","nodeType":"VariableDeclaration","scope":4142,"src":"6261:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4129,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6261:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6236:39:21"},"returnParameters":{"id":4134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4133,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4142,"src":"6294:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4132,"name":"bool","nodeType":"ElementaryTypeName","src":"6294:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6293:6:21"},"scope":4514,"src":"6221:129:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4159,"nodeType":"Block","src":"6517:52:21","statements":[{"expression":{"arguments":[{"expression":{"id":4154,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"6544:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4155,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6548:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4105,"src":"6544:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4156,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4148,"src":"6556:5:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4153,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"6534:9:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6534:28:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4152,"id":4158,"nodeType":"Return","src":"6527:35:21"}]},"documentation":{"id":4143,"nodeType":"StructuredDocumentation","src":"6356:70:21","text":" @dev Returns true if the value is in the set. O(1)."},"id":4160,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6440:8:21","nodeType":"FunctionDefinition","parameters":{"id":4149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4146,"mutability":"mutable","name":"set","nameLocation":"6468:3:21","nodeType":"VariableDeclaration","scope":4160,"src":"6449:22:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4145,"nodeType":"UserDefinedTypeName","pathNode":{"id":4144,"name":"Bytes32Set","nameLocations":["6449:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":4106,"src":"6449:10:21"},"referencedDeclaration":4106,"src":"6449:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4148,"mutability":"mutable","name":"value","nameLocation":"6481:5:21","nodeType":"VariableDeclaration","scope":4160,"src":"6473:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4147,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6473:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6448:39:21"},"returnParameters":{"id":4152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4151,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4160,"src":"6511:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4150,"name":"bool","nodeType":"ElementaryTypeName","src":"6511:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6510:6:21"},"scope":4514,"src":"6431:138:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4174,"nodeType":"Block","src":"6722:43:21","statements":[{"expression":{"arguments":[{"expression":{"id":4170,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"6747:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4171,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6751:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4105,"src":"6747:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4169,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"6739:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":4172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6739:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4168,"id":4173,"nodeType":"Return","src":"6732:26:21"}]},"documentation":{"id":4161,"nodeType":"StructuredDocumentation","src":"6575:70:21","text":" @dev Returns the number of values in the set. O(1)."},"id":4175,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6659:6:21","nodeType":"FunctionDefinition","parameters":{"id":4165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4164,"mutability":"mutable","name":"set","nameLocation":"6685:3:21","nodeType":"VariableDeclaration","scope":4175,"src":"6666:22:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4163,"nodeType":"UserDefinedTypeName","pathNode":{"id":4162,"name":"Bytes32Set","nameLocations":["6666:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":4106,"src":"6666:10:21"},"referencedDeclaration":4106,"src":"6666:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"6665:24:21"},"returnParameters":{"id":4168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4167,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4175,"src":"6713:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4166,"name":"uint256","nodeType":"ElementaryTypeName","src":"6713:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6712:9:21"},"scope":4514,"src":"6650:115:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4192,"nodeType":"Block","src":"7190:46:21","statements":[{"expression":{"arguments":[{"expression":{"id":4187,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4179,"src":"7211:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4188,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7215:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4105,"src":"7211:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4189,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4181,"src":"7223:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4186,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4088,"src":"7207:3:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7207:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4185,"id":4191,"nodeType":"Return","src":"7200:29:21"}]},"documentation":{"id":4176,"nodeType":"StructuredDocumentation","src":"6771:331:21","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4193,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7116:2:21","nodeType":"FunctionDefinition","parameters":{"id":4182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4179,"mutability":"mutable","name":"set","nameLocation":"7138:3:21","nodeType":"VariableDeclaration","scope":4193,"src":"7119:22:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4178,"nodeType":"UserDefinedTypeName","pathNode":{"id":4177,"name":"Bytes32Set","nameLocations":["7119:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":4106,"src":"7119:10:21"},"referencedDeclaration":4106,"src":"7119:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4181,"mutability":"mutable","name":"index","nameLocation":"7151:5:21","nodeType":"VariableDeclaration","scope":4193,"src":"7143:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4180,"name":"uint256","nodeType":"ElementaryTypeName","src":"7143:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7118:39:21"},"returnParameters":{"id":4185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4193,"src":"7181:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7181:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7180:9:21"},"scope":4514,"src":"7107:129:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4222,"nodeType":"Block","src":"7857:219:21","statements":[{"assignments":[4207],"declarations":[{"constant":false,"id":4207,"mutability":"mutable","name":"store","nameLocation":"7884:5:21","nodeType":"VariableDeclaration","scope":4222,"src":"7867:22:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4205,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7867:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4206,"nodeType":"ArrayTypeName","src":"7867:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4212,"initialValue":{"arguments":[{"expression":{"id":4209,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"7900:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7904:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4105,"src":"7900:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4208,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"7892:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7892:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7867:44:21"},{"assignments":[4217],"declarations":[{"constant":false,"id":4217,"mutability":"mutable","name":"result","nameLocation":"7938:6:21","nodeType":"VariableDeclaration","scope":4222,"src":"7921:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4215,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7921:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4216,"nodeType":"ArrayTypeName","src":"7921:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4218,"nodeType":"VariableDeclarationStatement","src":"7921:23:21"},{"AST":{"nodeType":"YulBlock","src":"8007:39:21","statements":[{"nodeType":"YulAssignment","src":"8021:15:21","value":{"name":"store","nodeType":"YulIdentifier","src":"8031:5:21"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8021:6:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4217,"isOffset":false,"isSlot":false,"src":"8021:6:21","valueSize":1},{"declaration":4207,"isOffset":false,"isSlot":false,"src":"8031:5:21","valueSize":1}],"id":4219,"nodeType":"InlineAssembly","src":"7998:48:21"},{"expression":{"id":4220,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4217,"src":"8063:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":4202,"id":4221,"nodeType":"Return","src":"8056:13:21"}]},"documentation":{"id":4194,"nodeType":"StructuredDocumentation","src":"7242:529:21","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4223,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7785:6:21","nodeType":"FunctionDefinition","parameters":{"id":4198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4197,"mutability":"mutable","name":"set","nameLocation":"7811:3:21","nodeType":"VariableDeclaration","scope":4223,"src":"7792:22:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4196,"nodeType":"UserDefinedTypeName","pathNode":{"id":4195,"name":"Bytes32Set","nameLocations":["7792:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":4106,"src":"7792:10:21"},"referencedDeclaration":4106,"src":"7792:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4106_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"7791:24:21"},"returnParameters":{"id":4202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4223,"src":"7839:16:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4199,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7839:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4200,"nodeType":"ArrayTypeName","src":"7839:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7838:18:21"},"scope":4514,"src":"7776:300:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":4227,"members":[{"constant":false,"id":4226,"mutability":"mutable","name":"_inner","nameLocation":"8133:6:21","nodeType":"VariableDeclaration","scope":4227,"src":"8129:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4225,"nodeType":"UserDefinedTypeName","pathNode":{"id":4224,"name":"Set","nameLocations":["8129:3:21"],"nodeType":"IdentifierPath","referencedDeclaration":3912,"src":"8129:3:21"},"referencedDeclaration":3912,"src":"8129:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8108:10:21","nodeType":"StructDefinition","scope":4514,"src":"8101:45:21","visibility":"public"},{"body":{"id":4253,"nodeType":"Block","src":"8392:74:21","statements":[{"expression":{"arguments":[{"expression":{"id":4239,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4231,"src":"8414:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8418:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4226,"src":"8414:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4247,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"8450:5:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8442:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4245,"name":"uint160","nodeType":"ElementaryTypeName","src":"8442:7:21","typeDescriptions":{}}},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8442:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8434:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4243,"name":"uint256","nodeType":"ElementaryTypeName","src":"8434:7:21","typeDescriptions":{}}},"id":4249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8434:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8426:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4241,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8426:7:21","typeDescriptions":{}}},"id":4250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8426:32:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4238,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3954,"src":"8409:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3912_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8409:50:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4237,"id":4252,"nodeType":"Return","src":"8402:57:21"}]},"documentation":{"id":4228,"nodeType":"StructuredDocumentation","src":"8152:159:21","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4254,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8325:3:21","nodeType":"FunctionDefinition","parameters":{"id":4234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4231,"mutability":"mutable","name":"set","nameLocation":"8348:3:21","nodeType":"VariableDeclaration","scope":4254,"src":"8329:22:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4230,"nodeType":"UserDefinedTypeName","pathNode":{"id":4229,"name":"AddressSet","nameLocations":["8329:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":4227,"src":"8329:10:21"},"referencedDeclaration":4227,"src":"8329:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4233,"mutability":"mutable","name":"value","nameLocation":"8361:5:21","nodeType":"VariableDeclaration","scope":4254,"src":"8353:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4232,"name":"address","nodeType":"ElementaryTypeName","src":"8353:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8328:39:21"},"returnParameters":{"id":4237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4254,"src":"8386:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4235,"name":"bool","nodeType":"ElementaryTypeName","src":"8386:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8385:6:21"},"scope":4514,"src":"8316:150:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4280,"nodeType":"Block","src":"8713:77:21","statements":[{"expression":{"arguments":[{"expression":{"id":4266,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4258,"src":"8738:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4267,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8742:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4226,"src":"8738:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4274,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"8774:5:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8766:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4272,"name":"uint160","nodeType":"ElementaryTypeName","src":"8766:7:21","typeDescriptions":{}}},"id":4275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8766:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8758:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4270,"name":"uint256","nodeType":"ElementaryTypeName","src":"8758:7:21","typeDescriptions":{}}},"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8758:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8750:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8750:7:21","typeDescriptions":{}}},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8750:32:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4265,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"8730:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3912_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8730:53:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4264,"id":4279,"nodeType":"Return","src":"8723:60:21"}]},"documentation":{"id":4255,"nodeType":"StructuredDocumentation","src":"8472:157:21","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4281,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8643:6:21","nodeType":"FunctionDefinition","parameters":{"id":4261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4258,"mutability":"mutable","name":"set","nameLocation":"8669:3:21","nodeType":"VariableDeclaration","scope":4281,"src":"8650:22:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4257,"nodeType":"UserDefinedTypeName","pathNode":{"id":4256,"name":"AddressSet","nameLocations":["8650:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":4227,"src":"8650:10:21"},"referencedDeclaration":4227,"src":"8650:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4260,"mutability":"mutable","name":"value","nameLocation":"8682:5:21","nodeType":"VariableDeclaration","scope":4281,"src":"8674:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4259,"name":"address","nodeType":"ElementaryTypeName","src":"8674:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8649:39:21"},"returnParameters":{"id":4264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4281,"src":"8707:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4262,"name":"bool","nodeType":"ElementaryTypeName","src":"8707:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8706:6:21"},"scope":4514,"src":"8634:156:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4307,"nodeType":"Block","src":"8957:79:21","statements":[{"expression":{"arguments":[{"expression":{"id":4293,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"8984:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4294,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8988:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4226,"src":"8984:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4301,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"9020:5:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4300,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9012:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4299,"name":"uint160","nodeType":"ElementaryTypeName","src":"9012:7:21","typeDescriptions":{}}},"id":4302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9012:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9004:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4297,"name":"uint256","nodeType":"ElementaryTypeName","src":"9004:7:21","typeDescriptions":{}}},"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9004:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4296,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8996:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8996:7:21","typeDescriptions":{}}},"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8996:32:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4292,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"8974:9:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8974:55:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4291,"id":4306,"nodeType":"Return","src":"8967:62:21"}]},"documentation":{"id":4282,"nodeType":"StructuredDocumentation","src":"8796:70:21","text":" @dev Returns true if the value is in the set. O(1)."},"id":4308,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8880:8:21","nodeType":"FunctionDefinition","parameters":{"id":4288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4285,"mutability":"mutable","name":"set","nameLocation":"8908:3:21","nodeType":"VariableDeclaration","scope":4308,"src":"8889:22:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4284,"nodeType":"UserDefinedTypeName","pathNode":{"id":4283,"name":"AddressSet","nameLocations":["8889:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":4227,"src":"8889:10:21"},"referencedDeclaration":4227,"src":"8889:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4287,"mutability":"mutable","name":"value","nameLocation":"8921:5:21","nodeType":"VariableDeclaration","scope":4308,"src":"8913:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4286,"name":"address","nodeType":"ElementaryTypeName","src":"8913:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8888:39:21"},"returnParameters":{"id":4291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4308,"src":"8951:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4289,"name":"bool","nodeType":"ElementaryTypeName","src":"8951:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8950:6:21"},"scope":4514,"src":"8871:165:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4322,"nodeType":"Block","src":"9189:43:21","statements":[{"expression":{"arguments":[{"expression":{"id":4318,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4312,"src":"9214:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4319,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9218:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4226,"src":"9214:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4317,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"9206:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9206:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4316,"id":4321,"nodeType":"Return","src":"9199:26:21"}]},"documentation":{"id":4309,"nodeType":"StructuredDocumentation","src":"9042:70:21","text":" @dev Returns the number of values in the set. O(1)."},"id":4323,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9126:6:21","nodeType":"FunctionDefinition","parameters":{"id":4313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4312,"mutability":"mutable","name":"set","nameLocation":"9152:3:21","nodeType":"VariableDeclaration","scope":4323,"src":"9133:22:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4311,"nodeType":"UserDefinedTypeName","pathNode":{"id":4310,"name":"AddressSet","nameLocations":["9133:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":4227,"src":"9133:10:21"},"referencedDeclaration":4227,"src":"9133:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"9132:24:21"},"returnParameters":{"id":4316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4323,"src":"9180:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4314,"name":"uint256","nodeType":"ElementaryTypeName","src":"9180:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9179:9:21"},"scope":4514,"src":"9117:115:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4349,"nodeType":"Block","src":"9657:73:21","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":4341,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4327,"src":"9702:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4342,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9706:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4226,"src":"9702:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4343,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4329,"src":"9714:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4340,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4088,"src":"9698:3:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9698:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9690:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4338,"name":"uint256","nodeType":"ElementaryTypeName","src":"9690:7:21","typeDescriptions":{}}},"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9690:31:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9682:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4336,"name":"uint160","nodeType":"ElementaryTypeName","src":"9682:7:21","typeDescriptions":{}}},"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9682:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4335,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9674:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4334,"name":"address","nodeType":"ElementaryTypeName","src":"9674:7:21","typeDescriptions":{}}},"id":4347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9674:49:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4333,"id":4348,"nodeType":"Return","src":"9667:56:21"}]},"documentation":{"id":4324,"nodeType":"StructuredDocumentation","src":"9238:331:21","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4350,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9583:2:21","nodeType":"FunctionDefinition","parameters":{"id":4330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4327,"mutability":"mutable","name":"set","nameLocation":"9605:3:21","nodeType":"VariableDeclaration","scope":4350,"src":"9586:22:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4326,"nodeType":"UserDefinedTypeName","pathNode":{"id":4325,"name":"AddressSet","nameLocations":["9586:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":4227,"src":"9586:10:21"},"referencedDeclaration":4227,"src":"9586:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4329,"mutability":"mutable","name":"index","nameLocation":"9618:5:21","nodeType":"VariableDeclaration","scope":4350,"src":"9610:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4328,"name":"uint256","nodeType":"ElementaryTypeName","src":"9610:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9585:39:21"},"returnParameters":{"id":4333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4350,"src":"9648:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4331,"name":"address","nodeType":"ElementaryTypeName","src":"9648:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9647:9:21"},"scope":4514,"src":"9574:156:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4379,"nodeType":"Block","src":"10351:219:21","statements":[{"assignments":[4364],"declarations":[{"constant":false,"id":4364,"mutability":"mutable","name":"store","nameLocation":"10378:5:21","nodeType":"VariableDeclaration","scope":4379,"src":"10361:22:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4362,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10361:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4363,"nodeType":"ArrayTypeName","src":"10361:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4369,"initialValue":{"arguments":[{"expression":{"id":4366,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"10394:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4367,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10398:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4226,"src":"10394:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4365,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"10386:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10386:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10361:44:21"},{"assignments":[4374],"declarations":[{"constant":false,"id":4374,"mutability":"mutable","name":"result","nameLocation":"10432:6:21","nodeType":"VariableDeclaration","scope":4379,"src":"10415:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4372,"name":"address","nodeType":"ElementaryTypeName","src":"10415:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4373,"nodeType":"ArrayTypeName","src":"10415:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":4375,"nodeType":"VariableDeclarationStatement","src":"10415:23:21"},{"AST":{"nodeType":"YulBlock","src":"10501:39:21","statements":[{"nodeType":"YulAssignment","src":"10515:15:21","value":{"name":"store","nodeType":"YulIdentifier","src":"10525:5:21"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10515:6:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4374,"isOffset":false,"isSlot":false,"src":"10515:6:21","valueSize":1},{"declaration":4364,"isOffset":false,"isSlot":false,"src":"10525:5:21","valueSize":1}],"id":4376,"nodeType":"InlineAssembly","src":"10492:48:21"},{"expression":{"id":4377,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"10557:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":4359,"id":4378,"nodeType":"Return","src":"10550:13:21"}]},"documentation":{"id":4351,"nodeType":"StructuredDocumentation","src":"9736:529:21","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4380,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10279:6:21","nodeType":"FunctionDefinition","parameters":{"id":4355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4354,"mutability":"mutable","name":"set","nameLocation":"10305:3:21","nodeType":"VariableDeclaration","scope":4380,"src":"10286:22:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4353,"nodeType":"UserDefinedTypeName","pathNode":{"id":4352,"name":"AddressSet","nameLocations":["10286:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":4227,"src":"10286:10:21"},"referencedDeclaration":4227,"src":"10286:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4227_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"10285:24:21"},"returnParameters":{"id":4359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4380,"src":"10333:16:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4356,"name":"address","nodeType":"ElementaryTypeName","src":"10333:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4357,"nodeType":"ArrayTypeName","src":"10333:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10332:18:21"},"scope":4514,"src":"10270:300:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":4384,"members":[{"constant":false,"id":4383,"mutability":"mutable","name":"_inner","nameLocation":"10621:6:21","nodeType":"VariableDeclaration","scope":4384,"src":"10617:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4382,"nodeType":"UserDefinedTypeName","pathNode":{"id":4381,"name":"Set","nameLocations":["10617:3:21"],"nodeType":"IdentifierPath","referencedDeclaration":3912,"src":"10617:3:21"},"referencedDeclaration":3912,"src":"10617:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10599:7:21","nodeType":"StructDefinition","scope":4514,"src":"10592:42:21","visibility":"public"},{"body":{"id":4404,"nodeType":"Block","src":"10877:56:21","statements":[{"expression":{"arguments":[{"expression":{"id":4396,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"10899:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4397,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10903:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4383,"src":"10899:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":4400,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4390,"src":"10919:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10911:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4398,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10911:7:21","typeDescriptions":{}}},"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10911:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4395,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3954,"src":"10894:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3912_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10894:32:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4394,"id":4403,"nodeType":"Return","src":"10887:39:21"}]},"documentation":{"id":4385,"nodeType":"StructuredDocumentation","src":"10640:159:21","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4405,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10813:3:21","nodeType":"FunctionDefinition","parameters":{"id":4391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4388,"mutability":"mutable","name":"set","nameLocation":"10833:3:21","nodeType":"VariableDeclaration","scope":4405,"src":"10817:19:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4387,"nodeType":"UserDefinedTypeName","pathNode":{"id":4386,"name":"UintSet","nameLocations":["10817:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":4384,"src":"10817:7:21"},"referencedDeclaration":4384,"src":"10817:7:21","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4390,"mutability":"mutable","name":"value","nameLocation":"10846:5:21","nodeType":"VariableDeclaration","scope":4405,"src":"10838:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4389,"name":"uint256","nodeType":"ElementaryTypeName","src":"10838:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10816:36:21"},"returnParameters":{"id":4394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4405,"src":"10871:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4392,"name":"bool","nodeType":"ElementaryTypeName","src":"10871:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10870:6:21"},"scope":4514,"src":"10804:129:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4425,"nodeType":"Block","src":"11177:59:21","statements":[{"expression":{"arguments":[{"expression":{"id":4417,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4409,"src":"11202:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4418,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11206:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4383,"src":"11202:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":4421,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4411,"src":"11222:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11214:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11214:7:21","typeDescriptions":{}}},"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11214:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4416,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"11194:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3912_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11194:35:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4415,"id":4424,"nodeType":"Return","src":"11187:42:21"}]},"documentation":{"id":4406,"nodeType":"StructuredDocumentation","src":"10939:157:21","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4426,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11110:6:21","nodeType":"FunctionDefinition","parameters":{"id":4412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4409,"mutability":"mutable","name":"set","nameLocation":"11133:3:21","nodeType":"VariableDeclaration","scope":4426,"src":"11117:19:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4408,"nodeType":"UserDefinedTypeName","pathNode":{"id":4407,"name":"UintSet","nameLocations":["11117:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":4384,"src":"11117:7:21"},"referencedDeclaration":4384,"src":"11117:7:21","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4411,"mutability":"mutable","name":"value","nameLocation":"11146:5:21","nodeType":"VariableDeclaration","scope":4426,"src":"11138:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4410,"name":"uint256","nodeType":"ElementaryTypeName","src":"11138:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11116:36:21"},"returnParameters":{"id":4415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4426,"src":"11171:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4413,"name":"bool","nodeType":"ElementaryTypeName","src":"11171:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11170:6:21"},"scope":4514,"src":"11101:135:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4446,"nodeType":"Block","src":"11400:61:21","statements":[{"expression":{"arguments":[{"expression":{"id":4438,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4430,"src":"11427:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4439,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11431:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4383,"src":"11427:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":4442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4432,"src":"11447:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11439:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11439:7:21","typeDescriptions":{}}},"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11439:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4437,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"11417:9:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11417:37:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4436,"id":4445,"nodeType":"Return","src":"11410:44:21"}]},"documentation":{"id":4427,"nodeType":"StructuredDocumentation","src":"11242:70:21","text":" @dev Returns true if the value is in the set. O(1)."},"id":4447,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11326:8:21","nodeType":"FunctionDefinition","parameters":{"id":4433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4430,"mutability":"mutable","name":"set","nameLocation":"11351:3:21","nodeType":"VariableDeclaration","scope":4447,"src":"11335:19:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4429,"nodeType":"UserDefinedTypeName","pathNode":{"id":4428,"name":"UintSet","nameLocations":["11335:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":4384,"src":"11335:7:21"},"referencedDeclaration":4384,"src":"11335:7:21","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4432,"mutability":"mutable","name":"value","nameLocation":"11364:5:21","nodeType":"VariableDeclaration","scope":4447,"src":"11356:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4431,"name":"uint256","nodeType":"ElementaryTypeName","src":"11356:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11334:36:21"},"returnParameters":{"id":4436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4447,"src":"11394:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4434,"name":"bool","nodeType":"ElementaryTypeName","src":"11394:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11393:6:21"},"scope":4514,"src":"11317:144:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4461,"nodeType":"Block","src":"11611:43:21","statements":[{"expression":{"arguments":[{"expression":{"id":4457,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4451,"src":"11636:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11640:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4383,"src":"11636:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4456,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"11628:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":4459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11628:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4455,"id":4460,"nodeType":"Return","src":"11621:26:21"}]},"documentation":{"id":4448,"nodeType":"StructuredDocumentation","src":"11467:70:21","text":" @dev Returns the number of values in the set. O(1)."},"id":4462,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11551:6:21","nodeType":"FunctionDefinition","parameters":{"id":4452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4451,"mutability":"mutable","name":"set","nameLocation":"11574:3:21","nodeType":"VariableDeclaration","scope":4462,"src":"11558:19:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4450,"nodeType":"UserDefinedTypeName","pathNode":{"id":4449,"name":"UintSet","nameLocations":["11558:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":4384,"src":"11558:7:21"},"referencedDeclaration":4384,"src":"11558:7:21","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"11557:21:21"},"returnParameters":{"id":4455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4462,"src":"11602:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4453,"name":"uint256","nodeType":"ElementaryTypeName","src":"11602:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11601:9:21"},"scope":4514,"src":"11542:112:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4482,"nodeType":"Block","src":"12076:55:21","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4476,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4466,"src":"12105:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4477,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12109:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4383,"src":"12105:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4478,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4468,"src":"12117:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4475,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4088,"src":"12101:3:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12101:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12093:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4473,"name":"uint256","nodeType":"ElementaryTypeName","src":"12093:7:21","typeDescriptions":{}}},"id":4480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12093:31:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4472,"id":4481,"nodeType":"Return","src":"12086:38:21"}]},"documentation":{"id":4463,"nodeType":"StructuredDocumentation","src":"11660:331:21","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4483,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"12005:2:21","nodeType":"FunctionDefinition","parameters":{"id":4469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4466,"mutability":"mutable","name":"set","nameLocation":"12024:3:21","nodeType":"VariableDeclaration","scope":4483,"src":"12008:19:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4465,"nodeType":"UserDefinedTypeName","pathNode":{"id":4464,"name":"UintSet","nameLocations":["12008:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":4384,"src":"12008:7:21"},"referencedDeclaration":4384,"src":"12008:7:21","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4468,"mutability":"mutable","name":"index","nameLocation":"12037:5:21","nodeType":"VariableDeclaration","scope":4483,"src":"12029:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4467,"name":"uint256","nodeType":"ElementaryTypeName","src":"12029:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12007:36:21"},"returnParameters":{"id":4472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4483,"src":"12067:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4470,"name":"uint256","nodeType":"ElementaryTypeName","src":"12067:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12066:9:21"},"scope":4514,"src":"11996:135:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4512,"nodeType":"Block","src":"12749:219:21","statements":[{"assignments":[4497],"declarations":[{"constant":false,"id":4497,"mutability":"mutable","name":"store","nameLocation":"12776:5:21","nodeType":"VariableDeclaration","scope":4512,"src":"12759:22:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4495,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12759:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4496,"nodeType":"ArrayTypeName","src":"12759:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4502,"initialValue":{"arguments":[{"expression":{"id":4499,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4487,"src":"12792:3:21","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4500,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12796:6:21","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4383,"src":"12792:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3912_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4498,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"12784:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3912_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12784:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12759:44:21"},{"assignments":[4507],"declarations":[{"constant":false,"id":4507,"mutability":"mutable","name":"result","nameLocation":"12830:6:21","nodeType":"VariableDeclaration","scope":4512,"src":"12813:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4505,"name":"uint256","nodeType":"ElementaryTypeName","src":"12813:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4506,"nodeType":"ArrayTypeName","src":"12813:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4508,"nodeType":"VariableDeclarationStatement","src":"12813:23:21"},{"AST":{"nodeType":"YulBlock","src":"12899:39:21","statements":[{"nodeType":"YulAssignment","src":"12913:15:21","value":{"name":"store","nodeType":"YulIdentifier","src":"12923:5:21"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12913:6:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4507,"isOffset":false,"isSlot":false,"src":"12913:6:21","valueSize":1},{"declaration":4497,"isOffset":false,"isSlot":false,"src":"12923:5:21","valueSize":1}],"id":4509,"nodeType":"InlineAssembly","src":"12890:48:21"},{"expression":{"id":4510,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4507,"src":"12955:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":4492,"id":4511,"nodeType":"Return","src":"12948:13:21"}]},"documentation":{"id":4484,"nodeType":"StructuredDocumentation","src":"12137:529:21","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4513,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12680:6:21","nodeType":"FunctionDefinition","parameters":{"id":4488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4487,"mutability":"mutable","name":"set","nameLocation":"12703:3:21","nodeType":"VariableDeclaration","scope":4513,"src":"12687:19:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4486,"nodeType":"UserDefinedTypeName","pathNode":{"id":4485,"name":"UintSet","nameLocations":["12687:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":4384,"src":"12687:7:21"},"referencedDeclaration":4384,"src":"12687:7:21","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4384_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"12686:21:21"},"returnParameters":{"id":4492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4491,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4513,"src":"12731:16:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4489,"name":"uint256","nodeType":"ElementaryTypeName","src":"12731:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4490,"nodeType":"ArrayTypeName","src":"12731:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12730:18:21"},"scope":4514,"src":"12671:297:21","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4515,"src":"1330:11640:21","usedErrors":[],"usedEvents":[]}],"src":"205:12766:21"},"id":21},"contracts/PalmNFT.sol":{"ast":{"absolutePath":"contracts/PalmNFT.sol","exportedSymbols":{"ACL":[4650],"AccessControl":[295],"AccessControlEnumerable":[520],"ERC721":[1724],"ERC721Enumerable":[2243],"ERC721URIStorage":[2369],"EnumerableSet":[4514],"IAccessControlEnumerable":[546],"IERC165":[2742],"IERC4906":[574],"IERC721":[1841],"IERC721Enumerable":[2401],"PalmNFT":[5041],"Strings":[2706]},"id":5042,"nodeType":"SourceUnit","nodes":[{"id":4516,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"0:23:22"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":4517,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5042,"sourceUnit":1842,"src":"25:58:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","id":4518,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5042,"sourceUnit":2370,"src":"85:78:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol","id":4519,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5042,"sourceUnit":2244,"src":"165:78:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol","file":"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol","id":4520,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5042,"sourceUnit":521,"src":"245:79:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4521,"name":"AccessControlEnumerable","nameLocations":["344:23:22"],"nodeType":"IdentifierPath","referencedDeclaration":520,"src":"344:23:22"},"id":4522,"nodeType":"InheritanceSpecifier","src":"344:23:22"}],"canonicalName":"ACL","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4650,"linearizedBaseContracts":[4650,520,295,2730,2742,546,378,2451],"name":"ACL","nameLocation":"337:3:22","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"d5391393","id":4527,"mutability":"constant","name":"MINTER_ROLE","nameLocation":"399:11:22","nodeType":"VariableDeclaration","scope":4650,"src":"375:62:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"375:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d494e5445525f524f4c45","id":4525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"423:13:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","typeString":"literal_string \"MINTER_ROLE\""},"value":"MINTER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","typeString":"literal_string \"MINTER_ROLE\""}],"id":4524,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"413:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"413:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"282c51f3","id":4532,"mutability":"constant","name":"BURNER_ROLE","nameLocation":"468:11:22","nodeType":"VariableDeclaration","scope":4650,"src":"444:62:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4528,"name":"bytes32","nodeType":"ElementaryTypeName","src":"444:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4255524e45525f524f4c45","id":4530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"492:13:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848","typeString":"literal_string \"BURNER_ROLE\""},"value":"BURNER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848","typeString":"literal_string \"BURNER_ROLE\""}],"id":4529,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"482:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"482:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":4544,"nodeType":"Block","src":"537:146:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":4536,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4527,"src":"578:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4537,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"591:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"595:6:22","memberName":"sender","nodeType":"MemberAccess","src":"591:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4535,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"570:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"570:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c657220646f6573206e6f74206861732061204d494e5445525f524f4c45","id":4540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"617:35:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_248274c666e2d1268b0a4d9f789856bf1812587548dc967fd52a8e40e82fea3a","typeString":"literal_string \"Caller does not has a MINTER_ROLE\""},"value":"Caller does not has a MINTER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_248274c666e2d1268b0a4d9f789856bf1812587548dc967fd52a8e40e82fea3a","typeString":"literal_string \"Caller does not has a MINTER_ROLE\""}],"id":4534,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"548:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"548:115:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4542,"nodeType":"ExpressionStatement","src":"548:115:22"},{"id":4543,"nodeType":"PlaceholderStatement","src":"674:1:22"}]},"id":4545,"name":"onlyMinter","nameLocation":"524:10:22","nodeType":"ModifierDefinition","parameters":{"id":4533,"nodeType":"ParameterList","parameters":[],"src":"534:2:22"},"src":"515:168:22","virtual":false,"visibility":"internal"},{"body":{"id":4557,"nodeType":"Block","src":"713:146:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":4549,"name":"BURNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"754:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4550,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"767:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"771:6:22","memberName":"sender","nodeType":"MemberAccess","src":"767:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4548,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"746:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"746:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c657220646f6573206e6f74206861732061204255524e45525f524f4c45","id":4553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"793:35:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_ac37d53b32338a3da21515a93184ffe31335e273ff99abade073a0337c8b1d41","typeString":"literal_string \"Caller does not has a BURNER_ROLE\""},"value":"Caller does not has a BURNER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ac37d53b32338a3da21515a93184ffe31335e273ff99abade073a0337c8b1d41","typeString":"literal_string \"Caller does not has a BURNER_ROLE\""}],"id":4547,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"724:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"724:115:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4555,"nodeType":"ExpressionStatement","src":"724:115:22"},{"id":4556,"nodeType":"PlaceholderStatement","src":"850:1:22"}]},"id":4558,"name":"onlyBurner","nameLocation":"700:10:22","nodeType":"ModifierDefinition","parameters":{"id":4546,"nodeType":"ParameterList","parameters":[],"src":"710:2:22"},"src":"691:168:22","virtual":false,"visibility":"internal"},{"body":{"id":4570,"nodeType":"Block","src":"888:160:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":4562,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"929:18:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4563,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"949:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"953:6:22","memberName":"sender","nodeType":"MemberAccess","src":"949:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4561,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"921:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"921:39:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c657220646f6573206e6f742068617320612044454641554c545f41444d494e5f524f4c45","id":4566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"975:42:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_26a18b82a6f0089994fa1fc7c15d389f66d55b2b42f9d4738227fb927dd79151","typeString":"literal_string \"Caller does not has a DEFAULT_ADMIN_ROLE\""},"value":"Caller does not has a DEFAULT_ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_26a18b82a6f0089994fa1fc7c15d389f66d55b2b42f9d4738227fb927dd79151","typeString":"literal_string \"Caller does not has a DEFAULT_ADMIN_ROLE\""}],"id":4560,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"899:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"899:129:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4568,"nodeType":"ExpressionStatement","src":"899:129:22"},{"id":4569,"nodeType":"PlaceholderStatement","src":"1039:1:22"}]},"id":4571,"name":"onlyAdmin","nameLocation":"876:9:22","nodeType":"ModifierDefinition","parameters":{"id":4559,"nodeType":"ParameterList","parameters":[],"src":"885:2:22"},"src":"867:181:22","virtual":false,"visibility":"internal"},{"body":{"id":4583,"nodeType":"Block","src":"1110:55:22","statements":[{"expression":{"arguments":[{"id":4579,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1131:18:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4580,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4573,"src":"1151:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4578,"name":"grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"1121:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1121:36:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4582,"nodeType":"ExpressionStatement","src":"1121:36:22"}]},"functionSelector":"35bb3e16","id":4584,"implemented":true,"kind":"function","modifiers":[{"id":4576,"kind":"modifierInvocation","modifierName":{"id":4575,"name":"onlyAdmin","nameLocations":["1100:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4571,"src":"1100:9:22"},"nodeType":"ModifierInvocation","src":"1100:9:22"}],"name":"grantAdmin","nameLocation":"1065:10:22","nodeType":"FunctionDefinition","parameters":{"id":4574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4573,"mutability":"mutable","name":"admin","nameLocation":"1084:5:22","nodeType":"VariableDeclaration","scope":4584,"src":"1076:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4572,"name":"address","nodeType":"ElementaryTypeName","src":"1076:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1075:15:22"},"returnParameters":{"id":4577,"nodeType":"ParameterList","parameters":[],"src":"1110:0:22"},"scope":4650,"src":"1056:109:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4596,"nodeType":"Block","src":"1228:56:22","statements":[{"expression":{"arguments":[{"id":4592,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1250:18:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4593,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4586,"src":"1270:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4591,"name":"revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"1239:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1239:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4595,"nodeType":"ExpressionStatement","src":"1239:37:22"}]},"functionSelector":"2d345670","id":4597,"implemented":true,"kind":"function","modifiers":[{"id":4589,"kind":"modifierInvocation","modifierName":{"id":4588,"name":"onlyAdmin","nameLocations":["1218:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4571,"src":"1218:9:22"},"nodeType":"ModifierInvocation","src":"1218:9:22"}],"name":"revokeAdmin","nameLocation":"1182:11:22","nodeType":"FunctionDefinition","parameters":{"id":4587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4586,"mutability":"mutable","name":"admin","nameLocation":"1202:5:22","nodeType":"VariableDeclaration","scope":4597,"src":"1194:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4585,"name":"address","nodeType":"ElementaryTypeName","src":"1194:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1193:15:22"},"returnParameters":{"id":4590,"nodeType":"ParameterList","parameters":[],"src":"1228:0:22"},"scope":4650,"src":"1173:111:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4609,"nodeType":"Block","src":"1348:49:22","statements":[{"expression":{"arguments":[{"id":4605,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4527,"src":"1369:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4606,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"1382:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4604,"name":"grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"1359:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1359:30:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4608,"nodeType":"ExpressionStatement","src":"1359:30:22"}]},"functionSelector":"261707fa","id":4610,"implemented":true,"kind":"function","modifiers":[{"id":4602,"kind":"modifierInvocation","modifierName":{"id":4601,"name":"onlyAdmin","nameLocations":["1338:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4571,"src":"1338:9:22"},"nodeType":"ModifierInvocation","src":"1338:9:22"}],"name":"grantMinter","nameLocation":"1301:11:22","nodeType":"FunctionDefinition","parameters":{"id":4600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4599,"mutability":"mutable","name":"minter","nameLocation":"1321:6:22","nodeType":"VariableDeclaration","scope":4610,"src":"1313:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4598,"name":"address","nodeType":"ElementaryTypeName","src":"1313:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1312:16:22"},"returnParameters":{"id":4603,"nodeType":"ParameterList","parameters":[],"src":"1348:0:22"},"scope":4650,"src":"1292:105:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4622,"nodeType":"Block","src":"1462:50:22","statements":[{"expression":{"arguments":[{"id":4618,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4527,"src":"1484:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4619,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4612,"src":"1497:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4617,"name":"revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"1473:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1473:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4621,"nodeType":"ExpressionStatement","src":"1473:31:22"}]},"functionSelector":"cfbd4885","id":4623,"implemented":true,"kind":"function","modifiers":[{"id":4615,"kind":"modifierInvocation","modifierName":{"id":4614,"name":"onlyAdmin","nameLocations":["1452:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4571,"src":"1452:9:22"},"nodeType":"ModifierInvocation","src":"1452:9:22"}],"name":"revokeMinter","nameLocation":"1414:12:22","nodeType":"FunctionDefinition","parameters":{"id":4613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4612,"mutability":"mutable","name":"minter","nameLocation":"1435:6:22","nodeType":"VariableDeclaration","scope":4623,"src":"1427:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4611,"name":"address","nodeType":"ElementaryTypeName","src":"1427:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1426:16:22"},"returnParameters":{"id":4616,"nodeType":"ParameterList","parameters":[],"src":"1462:0:22"},"scope":4650,"src":"1405:107:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4635,"nodeType":"Block","src":"1576:49:22","statements":[{"expression":{"arguments":[{"id":4631,"name":"BURNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"1597:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4632,"name":"burner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"1610:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4630,"name":"grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"1587:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1587:30:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4634,"nodeType":"ExpressionStatement","src":"1587:30:22"}]},"functionSelector":"10511f96","id":4636,"implemented":true,"kind":"function","modifiers":[{"id":4628,"kind":"modifierInvocation","modifierName":{"id":4627,"name":"onlyAdmin","nameLocations":["1566:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4571,"src":"1566:9:22"},"nodeType":"ModifierInvocation","src":"1566:9:22"}],"name":"grantBurner","nameLocation":"1529:11:22","nodeType":"FunctionDefinition","parameters":{"id":4626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4625,"mutability":"mutable","name":"burner","nameLocation":"1549:6:22","nodeType":"VariableDeclaration","scope":4636,"src":"1541:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4624,"name":"address","nodeType":"ElementaryTypeName","src":"1541:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1540:16:22"},"returnParameters":{"id":4629,"nodeType":"ParameterList","parameters":[],"src":"1576:0:22"},"scope":4650,"src":"1520:105:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4648,"nodeType":"Block","src":"1690:50:22","statements":[{"expression":{"arguments":[{"id":4644,"name":"BURNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"1712:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4645,"name":"burner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4638,"src":"1725:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4643,"name":"revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"1701:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1701:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4647,"nodeType":"ExpressionStatement","src":"1701:31:22"}]},"functionSelector":"0900cc33","id":4649,"implemented":true,"kind":"function","modifiers":[{"id":4641,"kind":"modifierInvocation","modifierName":{"id":4640,"name":"onlyAdmin","nameLocations":["1680:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4571,"src":"1680:9:22"},"nodeType":"ModifierInvocation","src":"1680:9:22"}],"name":"revokeBurner","nameLocation":"1642:12:22","nodeType":"FunctionDefinition","parameters":{"id":4639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4638,"mutability":"mutable","name":"burner","nameLocation":"1663:6:22","nodeType":"VariableDeclaration","scope":4649,"src":"1655:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4637,"name":"address","nodeType":"ElementaryTypeName","src":"1655:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1654:16:22"},"returnParameters":{"id":4642,"nodeType":"ParameterList","parameters":[],"src":"1690:0:22"},"scope":4650,"src":"1633:107:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5042,"src":"328:1415:22","usedErrors":[305,308],"usedEvents":[317,326,335]},{"abstract":false,"baseContracts":[{"baseName":{"id":4651,"name":"ERC721URIStorage","nameLocations":["1767:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":2369,"src":"1767:16:22"},"id":4652,"nodeType":"InheritanceSpecifier","src":"1767:16:22"},{"baseName":{"id":4653,"name":"ERC721Enumerable","nameLocations":["1785:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":2243,"src":"1785:16:22"},"id":4654,"nodeType":"InheritanceSpecifier","src":"1785:16:22"},{"baseName":{"id":4655,"name":"ACL","nameLocations":["1803:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":4650,"src":"1803:3:22"},"id":4656,"nodeType":"InheritanceSpecifier","src":"1803:3:22"}],"canonicalName":"PalmNFT","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5041,"linearizedBaseContracts":[5041,4650,520,295,2243,2401,2369,1724,668,2429,574,1841,2730,2742,546,378,2451],"name":"PalmNFT","nameLocation":"1756:7:22","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"b0734c6ca9ae9b7406dd80224cb0488aed0928eef358da7449505fa59b8d7a2a","id":4660,"name":"Memo","nameLocation":"1820:4:22","nodeType":"EventDefinition","parameters":{"id":4659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4658,"indexed":false,"mutability":"mutable","name":"memo","nameLocation":"1832:4:22","nodeType":"VariableDeclaration","scope":4660,"src":"1825:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4657,"name":"string","nodeType":"ElementaryTypeName","src":"1825:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1824:13:22"},"src":"1814:24:22"},{"constant":false,"functionSelector":"dcf993ee","id":4663,"mutability":"mutable","name":"isPubliclyMintable","nameLocation":"1858:18:22","nodeType":"VariableDeclaration","scope":5041,"src":"1846:38:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4661,"name":"bool","nodeType":"ElementaryTypeName","src":"1846:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"66616c7365","id":4662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1879:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"visibility":"public"},{"constant":false,"functionSelector":"3cf40df3","id":4666,"mutability":"mutable","name":"isSBT","nameLocation":"1903:5:22","nodeType":"VariableDeclaration","scope":5041,"src":"1891:25:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4664,"name":"bool","nodeType":"ElementaryTypeName","src":"1891:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"66616c7365","id":4665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1911:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"visibility":"public"},{"constant":false,"id":4668,"mutability":"mutable","name":"_tokenIds","nameLocation":"1956:9:22","nodeType":"VariableDeclaration","scope":5041,"src":"1940:25:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4667,"name":"uint256","nodeType":"ElementaryTypeName","src":"1940:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"functionSelector":"e276fea3","id":4672,"mutability":"mutable","name":"freezeAccounts","nameLocation":"2006:14:22","nodeType":"VariableDeclaration","scope":5041,"src":"1974:46:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4671,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4669,"name":"address","nodeType":"ElementaryTypeName","src":"1982:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1974:24:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4670,"name":"bool","nodeType":"ElementaryTypeName","src":"1993:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"af85b60d26151edd11443b704d424da6c43d0468f2235ebae3d1904dbc323049","id":4676,"name":"Freeze","nameLocation":"2035:6:22","nodeType":"EventDefinition","parameters":{"id":4675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4674,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"2050:7:22","nodeType":"VariableDeclaration","scope":4676,"src":"2042:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4673,"name":"address","nodeType":"ElementaryTypeName","src":"2042:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2041:17:22"},"src":"2029:30:22"},{"anonymous":false,"eventSelector":"ca5069937e68fd197927055037f59d7c90bf75ac104e6e375539ef480c3ad6ee","id":4680,"name":"Unfreeze","nameLocation":"2071:8:22","nodeType":"EventDefinition","parameters":{"id":4679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4678,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"2088:7:22","nodeType":"VariableDeclaration","scope":4680,"src":"2080:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4677,"name":"address","nodeType":"ElementaryTypeName","src":"2080:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2079:17:22"},"src":"2065:32:22"},{"constant":false,"id":4682,"mutability":"mutable","name":"locked","nameLocation":"2121:6:22","nodeType":"VariableDeclaration","scope":5041,"src":"2107:20:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4681,"name":"bool","nodeType":"ElementaryTypeName","src":"2107:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"body":{"id":4698,"nodeType":"Block","src":"2159:96:22","statements":[{"expression":{"arguments":[{"id":4686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2178:7:22","subExpression":{"id":4685,"name":"locked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4682,"src":"2179:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4684,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2170:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":4687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2170:16:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4688,"nodeType":"ExpressionStatement","src":"2170:16:22"},{"expression":{"id":4691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4689,"name":"locked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4682,"src":"2197:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2206:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2197:13:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4692,"nodeType":"ExpressionStatement","src":"2197:13:22"},{"id":4693,"nodeType":"PlaceholderStatement","src":"2221:1:22"},{"expression":{"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4694,"name":"locked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4682,"src":"2233:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":4695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2242:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2233:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4697,"nodeType":"ExpressionStatement","src":"2233:14:22"}]},"id":4699,"name":"noReentrant","nameLocation":"2145:11:22","nodeType":"ModifierDefinition","parameters":{"id":4683,"nodeType":"ParameterList","parameters":[],"src":"2156:2:22"},"src":"2136:119:22","virtual":false,"visibility":"internal"},{"body":{"id":4724,"nodeType":"Block","src":"2307:153:22","statements":[{"expression":{"arguments":[{"id":4707,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"2329:18:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4708,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2349:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2353:6:22","memberName":"sender","nodeType":"MemberAccess","src":"2349:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4706,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[487],"referencedDeclaration":487,"src":"2318:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2318:42:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4711,"nodeType":"ExpressionStatement","src":"2318:42:22"},{"expression":{"arguments":[{"id":4713,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4527,"src":"2382:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4714,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2395:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2399:6:22","memberName":"sender","nodeType":"MemberAccess","src":"2395:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4712,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[487],"referencedDeclaration":487,"src":"2371:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2371:35:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4717,"nodeType":"ExpressionStatement","src":"2371:35:22"},{"expression":{"arguments":[{"id":4719,"name":"BURNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"2428:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4720,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2441:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2445:6:22","memberName":"sender","nodeType":"MemberAccess","src":"2441:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4718,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[487],"referencedDeclaration":487,"src":"2417:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2417:35:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4723,"nodeType":"ExpressionStatement","src":"2417:35:22"}]},"id":4725,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"50616c6d2d4e4654","id":4702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2284:10:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_e4e49b6a7fe9bdee1f6ae073be9c33a9236a2cded36206fb9de895e1c24d5f87","typeString":"literal_string \"Palm-NFT\""},"value":"Palm-NFT"},{"hexValue":"50616c6d4e4654","id":4703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2296:9:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_5594c1f3dee8afd0773877674e0965ac4d3a3a8df7e97b29cf4a6dbf7f19720f","typeString":"literal_string \"PalmNFT\""},"value":"PalmNFT"}],"id":4704,"kind":"baseConstructorSpecifier","modifierName":{"id":4701,"name":"ERC721","nameLocations":["2277:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1724,"src":"2277:6:22"},"nodeType":"ModifierInvocation","src":"2277:29:22"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4700,"nodeType":"ParameterList","parameters":[],"src":"2274:2:22"},"returnParameters":{"id":4705,"nodeType":"ParameterList","parameters":[],"src":"2307:0:22"},"scope":5041,"src":"2263:197:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4736,"nodeType":"Block","src":"2529:48:22","statements":[{"expression":{"id":4734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4732,"name":"isPubliclyMintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4663,"src":"2540:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4733,"name":"mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"2561:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2540:29:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4735,"nodeType":"ExpressionStatement","src":"2540:29:22"}]},"functionSelector":"71222467","id":4737,"implemented":true,"kind":"function","modifiers":[{"id":4730,"kind":"modifierInvocation","modifierName":{"id":4729,"name":"onlyAdmin","nameLocations":["2519:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4571,"src":"2519:9:22"},"nodeType":"ModifierInvocation","src":"2519:9:22"}],"name":"setPubliclyMintable","nameLocation":"2477:19:22","nodeType":"FunctionDefinition","parameters":{"id":4728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4727,"mutability":"mutable","name":"mintable","nameLocation":"2502:8:22","nodeType":"VariableDeclaration","scope":4737,"src":"2497:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4726,"name":"bool","nodeType":"ElementaryTypeName","src":"2497:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2496:15:22"},"returnParameters":{"id":4731,"nodeType":"ParameterList","parameters":[],"src":"2529:0:22"},"scope":5041,"src":"2468:109:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4748,"nodeType":"Block","src":"2630:30:22","statements":[{"expression":{"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4744,"name":"isSBT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"2641:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4745,"name":"SBT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4739,"src":"2649:3:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2641:11:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4747,"nodeType":"ExpressionStatement","src":"2641:11:22"}]},"functionSelector":"e485857b","id":4749,"implemented":true,"kind":"function","modifiers":[{"id":4742,"kind":"modifierInvocation","modifierName":{"id":4741,"name":"onlyAdmin","nameLocations":["2620:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4571,"src":"2620:9:22"},"nodeType":"ModifierInvocation","src":"2620:9:22"}],"name":"setToSBT","nameLocation":"2594:8:22","nodeType":"FunctionDefinition","parameters":{"id":4740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4739,"mutability":"mutable","name":"SBT","nameLocation":"2608:3:22","nodeType":"VariableDeclaration","scope":4749,"src":"2603:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4738,"name":"bool","nodeType":"ElementaryTypeName","src":"2603:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2602:10:22"},"returnParameters":{"id":4743,"nodeType":"ParameterList","parameters":[],"src":"2630:0:22"},"scope":5041,"src":"2585:75:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4766,"nodeType":"Block","src":"2718:80:22","statements":[{"expression":{"id":4760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4756,"name":"freezeAccounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"2729:14:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4758,"indexExpression":{"id":4757,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4751,"src":"2744:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2729:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2755:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2729:30:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4761,"nodeType":"ExpressionStatement","src":"2729:30:22"},{"eventCall":{"arguments":[{"id":4763,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4751,"src":"2782:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4762,"name":"Freeze","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4676,"src":"2775:6:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2775:15:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4765,"nodeType":"EmitStatement","src":"2770:20:22"}]},"functionSelector":"8d1fdf2f","id":4767,"implemented":true,"kind":"function","modifiers":[{"id":4754,"kind":"modifierInvocation","modifierName":{"id":4753,"name":"onlyAdmin","nameLocations":["2708:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4571,"src":"2708:9:22"},"nodeType":"ModifierInvocation","src":"2708:9:22"}],"name":"freeze","nameLocation":"2677:6:22","nodeType":"FunctionDefinition","parameters":{"id":4752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4751,"mutability":"mutable","name":"account","nameLocation":"2692:7:22","nodeType":"VariableDeclaration","scope":4767,"src":"2684:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4750,"name":"address","nodeType":"ElementaryTypeName","src":"2684:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2683:17:22"},"returnParameters":{"id":4755,"nodeType":"ParameterList","parameters":[],"src":"2718:0:22"},"scope":5041,"src":"2668:130:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4784,"nodeType":"Block","src":"2858:81:22","statements":[{"expression":{"id":4778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4774,"name":"freezeAccounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"2869:14:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4776,"indexExpression":{"id":4775,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4769,"src":"2884:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2869:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":4777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2895:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2869:31:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4779,"nodeType":"ExpressionStatement","src":"2869:31:22"},{"eventCall":{"arguments":[{"id":4781,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4769,"src":"2923:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4780,"name":"Freeze","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4676,"src":"2916:6:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2916:15:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4783,"nodeType":"EmitStatement","src":"2911:20:22"}]},"functionSelector":"45c8b1a6","id":4785,"implemented":true,"kind":"function","modifiers":[{"id":4772,"kind":"modifierInvocation","modifierName":{"id":4771,"name":"onlyAdmin","nameLocations":["2848:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4571,"src":"2848:9:22"},"nodeType":"ModifierInvocation","src":"2848:9:22"}],"name":"unfreeze","nameLocation":"2815:8:22","nodeType":"FunctionDefinition","parameters":{"id":4770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4769,"mutability":"mutable","name":"account","nameLocation":"2832:7:22","nodeType":"VariableDeclaration","scope":4785,"src":"2824:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4768,"name":"address","nodeType":"ElementaryTypeName","src":"2824:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2823:17:22"},"returnParameters":{"id":4773,"nodeType":"ParameterList","parameters":[],"src":"2858:0:22"},"scope":5041,"src":"2806:133:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4837,"nodeType":"Block","src":"3033:427:22","statements":[{"assignments":[4797],"declarations":[{"constant":false,"id":4797,"mutability":"mutable","name":"isMinter","nameLocation":"3049:8:22","nodeType":"VariableDeclaration","scope":4837,"src":"3044:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4796,"name":"bool","nodeType":"ElementaryTypeName","src":"3044:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4803,"initialValue":{"arguments":[{"id":4799,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4527,"src":"3068:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4800,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3081:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3085:6:22","memberName":"sender","nodeType":"MemberAccess","src":"3081:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4798,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3060:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3060:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3044:48:22"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4804,"name":"isPubliclyMintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4663,"src":"3109:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":4805,"name":"isMinter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"3131:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3109:30:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4835,"nodeType":"Block","src":"3339:114:22","statements":[{"expression":{"arguments":[{"id":4829,"name":"isPubliclyMintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4663,"src":"3362:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686973204e4654206973206e6f74207075626c69636c79206d696e7461626c65","id":4830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3382:35:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d23406286cff9f065550eeba5e3e1e76b7868deae85a2bc79d8a126c15e661d","typeString":"literal_string \"This NFT is not publicly mintable\""},"value":"This NFT is not publicly mintable"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d23406286cff9f065550eeba5e3e1e76b7868deae85a2bc79d8a126c15e661d","typeString":"literal_string \"This NFT is not publicly mintable\""}],"id":4828,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3354:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3354:64:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4832,"nodeType":"ExpressionStatement","src":"3354:64:22"},{"expression":{"hexValue":"30","id":4833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3440:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4795,"id":4834,"nodeType":"Return","src":"3433:8:22"}]},"id":4836,"nodeType":"IfStatement","src":"3105:348:22","trueBody":{"id":4827,"nodeType":"Block","src":"3141:192:22","statements":[{"assignments":[4808],"declarations":[{"constant":false,"id":4808,"mutability":"mutable","name":"tokenId","nameLocation":"3164:7:22","nodeType":"VariableDeclaration","scope":4827,"src":"3156:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4807,"name":"uint256","nodeType":"ElementaryTypeName","src":"3156:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4810,"initialValue":{"id":4809,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"3174:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3156:27:22"},{"expression":{"arguments":[{"id":4812,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4787,"src":"3208:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4813,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4808,"src":"3212:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4811,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1346,1372],"referencedDeclaration":1346,"src":"3198:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3198:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4815,"nodeType":"ExpressionStatement","src":"3198:22:22"},{"expression":{"arguments":[{"id":4817,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4808,"src":"3248:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4818,"name":"uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4789,"src":"3257:3:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4816,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"3235:12:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":4819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3235:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4820,"nodeType":"ExpressionStatement","src":"3235:26:22"},{"expression":{"id":4823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4821,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"3276:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3289:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3276:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4824,"nodeType":"ExpressionStatement","src":"3276:14:22"},{"expression":{"id":4825,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4808,"src":"3314:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4795,"id":4826,"nodeType":"Return","src":"3307:14:22"}]}}]},"functionSelector":"d204c45e","id":4838,"implemented":true,"kind":"function","modifiers":[{"id":4792,"kind":"modifierInvocation","modifierName":{"id":4791,"name":"noReentrant","nameLocations":["3003:11:22"],"nodeType":"IdentifierPath","referencedDeclaration":4699,"src":"3003:11:22"},"nodeType":"ModifierInvocation","src":"3003:11:22"}],"name":"safeMint","nameLocation":"2956:8:22","nodeType":"FunctionDefinition","parameters":{"id":4790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4787,"mutability":"mutable","name":"to","nameLocation":"2973:2:22","nodeType":"VariableDeclaration","scope":4838,"src":"2965:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4786,"name":"address","nodeType":"ElementaryTypeName","src":"2965:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4789,"mutability":"mutable","name":"uri","nameLocation":"2991:3:22","nodeType":"VariableDeclaration","scope":4838,"src":"2977:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4788,"name":"string","nodeType":"ElementaryTypeName","src":"2977:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2964:31:22"},"returnParameters":{"id":4795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4794,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4838,"src":"3024:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4793,"name":"uint256","nodeType":"ElementaryTypeName","src":"3024:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3023:9:22"},"scope":5041,"src":"2947:513:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4852,"nodeType":"Block","src":"3542:45:22","statements":[{"expression":{"arguments":[{"id":4848,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"3566:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4849,"name":"uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4842,"src":"3575:3:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4847,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"3553:12:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":4850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3553:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4851,"nodeType":"ExpressionStatement","src":"3553:26:22"}]},"functionSelector":"162094c4","id":4853,"implemented":true,"kind":"function","modifiers":[{"id":4845,"kind":"modifierInvocation","modifierName":{"id":4844,"name":"onlyAdmin","nameLocations":["3532:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":4571,"src":"3532:9:22"},"nodeType":"ModifierInvocation","src":"3532:9:22"}],"name":"setTokenURI","nameLocation":"3477:11:22","nodeType":"FunctionDefinition","parameters":{"id":4843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4840,"mutability":"mutable","name":"tokenId","nameLocation":"3497:7:22","nodeType":"VariableDeclaration","scope":4853,"src":"3489:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4839,"name":"uint256","nodeType":"ElementaryTypeName","src":"3489:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4842,"mutability":"mutable","name":"uri","nameLocation":"3520:3:22","nodeType":"VariableDeclaration","scope":4853,"src":"3506:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4841,"name":"string","nodeType":"ElementaryTypeName","src":"3506:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3488:36:22"},"returnParameters":{"id":4846,"nodeType":"ParameterList","parameters":[],"src":"3542:0:22"},"scope":5041,"src":"3468:119:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4904,"nodeType":"Block","src":"3633:462:22","statements":[{"expression":{"arguments":[{"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3652:6:22","subExpression":{"id":4859,"name":"isSBT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"3653:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686973204e465420776173206e6f74207065726d697474656420746f206275726e","id":4861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3660:36:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_e688d7497ddb1402e497ed0319ede17625ff78c3f261503d4327ab1b642407bb","typeString":"literal_string \"This NFT was not permitted to burn\""},"value":"This NFT was not permitted to burn"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e688d7497ddb1402e497ed0319ede17625ff78c3f261503d4327ab1b642407bb","typeString":"literal_string \"This NFT was not permitted to burn\""}],"id":4858,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3644:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3644:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4863,"nodeType":"ExpressionStatement","src":"3644:53:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4865,"name":"freezeAccounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"3716:14:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4868,"indexExpression":{"expression":{"id":4866,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3731:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3735:6:22","memberName":"sender","nodeType":"MemberAccess","src":"3731:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3716:26:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"74727565","id":4869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3746:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3716:34:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c657220686173206265656e20667265657a65","id":4871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3752:24:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_df799cddfe1e8e896d8d4ad58f231c73395b1e5aae588589151e636922b9fd0b","typeString":"literal_string \"Caller has been freeze\""},"value":"Caller has been freeze"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df799cddfe1e8e896d8d4ad58f231c73395b1e5aae588589151e636922b9fd0b","typeString":"literal_string \"Caller has been freeze\""}],"id":4864,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3708:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3708:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4873,"nodeType":"ExpressionStatement","src":"3708:69:22"},{"assignments":[4875],"declarations":[{"constant":false,"id":4875,"mutability":"mutable","name":"isBurner","nameLocation":"3795:8:22","nodeType":"VariableDeclaration","scope":4904,"src":"3790:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4874,"name":"bool","nodeType":"ElementaryTypeName","src":"3790:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4881,"initialValue":{"arguments":[{"id":4877,"name":"BURNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"3814:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4878,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3827:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3831:6:22","memberName":"sender","nodeType":"MemberAccess","src":"3827:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4876,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3806:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3790:48:22"},{"condition":{"id":4882,"name":"isBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4875,"src":"3853:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4902,"nodeType":"Block","src":"3910:178:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4889,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3951:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3955:6:22","memberName":"sender","nodeType":"MemberAccess","src":"3951:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":4892,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"3973:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4891,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"3965:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":4893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3965:16:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3951:30:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c657220646f6573206e6f74206f776e2074686973204e4654","id":4895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4000:30:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_f73ae05a0e7fa0084b25cebcc7c99c97b88354866069b73642dfeeee8282b4dd","typeString":"literal_string \"Caller does not own this NFT\""},"value":"Caller does not own this NFT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f73ae05a0e7fa0084b25cebcc7c99c97b88354866069b73642dfeeee8282b4dd","typeString":"literal_string \"Caller does not own this NFT\""}],"id":4888,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3925:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3925:120:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4897,"nodeType":"ExpressionStatement","src":"3925:120:22"},{"expression":{"arguments":[{"id":4899,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"4068:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4898,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"4062:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4062:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4901,"nodeType":"ExpressionStatement","src":"4062:14:22"}]},"id":4903,"nodeType":"IfStatement","src":"3849:239:22","trueBody":{"id":4887,"nodeType":"Block","src":"3863:41:22","statements":[{"expression":{"arguments":[{"id":4884,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"3884:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4883,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"3878:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3878:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4886,"nodeType":"ExpressionStatement","src":"3878:14:22"}]}}]},"functionSelector":"42966c68","id":4905,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"3604:4:22","nodeType":"FunctionDefinition","parameters":{"id":4856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4855,"mutability":"mutable","name":"tokenId","nameLocation":"3617:7:22","nodeType":"VariableDeclaration","scope":4905,"src":"3609:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4854,"name":"uint256","nodeType":"ElementaryTypeName","src":"3609:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3608:17:22"},"returnParameters":{"id":4857,"nodeType":"ParameterList","parameters":[],"src":"3633:0:22"},"scope":5041,"src":"3595:500:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4935,"nodeType":"Block","src":"4155:208:22","statements":[{"expression":{"arguments":[{"id":4914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4174:6:22","subExpression":{"id":4913,"name":"isSBT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"4175:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686973204e465420776173206e6f74207065726d697474656420746f207472616e73666572","id":4915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4182:40:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_96265c9a7a9576744e74229ec48afeae05f496150ec706fc9d69b4d994b10fa4","typeString":"literal_string \"This NFT was not permitted to transfer\""},"value":"This NFT was not permitted to transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_96265c9a7a9576744e74229ec48afeae05f496150ec706fc9d69b4d994b10fa4","typeString":"literal_string \"This NFT was not permitted to transfer\""}],"id":4912,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4166:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4166:57:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4917,"nodeType":"ExpressionStatement","src":"4166:57:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4919,"name":"freezeAccounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"4242:14:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4922,"indexExpression":{"expression":{"id":4920,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4257:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4261:6:22","memberName":"sender","nodeType":"MemberAccess","src":"4257:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4242:26:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"74727565","id":4923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4272:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4242:34:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c657220686173206265656e20667265657a65","id":4925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4278:24:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_df799cddfe1e8e896d8d4ad58f231c73395b1e5aae588589151e636922b9fd0b","typeString":"literal_string \"Caller has been freeze\""},"value":"Caller has been freeze"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df799cddfe1e8e896d8d4ad58f231c73395b1e5aae588589151e636922b9fd0b","typeString":"literal_string \"Caller has been freeze\""}],"id":4918,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4234:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4234:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4927,"nodeType":"ExpressionStatement","src":"4234:69:22"},{"expression":{"arguments":[{"expression":{"id":4929,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4331:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4335:6:22","memberName":"sender","nodeType":"MemberAccess","src":"4331:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4931,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4907,"src":"4343:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4932,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"4347:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4928,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[1050,1076],"referencedDeclaration":1050,"src":"4314:16:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4314:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4934,"nodeType":"ExpressionStatement","src":"4314:41:22"}]},"functionSelector":"a9059cbb","id":4936,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"4110:8:22","nodeType":"FunctionDefinition","parameters":{"id":4910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4907,"mutability":"mutable","name":"to","nameLocation":"4127:2:22","nodeType":"VariableDeclaration","scope":4936,"src":"4119:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4906,"name":"address","nodeType":"ElementaryTypeName","src":"4119:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4909,"mutability":"mutable","name":"tokenId","nameLocation":"4139:7:22","nodeType":"VariableDeclaration","scope":4936,"src":"4131:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4908,"name":"uint256","nodeType":"ElementaryTypeName","src":"4131:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4118:29:22"},"returnParameters":{"id":4911,"nodeType":"ParameterList","parameters":[],"src":"4155:0:22"},"scope":5041,"src":"4101:262:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4966,"nodeType":"Block","src":"4431:208:22","statements":[{"expression":{"arguments":[{"id":4945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4450:6:22","subExpression":{"id":4944,"name":"isSBT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"4451:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686973204e465420776173206e6f74207065726d697474656420746f207472616e73666572","id":4946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4458:40:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_96265c9a7a9576744e74229ec48afeae05f496150ec706fc9d69b4d994b10fa4","typeString":"literal_string \"This NFT was not permitted to transfer\""},"value":"This NFT was not permitted to transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_96265c9a7a9576744e74229ec48afeae05f496150ec706fc9d69b4d994b10fa4","typeString":"literal_string \"This NFT was not permitted to transfer\""}],"id":4943,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4442:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4442:57:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4948,"nodeType":"ExpressionStatement","src":"4442:57:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4950,"name":"freezeAccounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"4518:14:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4953,"indexExpression":{"expression":{"id":4951,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4533:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4537:6:22","memberName":"sender","nodeType":"MemberAccess","src":"4533:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4518:26:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"74727565","id":4954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4548:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4518:34:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c657220686173206265656e20667265657a65","id":4956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4554:24:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_df799cddfe1e8e896d8d4ad58f231c73395b1e5aae588589151e636922b9fd0b","typeString":"literal_string \"Caller has been freeze\""},"value":"Caller has been freeze"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df799cddfe1e8e896d8d4ad58f231c73395b1e5aae588589151e636922b9fd0b","typeString":"literal_string \"Caller has been freeze\""}],"id":4949,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4510:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4510:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4958,"nodeType":"ExpressionStatement","src":"4510:69:22"},{"expression":{"arguments":[{"expression":{"id":4960,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4607:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4611:6:22","memberName":"sender","nodeType":"MemberAccess","src":"4607:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4962,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"4619:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4963,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4940,"src":"4623:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4959,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[1050,1076],"referencedDeclaration":1050,"src":"4590:16:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4590:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4965,"nodeType":"ExpressionStatement","src":"4590:41:22"}]},"functionSelector":"423f6cef","id":4967,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"4382:12:22","nodeType":"FunctionDefinition","parameters":{"id":4941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4938,"mutability":"mutable","name":"to","nameLocation":"4403:2:22","nodeType":"VariableDeclaration","scope":4967,"src":"4395:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4937,"name":"address","nodeType":"ElementaryTypeName","src":"4395:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4940,"mutability":"mutable","name":"tokenId","nameLocation":"4415:7:22","nodeType":"VariableDeclaration","scope":4967,"src":"4407:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4939,"name":"uint256","nodeType":"ElementaryTypeName","src":"4407:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4394:29:22"},"returnParameters":{"id":4942,"nodeType":"ParameterList","parameters":[],"src":"4431:0:22"},"scope":5041,"src":"4373:266:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[911,2349],"body":{"id":4982,"nodeType":"Block","src":"4859:49:22","statements":[{"expression":{"arguments":[{"id":4979,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"4892:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4977,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"4877:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PalmNFT_$5041_$","typeString":"type(contract super PalmNFT)"}},"id":4978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4883:8:22","memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":2349,"src":"4877:14:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":4980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4877:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4976,"id":4981,"nodeType":"Return","src":"4870:30:22"}]},"functionSelector":"c87b56dd","id":4983,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"4746:8:22","nodeType":"FunctionDefinition","overrides":{"id":4973,"nodeType":"OverrideSpecifier","overrides":[{"id":4971,"name":"ERC721","nameLocations":["4809:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1724,"src":"4809:6:22"},{"id":4972,"name":"ERC721URIStorage","nameLocations":["4817:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":2369,"src":"4817:16:22"}],"src":"4800:34:22"},"parameters":{"id":4970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4969,"mutability":"mutable","name":"tokenId","nameLocation":"4773:7:22","nodeType":"VariableDeclaration","scope":4983,"src":"4765:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4968,"name":"uint256","nodeType":"ElementaryTypeName","src":"4765:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4754:33:22"},"returnParameters":{"id":4976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4975,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4983,"src":"4844:13:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4974,"name":"string","nodeType":"ElementaryTypeName","src":"4844:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4843:15:22"},"scope":5041,"src":"4737:171:22","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[1191,2242],"body":{"id":5000,"nodeType":"Block","src":"5044:57:22","statements":[{"expression":{"arguments":[{"id":4996,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4985,"src":"5078:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4997,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"5087:5:22","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":4993,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5055:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PalmNFT_$5041_$","typeString":"type(contract super PalmNFT)"}},"id":4995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5061:16:22","memberName":"_increaseBalance","nodeType":"MemberAccess","referencedDeclaration":2242,"src":"5055:22:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint128_$returns$__$","typeString":"function (address,uint128)"}},"id":4998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5055:38:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4999,"nodeType":"ExpressionStatement","src":"5055:38:22"}]},"id":5001,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"4925:16:22","nodeType":"FunctionDefinition","overrides":{"id":4991,"nodeType":"OverrideSpecifier","overrides":[{"id":4989,"name":"ERC721","nameLocations":["5018:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1724,"src":"5018:6:22"},{"id":4990,"name":"ERC721Enumerable","nameLocations":["5026:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":2243,"src":"5026:16:22"}],"src":"5009:34:22"},"parameters":{"id":4988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4985,"mutability":"mutable","name":"account","nameLocation":"4960:7:22","nodeType":"VariableDeclaration","scope":5001,"src":"4952:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4984,"name":"address","nodeType":"ElementaryTypeName","src":"4952:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4987,"mutability":"mutable","name":"value","nameLocation":"4987:5:22","nodeType":"VariableDeclaration","scope":5001,"src":"4979:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4986,"name":"uint128","nodeType":"ElementaryTypeName","src":"4979:7:22","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"4941:58:22"},"returnParameters":{"id":4992,"nodeType":"ParameterList","parameters":[],"src":"5044:0:22"},"scope":5041,"src":"4916:185:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1281,2058],"body":{"id":5022,"nodeType":"Block","src":"5274:58:22","statements":[{"expression":{"arguments":[{"id":5017,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5003,"src":"5306:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5018,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5005,"src":"5310:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5019,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5007,"src":"5319:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5015,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5292:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PalmNFT_$5041_$","typeString":"type(contract super PalmNFT)"}},"id":5016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5298:7:22","memberName":"_update","nodeType":"MemberAccess","referencedDeclaration":2058,"src":"5292:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":5020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5292:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5014,"id":5021,"nodeType":"Return","src":"5285:39:22"}]},"id":5023,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"5118:7:22","nodeType":"FunctionDefinition","overrides":{"id":5011,"nodeType":"OverrideSpecifier","overrides":[{"id":5009,"name":"ERC721","nameLocations":["5231:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1724,"src":"5231:6:22"},{"id":5010,"name":"ERC721Enumerable","nameLocations":["5239:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":2243,"src":"5239:16:22"}],"src":"5222:34:22"},"parameters":{"id":5008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5003,"mutability":"mutable","name":"to","nameLocation":"5144:2:22","nodeType":"VariableDeclaration","scope":5023,"src":"5136:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5002,"name":"address","nodeType":"ElementaryTypeName","src":"5136:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5005,"mutability":"mutable","name":"tokenId","nameLocation":"5166:7:22","nodeType":"VariableDeclaration","scope":5023,"src":"5158:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5004,"name":"uint256","nodeType":"ElementaryTypeName","src":"5158:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5007,"mutability":"mutable","name":"auth","nameLocation":"5193:4:22","nodeType":"VariableDeclaration","scope":5023,"src":"5185:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5006,"name":"address","nodeType":"ElementaryTypeName","src":"5185:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5125:79:22"},"returnParameters":{"id":5014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5013,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5023,"src":"5266:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5012,"name":"address","nodeType":"ElementaryTypeName","src":"5266:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5265:9:22"},"scope":5041,"src":"5109:223:22","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[422,1923,2292],"body":{"id":5039,"nodeType":"Block","src":"5541:62:22","statements":[{"expression":{"arguments":[{"id":5036,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5025,"src":"5583:11:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":5034,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5559:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PalmNFT_$5041_$","typeString":"type(contract super PalmNFT)"}},"id":5035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5565:17:22","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":422,"src":"5559:23:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5559:36:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5033,"id":5038,"nodeType":"Return","src":"5552:43:22"}]},"functionSelector":"01ffc9a7","id":5040,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"5349:17:22","nodeType":"FunctionDefinition","overrides":{"id":5030,"nodeType":"OverrideSpecifier","overrides":[{"id":5027,"name":"AccessControlEnumerable","nameLocations":["5451:23:22"],"nodeType":"IdentifierPath","referencedDeclaration":520,"src":"5451:23:22"},{"id":5028,"name":"ERC721Enumerable","nameLocations":["5476:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":2243,"src":"5476:16:22"},{"id":5029,"name":"ERC721URIStorage","nameLocations":["5494:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":2369,"src":"5494:16:22"}],"src":"5442:69:22"},"parameters":{"id":5026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5025,"mutability":"mutable","name":"interfaceId","nameLocation":"5384:11:22","nodeType":"VariableDeclaration","scope":5040,"src":"5377:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5024,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5377:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5366:36:22"},"returnParameters":{"id":5033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5032,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5040,"src":"5530:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5031,"name":"bool","nodeType":"ElementaryTypeName","src":"5530:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5529:6:22"},"scope":5041,"src":"5340:263:22","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":5042,"src":"1747:3859:22","usedErrors":[305,308,626,631,640,645,650,657,662,667,1896,1899],"usedEvents":[317,326,335,566,573,1740,1749,1758,4660,4676,4680]}],"src":"0:5606:22"},"id":22}},"contracts":{"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":26,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)21_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)21_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)21_storage"},"t_struct(RoleData)21_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":18,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":20,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol":{"AccessControlEnumerable":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Extension of {AccessControl} that allows enumerating the members of each role.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {AccessControl} that allows enumerating the members of each role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\":\"AccessControlEnumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControlEnumerable} from \\\"./IAccessControlEnumerable.sol\\\";\\nimport {AccessControl} from \\\"../AccessControl.sol\\\";\\nimport {EnumerableSet} from \\\"../../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 role => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        bool granted = super._grantRole(role, account);\\n        if (granted) {\\n            _roleMembers[role].add(account);\\n        }\\n        return granted;\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        bool revoked = super._revokeRole(role, account);\\n        if (revoked) {\\n            _roleMembers[role].remove(account);\\n        }\\n        return revoked;\\n    }\\n}\\n\",\"keccak256\":\"0xb1c906fcd870fc8dfedb63bfb1bc58b4d2a7469bc13cc44d996fda430693850a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"../IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1435f102633849858e75d7bed14c636f25448ceb3406d82992b0f2df52f4306\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":26,"contract":"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)21_storage)"},{"astId":400,"contract":"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_roleMembers","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(AddressSet)4227_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(AddressSet)4227_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)4227_storage"},"t_mapping(t_bytes32,t_struct(RoleData)21_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)21_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)4227_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":4226,"contract":"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3912_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)21_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":18,"contract":"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol:AccessControlEnumerable","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":20,"contract":"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol:AccessControlEnumerable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)3912_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":3907,"contract":"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":3911,"contract":"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_positions","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol":{"IAccessControlEnumerable":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControlEnumerable declared to support ERC165 detection.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControlEnumerable declared to support ERC165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\":\"IAccessControlEnumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"../IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1435f102633849858e75d7bed14c636f25448ceb3406d82992b0f2df52f4306\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"IERC4906":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"EIP-721 Metadata Update Extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"EIP-721 Metadata Update Extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC4906.sol\":\"IERC4906\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":748,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":750,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":754,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":758,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":762,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":768,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol":{"ERC721Enumerable":{"abi":[{"inputs":[],"name":"ERC721EnumerableForbiddenBatchMint","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"ERC721OutOfBoundsIndex","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account. CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`, interfere with enumerability and should not be used together with `ERC721Enumerable`.","errors":{"ERC721EnumerableForbiddenBatchMint()":[{"details":"Batch mint is not allowed."}],"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}],"ERC721OutOfBoundsIndex(address,uint256)":[{"details":"An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index."}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenByIndex(uint256)":{"details":"See {IERC721Enumerable-tokenByIndex}."},"tokenOfOwnerByIndex(address,uint256)":{"details":"See {IERC721Enumerable-tokenOfOwnerByIndex}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"totalSupply()":{"details":"See {IERC721Enumerable-totalSupply}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC721EnumerableForbiddenBatchMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ERC721OutOfBoundsIndex\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account. CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`, interfere with enumerability and should not be used together with `ERC721Enumerable`.\",\"errors\":{\"ERC721EnumerableForbiddenBatchMint()\":[{\"details\":\"Batch mint is not allowed.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721OutOfBoundsIndex(address,uint256)\":[{\"details\":\"An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":\"ERC721Enumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x36797469c391ea5ba27408e6ca8adf0824ba6f3adea9c139be18bd6f63232c16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":748,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":750,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":754,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":758,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":762,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":768,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1878,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_ownedTokens","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":1882,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_ownedTokensIndex","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1885,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_allTokens","offset":0,"slot":"8","type":"t_array(t_uint256)dyn_storage"},{"astId":1889,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_allTokensIndex","offset":0,"slot":"9","type":"t_mapping(t_uint256,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ERC721URIStorage":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC721 token with storage based token URI management.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}"},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token with storage based token URI management.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":\"ERC721URIStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":748,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":750,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":754,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":758,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":762,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":768,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2271,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"IERC721Enumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenByIndex(uint256)":{"details":"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."},"tokenOfOwnerByIndex(address,uint256)":{"details":"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"totalSupply()":{"details":"Returns the total amount of tokens stored by the contract."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional enumeration extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014361ae278094b127bedfe2e8cb2fd31667231c7b831bedf7b6576e352ff5d4464736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CALLDATASIZE BYTE 0xE2 PUSH25 0x94B127BEDFE2E8CB2FD31667231C7B831BEDF7B6576E352FF 0x5D PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"251:2847:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;251:2847:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014361ae278094b127bedfe2e8cb2fd31667231c7b831bedf7b6576e352ff5d4464736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CALLDATASIZE BYTE 0xE2 PUSH25 0x94B127BEDFE2E8CB2FD31667231C7B831BEDF7B6576E352FF 0x5D PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"251:2847:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205668e942167f71b57b39fdd3181a46cc44d9e606ae111ad83102b2d9038f111564736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP PUSH9 0xE942167F71B57B39FD 0xD3 XOR BYTE CHAINID 0xCC PREVRANDAO 0xD9 0xE6 MOD 0xAE GT BYTE 0xD8 BALANCE MUL 0xB2 0xD9 SUB DUP16 GT ISZERO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"203:14914:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205668e942167f71b57b39fdd3181a46cc44d9e606ae111ad83102b2d9038f111564736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP PUSH9 0xE942167F71B57B39FD 0xD3 XOR BYTE CHAINID 0xCC PREVRANDAO 0xD9 0xE6 MOD 0xAE GT BYTE 0xD8 BALANCE MUL 0xB2 0xD9 SUB DUP16 GT ISZERO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"203:14914:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4964af4e40dcf6c065c71071b1bffd923984b12e9cb29e4e7ca16d1e7e7840264736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL SWAP7 0x4A DELEGATECALL 0xE4 0xD 0xCF PUSH13 0x65C71071B1BFFD923984B12E9 0xCB 0x29 0xE4 0xE7 0xCA AND 0xD1 0xE7 0xE7 DUP5 MUL PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"216:1047:20:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;216:1047:20;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4964af4e40dcf6c065c71071b1bffd923984b12e9cb29e4e7ca16d1e7e7840264736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL SWAP7 0x4A DELEGATECALL 0xE4 0xD 0xCF PUSH13 0x65C71071B1BFFD923984B12E9 0xCB 0x29 0xE4 0xE7 0xCA AND 0xD1 0xE7 0xE7 DUP5 MUL PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"216:1047:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208b9e9464728bcc1bd52a6026bc612f4ca06e4555c52fced4ffae35fe9074948264736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 SWAP15 SWAP5 PUSH5 0x728BCC1BD5 0x2A PUSH1 0x26 0xBC PUSH2 0x2F4C LOG0 PUSH15 0x4555C52FCED4FFAE35FE9074948264 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"1330:11640:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1330:11640:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208b9e9464728bcc1bd52a6026bc612f4ca06e4555c52fced4ffae35fe9074948264736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 SWAP15 SWAP5 PUSH5 0x728BCC1BD5 0x2A PUSH1 0x26 0xBC PUSH2 0x2F4C LOG0 PUSH15 0x4555C52FCED4FFAE35FE9074948264 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"1330:11640:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSet.Set storage pointer)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSet.AddressSet storage pointer)":"infinite","values(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSet.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/PalmNFT.sol":{"ACL":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"BURNER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"admin","type":"address"}],"name":"grantAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"burner","type":"address"}],"name":"grantBurner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"minter","type":"address"}],"name":"grantMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"admin","type":"address"}],"name":"revokeAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"burner","type":"address"}],"name":"revokeBurner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"minter","type":"address"}],"name":"revokeMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610a91806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806335bb3e16116100a2578063a217fddf11610071578063a217fddf14610255578063ca15c8731461025d578063cfbd488514610270578063d539139314610283578063d547741f146102aa57600080fd5b806335bb3e16146101f157806336568abe146102045780639010d07c1461021757806391d148541461024257600080fd5b8063261707fa116100de578063261707fa14610191578063282c51f3146101a45780632d345670146101cb5780632f2ff15d146101de57600080fd5b806301ffc9a7146101105780630900cc331461013857806310511f961461014d578063248a9ca314610160575b600080fd5b61012361011e3660046108fe565b6102bd565b60405190151581526020015b60405180910390f35b61014b610146366004610944565b6102e8565b005b61014b61015b366004610944565b610345565b61018361016e36600461095f565b60009081526020819052604090206001015490565b60405190815260200161012f565b61014b61019f366004610944565b610396565b6101837f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b61014b6101d9366004610944565b6103e7565b61014b6101ec366004610978565b610419565b61014b6101ff366004610944565b610444565b61014b610212366004610978565b610476565b61022a6102253660046109a4565b6104ae565b6040516001600160a01b03909116815260200161012f565b610123610250366004610978565b6104cd565b610183600081565b61018361026b36600461095f565b6104f6565b61014b61027e366004610944565b61050d565b6101837f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61014b6102b8366004610978565b61055a565b60006001600160e01b03198216635a05180f60e01b14806102e257506102e28261057f565b92915050565b6102f36000336104cd565b6103185760405162461bcd60e51b815260040161030f906109c6565b60405180910390fd5b6103427f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8488261055a565b50565b6103506000336104cd565b61036c5760405162461bcd60e51b815260040161030f906109c6565b6103427f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84882610419565b6103a16000336104cd565b6103bd5760405162461bcd60e51b815260040161030f906109c6565b6103427f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a682610419565b6103f26000336104cd565b61040e5760405162461bcd60e51b815260040161030f906109c6565b61034260008261055a565b600082815260208190526040902060010154610434816105b4565b61043e83836105be565b50505050565b61044f6000336104cd565b61046b5760405162461bcd60e51b815260040161030f906109c6565b610342600082610419565b6001600160a01b038116331461049f5760405163334bd91960e11b815260040160405180910390fd5b6104a982826105f3565b505050565b60008281526001602052604081206104c69083610620565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526001602052604081206102e29061062c565b6105186000336104cd565b6105345760405162461bcd60e51b815260040161030f906109c6565b6103427f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6825b600082815260208190526040902060010154610575816105b4565b61043e83836105f3565b60006001600160e01b03198216637965db0b60e01b14806102e257506301ffc9a760e01b6001600160e01b03198316146102e2565b6103428133610636565b6000806105cb8484610673565b905080156104c65760008481526001602052604090206105eb9084610705565b509392505050565b600080610600848461071a565b905080156104c65760008481526001602052604090206105eb9084610785565b60006104c6838361079a565b60006102e2825490565b61064082826104cd565b61066f5760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161030f565b5050565b600061067f83836104cd565b6106fd576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556106b53390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016102e2565b5060006102e2565b60006104c6836001600160a01b0384166107c4565b600061072683836104cd565b156106fd576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016102e2565b60006104c6836001600160a01b03841661080b565b60008260000182815481106107b1576107b1610a0e565b9060005260206000200154905092915050565b60008181526001830160205260408120546106fd575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102e2565b600081815260018301602052604081205480156108f457600061082f600183610a24565b855490915060009061084390600190610a24565b90508082146108a857600086600001828154811061086357610863610a0e565b906000526020600020015490508087600001848154811061088657610886610a0e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806108b9576108b9610a45565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102e2565b60009150506102e2565b60006020828403121561091057600080fd5b81356001600160e01b0319811681146104c657600080fd5b80356001600160a01b038116811461093f57600080fd5b919050565b60006020828403121561095657600080fd5b6104c682610928565b60006020828403121561097157600080fd5b5035919050565b6000806040838503121561098b57600080fd5b8235915061099b60208401610928565b90509250929050565b600080604083850312156109b757600080fd5b50508035926020909101359150565b60208082526028908201527f43616c6c657220646f6573206e6f742068617320612044454641554c545f41446040820152674d494e5f524f4c4560c01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b818103818111156102e257634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212205683fd7d4d752e5828068546daa59d87c7e1a7147cc1d82c09bdbbc8a3b65bc464736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA91 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x35BB3E16 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x25D JUMPI DUP1 PUSH4 0xCFBD4885 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x35BB3E16 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x261707FA GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x261707FA EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x282C51F3 EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0x2D345670 EQ PUSH2 0x1CB JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x900CC33 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x10511F96 EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x160 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x123 PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0x8FE JUMP JUMPDEST PUSH2 0x2BD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14B PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x2E8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14B PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x345 JUMP JUMPDEST PUSH2 0x183 PUSH2 0x16E CALLDATASIZE PUSH1 0x4 PUSH2 0x95F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12F JUMP JUMPDEST PUSH2 0x14B PUSH2 0x19F CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x396 JUMP JUMPDEST PUSH2 0x183 PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 DUP2 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x1D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x3E7 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x1EC CALLDATASIZE PUSH1 0x4 PUSH2 0x978 JUMP JUMPDEST PUSH2 0x419 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x1FF CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x444 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x212 CALLDATASIZE PUSH1 0x4 PUSH2 0x978 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x225 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A4 JUMP JUMPDEST PUSH2 0x4AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12F JUMP JUMPDEST PUSH2 0x123 PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x978 JUMP JUMPDEST PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x183 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x183 PUSH2 0x26B CALLDATASIZE PUSH1 0x4 PUSH2 0x95F JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x27E CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x50D JUMP JUMPDEST PUSH2 0x183 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x2B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x978 JUMP JUMPDEST PUSH2 0x55A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x2E2 JUMPI POP PUSH2 0x2E2 DUP3 PUSH2 0x57F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2F3 PUSH1 0x0 CALLER PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x318 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30F SWAP1 PUSH2 0x9C6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x342 PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 DUP3 PUSH2 0x55A JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x350 PUSH1 0x0 CALLER PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x36C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30F SWAP1 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x342 PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 DUP3 PUSH2 0x419 JUMP JUMPDEST PUSH2 0x3A1 PUSH1 0x0 CALLER PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x3BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30F SWAP1 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x342 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP3 PUSH2 0x419 JUMP JUMPDEST PUSH2 0x3F2 PUSH1 0x0 CALLER PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x40E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30F SWAP1 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x342 PUSH1 0x0 DUP3 PUSH2 0x55A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x434 DUP2 PUSH2 0x5B4 JUMP JUMPDEST PUSH2 0x43E DUP4 DUP4 PUSH2 0x5BE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x44F PUSH1 0x0 CALLER PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x46B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30F SWAP1 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x342 PUSH1 0x0 DUP3 PUSH2 0x419 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x49F JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4A9 DUP3 DUP3 PUSH2 0x5F3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x4C6 SWAP1 DUP4 PUSH2 0x620 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x2E2 SWAP1 PUSH2 0x62C JUMP JUMPDEST PUSH2 0x518 PUSH1 0x0 CALLER PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x534 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30F SWAP1 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x342 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP3 JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x575 DUP2 PUSH2 0x5B4 JUMP JUMPDEST PUSH2 0x43E DUP4 DUP4 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x2E2 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0x342 DUP2 CALLER PUSH2 0x636 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5CB DUP5 DUP5 PUSH2 0x673 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x4C6 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x5EB SWAP1 DUP5 PUSH2 0x705 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x600 DUP5 DUP5 PUSH2 0x71A JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x4C6 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x5EB SWAP1 DUP5 PUSH2 0x785 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C6 DUP4 DUP4 PUSH2 0x79A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E2 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x640 DUP3 DUP3 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x66F JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x30F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x67F DUP4 DUP4 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x6FD JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x6B5 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x2E2 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C6 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7C4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x726 DUP4 DUP4 PUSH2 0x4CD JUMP JUMPDEST ISZERO PUSH2 0x6FD JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C6 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x80B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x7B1 JUMPI PUSH2 0x7B1 PUSH2 0xA0E JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x6FD JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x8F4 JUMPI PUSH1 0x0 PUSH2 0x82F PUSH1 0x1 DUP4 PUSH2 0xA24 JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x843 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0xA24 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ PUSH2 0x8A8 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x863 JUMPI PUSH2 0x863 PUSH2 0xA0E JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x886 JUMPI PUSH2 0x886 PUSH2 0xA0E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x8B9 JUMPI PUSH2 0x8B9 PUSH2 0xA45 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x910 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x4C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x956 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C6 DUP3 PUSH2 0x928 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x971 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x98B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x99B PUSH1 0x20 DUP5 ADD PUSH2 0x928 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C657220646F6573206E6F742068617320612044454641554C545F4144 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x4D494E5F524F4C45 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2E2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP DUP4 REVERT PUSH30 0x4D752E5828068546DAA59D87C7E1A7147CC1D82C09BDBBC8A3B65BC46473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"328:1415:22:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@BURNER_ROLE_4532":{"entryPoint":null,"id":4532,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_29":{"entryPoint":null,"id":29,"parameterSlots":0,"returnSlots":0},"@MINTER_ROLE_4527":{"entryPoint":null,"id":4527,"parameterSlots":0,"returnSlots":0},"@_add_3954":{"entryPoint":1988,"id":3954,"parameterSlots":2,"returnSlots":1},"@_at_4088":{"entryPoint":1946,"id":4088,"parameterSlots":2,"returnSlots":1},"@_checkRole_114":{"entryPoint":1590,"id":114,"parameterSlots":2,"returnSlots":0},"@_checkRole_93":{"entryPoint":1460,"id":93,"parameterSlots":1,"returnSlots":0},"@_contains_4057":{"entryPoint":null,"id":4057,"parameterSlots":2,"returnSlots":1},"@_grantRole_256":{"entryPoint":1651,"id":256,"parameterSlots":2,"returnSlots":1},"@_grantRole_487":{"entryPoint":1470,"id":487,"parameterSlots":2,"returnSlots":1},"@_length_4071":{"entryPoint":null,"id":4071,"parameterSlots":1,"returnSlots":1},"@_msgSender_2441":{"entryPoint":null,"id":2441,"parameterSlots":0,"returnSlots":1},"@_remove_4038":{"entryPoint":2059,"id":4038,"parameterSlots":2,"returnSlots":1},"@_revokeRole_294":{"entryPoint":1818,"id":294,"parameterSlots":2,"returnSlots":1},"@_revokeRole_519":{"entryPoint":1523,"id":519,"parameterSlots":2,"returnSlots":1},"@add_4254":{"entryPoint":1797,"id":4254,"parameterSlots":2,"returnSlots":1},"@at_4350":{"entryPoint":1568,"id":4350,"parameterSlots":2,"returnSlots":1},"@getRoleAdmin_128":{"entryPoint":null,"id":128,"parameterSlots":1,"returnSlots":1},"@getRoleMemberCount_455":{"entryPoint":1270,"id":455,"parameterSlots":1,"returnSlots":1},"@getRoleMember_440":{"entryPoint":1198,"id":440,"parameterSlots":2,"returnSlots":1},"@grantAdmin_4584":{"entryPoint":1092,"id":4584,"parameterSlots":1,"returnSlots":0},"@grantBurner_4636":{"entryPoint":837,"id":4636,"parameterSlots":1,"returnSlots":0},"@grantMinter_4610":{"entryPoint":918,"id":4610,"parameterSlots":1,"returnSlots":0},"@grantRole_147":{"entryPoint":1049,"id":147,"parameterSlots":2,"returnSlots":0},"@hasRole_80":{"entryPoint":1229,"id":80,"parameterSlots":2,"returnSlots":1},"@length_4323":{"entryPoint":1580,"id":4323,"parameterSlots":1,"returnSlots":1},"@remove_4281":{"entryPoint":1925,"id":4281,"parameterSlots":2,"returnSlots":1},"@renounceRole_189":{"entryPoint":1142,"id":189,"parameterSlots":2,"returnSlots":0},"@revokeAdmin_4597":{"entryPoint":999,"id":4597,"parameterSlots":1,"returnSlots":0},"@revokeBurner_4649":{"entryPoint":744,"id":4649,"parameterSlots":1,"returnSlots":0},"@revokeMinter_4623":{"entryPoint":1293,"id":4623,"parameterSlots":1,"returnSlots":0},"@revokeRole_166":{"entryPoint":1370,"id":166,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2729":{"entryPoint":null,"id":2729,"parameterSlots":1,"returnSlots":1},"@supportsInterface_422":{"entryPoint":701,"id":422,"parameterSlots":1,"returnSlots":1},"@supportsInterface_62":{"entryPoint":1407,"id":62,"parameterSlots":1,"returnSlots":1},"abi_decode_address":{"entryPoint":2344,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2372,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":2399,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":2424,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":2468,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":2302,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_26a18b82a6f0089994fa1fc7c15d389f66d55b2b42f9d4738227fb927dd79151__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2502,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":2596,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x31":{"entryPoint":2629,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":2574,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3314:23","statements":[{"nodeType":"YulBlock","src":"6:3:23","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:23","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:23"},"nodeType":"YulFunctionCall","src":"131:12:23"},"nodeType":"YulExpressionStatement","src":"131:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:23"},"nodeType":"YulFunctionCall","src":"100:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:23"},"nodeType":"YulFunctionCall","src":"96:32:23"},"nodeType":"YulIf","src":"93:52:23"},{"nodeType":"YulVariableDeclaration","src":"154:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:23"},"nodeType":"YulFunctionCall","src":"167:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:23"},"nodeType":"YulFunctionCall","src":"256:12:23"},"nodeType":"YulExpressionStatement","src":"256:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:23"},"nodeType":"YulFunctionCall","src":"230:20:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:23"},"nodeType":"YulFunctionCall","src":"219:32:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:23"},"nodeType":"YulFunctionCall","src":"209:43:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:23"},"nodeType":"YulFunctionCall","src":"202:51:23"},"nodeType":"YulIf","src":"199:71:23"},{"nodeType":"YulAssignment","src":"279:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:23"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:23","type":""}],"src":"14:286:23"},{"body":{"nodeType":"YulBlock","src":"400:92:23","statements":[{"nodeType":"YulAssignment","src":"410:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:23"},"nodeType":"YulFunctionCall","src":"418:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:23"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:23"},"nodeType":"YulFunctionCall","src":"470:14:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:23"},"nodeType":"YulFunctionCall","src":"463:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:23"},"nodeType":"YulFunctionCall","src":"445:41:23"},"nodeType":"YulExpressionStatement","src":"445:41:23"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:23","type":""}],"src":"305:187:23"},{"body":{"nodeType":"YulBlock","src":"546:124:23","statements":[{"nodeType":"YulAssignment","src":"556:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"578:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"565:12:23"},"nodeType":"YulFunctionCall","src":"565:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"556:5:23"}]},{"body":{"nodeType":"YulBlock","src":"648:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"657:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"660:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"650:6:23"},"nodeType":"YulFunctionCall","src":"650:12:23"},"nodeType":"YulExpressionStatement","src":"650:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"618:5:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"633:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"638:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"629:3:23"},"nodeType":"YulFunctionCall","src":"629:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"642:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"625:3:23"},"nodeType":"YulFunctionCall","src":"625:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"614:3:23"},"nodeType":"YulFunctionCall","src":"614:31:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"604:2:23"},"nodeType":"YulFunctionCall","src":"604:42:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"597:6:23"},"nodeType":"YulFunctionCall","src":"597:50:23"},"nodeType":"YulIf","src":"594:70:23"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"525:6:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"536:5:23","type":""}],"src":"497:173:23"},{"body":{"nodeType":"YulBlock","src":"745:116:23","statements":[{"body":{"nodeType":"YulBlock","src":"791:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"800:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"803:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"793:6:23"},"nodeType":"YulFunctionCall","src":"793:12:23"},"nodeType":"YulExpressionStatement","src":"793:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"766:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"775:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"762:3:23"},"nodeType":"YulFunctionCall","src":"762:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"787:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"758:3:23"},"nodeType":"YulFunctionCall","src":"758:32:23"},"nodeType":"YulIf","src":"755:52:23"},{"nodeType":"YulAssignment","src":"816:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"845:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"826:18:23"},"nodeType":"YulFunctionCall","src":"826:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"816:6:23"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"711:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"722:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"734:6:23","type":""}],"src":"675:186:23"},{"body":{"nodeType":"YulBlock","src":"936:110:23","statements":[{"body":{"nodeType":"YulBlock","src":"982:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"991:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"994:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"984:6:23"},"nodeType":"YulFunctionCall","src":"984:12:23"},"nodeType":"YulExpressionStatement","src":"984:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"957:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"966:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"953:3:23"},"nodeType":"YulFunctionCall","src":"953:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"978:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"949:3:23"},"nodeType":"YulFunctionCall","src":"949:32:23"},"nodeType":"YulIf","src":"946:52:23"},{"nodeType":"YulAssignment","src":"1007:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1030:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1017:12:23"},"nodeType":"YulFunctionCall","src":"1017:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1007:6:23"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"902:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"913:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"925:6:23","type":""}],"src":"866:180:23"},{"body":{"nodeType":"YulBlock","src":"1152:76:23","statements":[{"nodeType":"YulAssignment","src":"1162:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1174:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1185:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1170:3:23"},"nodeType":"YulFunctionCall","src":"1170:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1162:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1204:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"1215:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1197:6:23"},"nodeType":"YulFunctionCall","src":"1197:25:23"},"nodeType":"YulExpressionStatement","src":"1197:25:23"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1121:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1132:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1143:4:23","type":""}],"src":"1051:177:23"},{"body":{"nodeType":"YulBlock","src":"1320:167:23","statements":[{"body":{"nodeType":"YulBlock","src":"1366:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1375:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1378:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1368:6:23"},"nodeType":"YulFunctionCall","src":"1368:12:23"},"nodeType":"YulExpressionStatement","src":"1368:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1341:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1350:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1337:3:23"},"nodeType":"YulFunctionCall","src":"1337:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"1362:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1333:3:23"},"nodeType":"YulFunctionCall","src":"1333:32:23"},"nodeType":"YulIf","src":"1330:52:23"},{"nodeType":"YulAssignment","src":"1391:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1414:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1401:12:23"},"nodeType":"YulFunctionCall","src":"1401:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1391:6:23"}]},{"nodeType":"YulAssignment","src":"1433:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1466:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1477:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1462:3:23"},"nodeType":"YulFunctionCall","src":"1462:18:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1443:18:23"},"nodeType":"YulFunctionCall","src":"1443:38:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1433:6:23"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1278:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1289:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1301:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1309:6:23","type":""}],"src":"1233:254:23"},{"body":{"nodeType":"YulBlock","src":"1579:161:23","statements":[{"body":{"nodeType":"YulBlock","src":"1625:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1634:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1637:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1627:6:23"},"nodeType":"YulFunctionCall","src":"1627:12:23"},"nodeType":"YulExpressionStatement","src":"1627:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1600:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1609:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1596:3:23"},"nodeType":"YulFunctionCall","src":"1596:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"1621:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1592:3:23"},"nodeType":"YulFunctionCall","src":"1592:32:23"},"nodeType":"YulIf","src":"1589:52:23"},{"nodeType":"YulAssignment","src":"1650:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1673:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1660:12:23"},"nodeType":"YulFunctionCall","src":"1660:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1650:6:23"}]},{"nodeType":"YulAssignment","src":"1692:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1719:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1730:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1715:3:23"},"nodeType":"YulFunctionCall","src":"1715:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1702:12:23"},"nodeType":"YulFunctionCall","src":"1702:32:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1692:6:23"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1537:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1548:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1560:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1568:6:23","type":""}],"src":"1492:248:23"},{"body":{"nodeType":"YulBlock","src":"1846:102:23","statements":[{"nodeType":"YulAssignment","src":"1856:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1868:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1879:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1864:3:23"},"nodeType":"YulFunctionCall","src":"1864:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1856:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1898:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1913:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1929:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1934:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1925:3:23"},"nodeType":"YulFunctionCall","src":"1925:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"1938:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1921:3:23"},"nodeType":"YulFunctionCall","src":"1921:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1909:3:23"},"nodeType":"YulFunctionCall","src":"1909:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1891:6:23"},"nodeType":"YulFunctionCall","src":"1891:51:23"},"nodeType":"YulExpressionStatement","src":"1891:51:23"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1815:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1826:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1837:4:23","type":""}],"src":"1745:203:23"},{"body":{"nodeType":"YulBlock","src":"2054:76:23","statements":[{"nodeType":"YulAssignment","src":"2064:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2076:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2087:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2072:3:23"},"nodeType":"YulFunctionCall","src":"2072:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2064:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2106:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"2117:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2099:6:23"},"nodeType":"YulFunctionCall","src":"2099:25:23"},"nodeType":"YulExpressionStatement","src":"2099:25:23"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2023:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2034:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2045:4:23","type":""}],"src":"1953:177:23"},{"body":{"nodeType":"YulBlock","src":"2309:230:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2326:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2337:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2319:6:23"},"nodeType":"YulFunctionCall","src":"2319:21:23"},"nodeType":"YulExpressionStatement","src":"2319:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2360:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2371:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2356:3:23"},"nodeType":"YulFunctionCall","src":"2356:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"2376:2:23","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2349:6:23"},"nodeType":"YulFunctionCall","src":"2349:30:23"},"nodeType":"YulExpressionStatement","src":"2349:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2399:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2410:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2395:3:23"},"nodeType":"YulFunctionCall","src":"2395:18:23"},{"hexValue":"43616c6c657220646f6573206e6f742068617320612044454641554c545f4144","kind":"string","nodeType":"YulLiteral","src":"2415:34:23","type":"","value":"Caller does not has a DEFAULT_AD"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2388:6:23"},"nodeType":"YulFunctionCall","src":"2388:62:23"},"nodeType":"YulExpressionStatement","src":"2388:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2470:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2481:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2466:3:23"},"nodeType":"YulFunctionCall","src":"2466:18:23"},{"hexValue":"4d494e5f524f4c45","kind":"string","nodeType":"YulLiteral","src":"2486:10:23","type":"","value":"MIN_ROLE"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2459:6:23"},"nodeType":"YulFunctionCall","src":"2459:38:23"},"nodeType":"YulExpressionStatement","src":"2459:38:23"},{"nodeType":"YulAssignment","src":"2506:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2518:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2529:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2514:3:23"},"nodeType":"YulFunctionCall","src":"2514:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2506:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_26a18b82a6f0089994fa1fc7c15d389f66d55b2b42f9d4738227fb927dd79151__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2286:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2300:4:23","type":""}],"src":"2135:404:23"},{"body":{"nodeType":"YulBlock","src":"2673:145:23","statements":[{"nodeType":"YulAssignment","src":"2683:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2695:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2706:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2691:3:23"},"nodeType":"YulFunctionCall","src":"2691:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2683:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2725:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2740:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2756:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2761:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2752:3:23"},"nodeType":"YulFunctionCall","src":"2752:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"2765:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2748:3:23"},"nodeType":"YulFunctionCall","src":"2748:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2736:3:23"},"nodeType":"YulFunctionCall","src":"2736:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2718:6:23"},"nodeType":"YulFunctionCall","src":"2718:51:23"},"nodeType":"YulExpressionStatement","src":"2718:51:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2789:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2800:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2785:3:23"},"nodeType":"YulFunctionCall","src":"2785:18:23"},{"name":"value1","nodeType":"YulIdentifier","src":"2805:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2778:6:23"},"nodeType":"YulFunctionCall","src":"2778:34:23"},"nodeType":"YulExpressionStatement","src":"2778:34:23"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2634:9:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2645:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2653:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2664:4:23","type":""}],"src":"2544:274:23"},{"body":{"nodeType":"YulBlock","src":"2855:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2872:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2879:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2884:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2875:3:23"},"nodeType":"YulFunctionCall","src":"2875:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2865:6:23"},"nodeType":"YulFunctionCall","src":"2865:31:23"},"nodeType":"YulExpressionStatement","src":"2865:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2912:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2915:4:23","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2905:6:23"},"nodeType":"YulFunctionCall","src":"2905:15:23"},"nodeType":"YulExpressionStatement","src":"2905:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2936:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2939:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2929:6:23"},"nodeType":"YulFunctionCall","src":"2929:15:23"},"nodeType":"YulExpressionStatement","src":"2929:15:23"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"2823:127:23"},{"body":{"nodeType":"YulBlock","src":"3004:176:23","statements":[{"nodeType":"YulAssignment","src":"3014:17:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3026:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"3029:1:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3022:3:23"},"nodeType":"YulFunctionCall","src":"3022:9:23"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"3014:4:23"}]},{"body":{"nodeType":"YulBlock","src":"3063:111:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3084:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3091:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3096:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3087:3:23"},"nodeType":"YulFunctionCall","src":"3087:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3077:6:23"},"nodeType":"YulFunctionCall","src":"3077:31:23"},"nodeType":"YulExpressionStatement","src":"3077:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3128:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3131:4:23","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3121:6:23"},"nodeType":"YulFunctionCall","src":"3121:15:23"},"nodeType":"YulExpressionStatement","src":"3121:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3156:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3159:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3149:6:23"},"nodeType":"YulFunctionCall","src":"3149:15:23"},"nodeType":"YulExpressionStatement","src":"3149:15:23"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"3046:4:23"},{"name":"x","nodeType":"YulIdentifier","src":"3052:1:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3043:2:23"},"nodeType":"YulFunctionCall","src":"3043:11:23"},"nodeType":"YulIf","src":"3040:134:23"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2986:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"2989:1:23","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"2995:4:23","type":""}],"src":"2955:225:23"},{"body":{"nodeType":"YulBlock","src":"3217:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3234:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3241:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3246:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3237:3:23"},"nodeType":"YulFunctionCall","src":"3237:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3227:6:23"},"nodeType":"YulFunctionCall","src":"3227:31:23"},"nodeType":"YulExpressionStatement","src":"3227:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3274:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3277:4:23","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3267:6:23"},"nodeType":"YulFunctionCall","src":"3267:15:23"},"nodeType":"YulExpressionStatement","src":"3267:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3298:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3301:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3291:6:23"},"nodeType":"YulFunctionCall","src":"3291:15:23"},"nodeType":"YulExpressionStatement","src":"3291:15:23"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"3185:127:23"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_26a18b82a6f0089994fa1fc7c15d389f66d55b2b42f9d4738227fb927dd79151__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"Caller does not has a DEFAULT_AD\")\n        mstore(add(headStart, 96), \"MIN_ROLE\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n}","id":23,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061010b5760003560e01c806335bb3e16116100a2578063a217fddf11610071578063a217fddf14610255578063ca15c8731461025d578063cfbd488514610270578063d539139314610283578063d547741f146102aa57600080fd5b806335bb3e16146101f157806336568abe146102045780639010d07c1461021757806391d148541461024257600080fd5b8063261707fa116100de578063261707fa14610191578063282c51f3146101a45780632d345670146101cb5780632f2ff15d146101de57600080fd5b806301ffc9a7146101105780630900cc331461013857806310511f961461014d578063248a9ca314610160575b600080fd5b61012361011e3660046108fe565b6102bd565b60405190151581526020015b60405180910390f35b61014b610146366004610944565b6102e8565b005b61014b61015b366004610944565b610345565b61018361016e36600461095f565b60009081526020819052604090206001015490565b60405190815260200161012f565b61014b61019f366004610944565b610396565b6101837f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b61014b6101d9366004610944565b6103e7565b61014b6101ec366004610978565b610419565b61014b6101ff366004610944565b610444565b61014b610212366004610978565b610476565b61022a6102253660046109a4565b6104ae565b6040516001600160a01b03909116815260200161012f565b610123610250366004610978565b6104cd565b610183600081565b61018361026b36600461095f565b6104f6565b61014b61027e366004610944565b61050d565b6101837f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61014b6102b8366004610978565b61055a565b60006001600160e01b03198216635a05180f60e01b14806102e257506102e28261057f565b92915050565b6102f36000336104cd565b6103185760405162461bcd60e51b815260040161030f906109c6565b60405180910390fd5b6103427f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8488261055a565b50565b6103506000336104cd565b61036c5760405162461bcd60e51b815260040161030f906109c6565b6103427f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84882610419565b6103a16000336104cd565b6103bd5760405162461bcd60e51b815260040161030f906109c6565b6103427f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a682610419565b6103f26000336104cd565b61040e5760405162461bcd60e51b815260040161030f906109c6565b61034260008261055a565b600082815260208190526040902060010154610434816105b4565b61043e83836105be565b50505050565b61044f6000336104cd565b61046b5760405162461bcd60e51b815260040161030f906109c6565b610342600082610419565b6001600160a01b038116331461049f5760405163334bd91960e11b815260040160405180910390fd5b6104a982826105f3565b505050565b60008281526001602052604081206104c69083610620565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526001602052604081206102e29061062c565b6105186000336104cd565b6105345760405162461bcd60e51b815260040161030f906109c6565b6103427f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6825b600082815260208190526040902060010154610575816105b4565b61043e83836105f3565b60006001600160e01b03198216637965db0b60e01b14806102e257506301ffc9a760e01b6001600160e01b03198316146102e2565b6103428133610636565b6000806105cb8484610673565b905080156104c65760008481526001602052604090206105eb9084610705565b509392505050565b600080610600848461071a565b905080156104c65760008481526001602052604090206105eb9084610785565b60006104c6838361079a565b60006102e2825490565b61064082826104cd565b61066f5760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161030f565b5050565b600061067f83836104cd565b6106fd576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556106b53390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016102e2565b5060006102e2565b60006104c6836001600160a01b0384166107c4565b600061072683836104cd565b156106fd576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016102e2565b60006104c6836001600160a01b03841661080b565b60008260000182815481106107b1576107b1610a0e565b9060005260206000200154905092915050565b60008181526001830160205260408120546106fd575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102e2565b600081815260018301602052604081205480156108f457600061082f600183610a24565b855490915060009061084390600190610a24565b90508082146108a857600086600001828154811061086357610863610a0e565b906000526020600020015490508087600001848154811061088657610886610a0e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806108b9576108b9610a45565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102e2565b60009150506102e2565b60006020828403121561091057600080fd5b81356001600160e01b0319811681146104c657600080fd5b80356001600160a01b038116811461093f57600080fd5b919050565b60006020828403121561095657600080fd5b6104c682610928565b60006020828403121561097157600080fd5b5035919050565b6000806040838503121561098b57600080fd5b8235915061099b60208401610928565b90509250929050565b600080604083850312156109b757600080fd5b50508035926020909101359150565b60208082526028908201527f43616c6c657220646f6573206e6f742068617320612044454641554c545f41446040820152674d494e5f524f4c4560c01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b818103818111156102e257634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212205683fd7d4d752e5828068546daa59d87c7e1a7147cc1d82c09bdbbc8a3b65bc464736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x35BB3E16 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x25D JUMPI DUP1 PUSH4 0xCFBD4885 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x35BB3E16 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x261707FA GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x261707FA EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x282C51F3 EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0x2D345670 EQ PUSH2 0x1CB JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x900CC33 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x10511F96 EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x160 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x123 PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0x8FE JUMP JUMPDEST PUSH2 0x2BD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14B PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x2E8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14B PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x345 JUMP JUMPDEST PUSH2 0x183 PUSH2 0x16E CALLDATASIZE PUSH1 0x4 PUSH2 0x95F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12F JUMP JUMPDEST PUSH2 0x14B PUSH2 0x19F CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x396 JUMP JUMPDEST PUSH2 0x183 PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 DUP2 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x1D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x3E7 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x1EC CALLDATASIZE PUSH1 0x4 PUSH2 0x978 JUMP JUMPDEST PUSH2 0x419 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x1FF CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x444 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x212 CALLDATASIZE PUSH1 0x4 PUSH2 0x978 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x225 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A4 JUMP JUMPDEST PUSH2 0x4AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12F JUMP JUMPDEST PUSH2 0x123 PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x978 JUMP JUMPDEST PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x183 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x183 PUSH2 0x26B CALLDATASIZE PUSH1 0x4 PUSH2 0x95F JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x27E CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x50D JUMP JUMPDEST PUSH2 0x183 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x14B PUSH2 0x2B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x978 JUMP JUMPDEST PUSH2 0x55A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x2E2 JUMPI POP PUSH2 0x2E2 DUP3 PUSH2 0x57F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2F3 PUSH1 0x0 CALLER PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x318 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30F SWAP1 PUSH2 0x9C6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x342 PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 DUP3 PUSH2 0x55A JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x350 PUSH1 0x0 CALLER PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x36C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30F SWAP1 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x342 PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 DUP3 PUSH2 0x419 JUMP JUMPDEST PUSH2 0x3A1 PUSH1 0x0 CALLER PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x3BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30F SWAP1 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x342 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP3 PUSH2 0x419 JUMP JUMPDEST PUSH2 0x3F2 PUSH1 0x0 CALLER PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x40E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30F SWAP1 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x342 PUSH1 0x0 DUP3 PUSH2 0x55A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x434 DUP2 PUSH2 0x5B4 JUMP JUMPDEST PUSH2 0x43E DUP4 DUP4 PUSH2 0x5BE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x44F PUSH1 0x0 CALLER PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x46B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30F SWAP1 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x342 PUSH1 0x0 DUP3 PUSH2 0x419 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x49F JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4A9 DUP3 DUP3 PUSH2 0x5F3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x4C6 SWAP1 DUP4 PUSH2 0x620 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x2E2 SWAP1 PUSH2 0x62C JUMP JUMPDEST PUSH2 0x518 PUSH1 0x0 CALLER PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x534 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30F SWAP1 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x342 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP3 JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x575 DUP2 PUSH2 0x5B4 JUMP JUMPDEST PUSH2 0x43E DUP4 DUP4 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x2E2 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0x342 DUP2 CALLER PUSH2 0x636 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5CB DUP5 DUP5 PUSH2 0x673 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x4C6 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x5EB SWAP1 DUP5 PUSH2 0x705 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x600 DUP5 DUP5 PUSH2 0x71A JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x4C6 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x5EB SWAP1 DUP5 PUSH2 0x785 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C6 DUP4 DUP4 PUSH2 0x79A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E2 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x640 DUP3 DUP3 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x66F JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x30F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x67F DUP4 DUP4 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x6FD JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x6B5 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x2E2 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C6 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7C4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x726 DUP4 DUP4 PUSH2 0x4CD JUMP JUMPDEST ISZERO PUSH2 0x6FD JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C6 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x80B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x7B1 JUMPI PUSH2 0x7B1 PUSH2 0xA0E JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x6FD JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x8F4 JUMPI PUSH1 0x0 PUSH2 0x82F PUSH1 0x1 DUP4 PUSH2 0xA24 JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x843 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0xA24 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ PUSH2 0x8A8 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x863 JUMPI PUSH2 0x863 PUSH2 0xA0E JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x886 JUMPI PUSH2 0x886 PUSH2 0xA0E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x8B9 JUMPI PUSH2 0x8B9 PUSH2 0xA45 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x910 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x4C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x956 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C6 DUP3 PUSH2 0x928 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x971 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x98B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x99B PUSH1 0x20 DUP5 ADD PUSH2 0x928 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C657220646F6573206E6F742068617320612044454641554C545F4144 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x4D494E5F524F4C45 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2E2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP DUP4 REVERT PUSH30 0x4D752E5828068546DAA59D87C7E1A7147CC1D82C09BDBBC8A3B65BC46473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"328:1415:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;729:212:2;;;;;;:::i;:::-;;:::i;:::-;;;470:14:23;;463:22;445:41;;433:2;418:18;729:212:2;;;;;;;;1633:107:22;;;;;;:::i;:::-;;:::i;:::-;;1520:105;;;;;;:::i;:::-;;:::i;3810:120:0:-;;;;;;:::i;:::-;3875:7;3901:12;;;;;;;;;;:22;;;;3810:120;;;;1197:25:23;;;1185:2;1170:18;3810:120:0;1051:177:23;1292:105:22;;;;;;:::i;:::-;;:::i;444:62::-;;482:24;444:62;;1173:111;;;;;;:::i;:::-;;:::i;4226:136:0:-;;;;;;:::i;:::-;;:::i;1056:109:22:-;;;;;;:::i;:::-;;:::i;5328:245:0:-;;;;;;:::i;:::-;;:::i;1526:142:2:-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1909:32:23;;;1891:51;;1879:2;1864:18;1526:142:2;1745:203:23;2854:136:0;;;;;;:::i;:::-;;:::i;2187:49::-;;2232:4;2187:49;;1836:131:2;;;;;;:::i;:::-;;:::i;1405:107:22:-;;;;;;:::i;:::-;;:::i;375:62::-;;413:24;375:62;;4642:138:0;;;;;;:::i;:::-;;:::i;729:212:2:-;814:4;-1:-1:-1;;;;;;837:57:2;;-1:-1:-1;;;837:57:2;;:97;;;898:36;922:11;898:23;:36::i;:::-;830:104;729:212;-1:-1:-1;;729:212:2:o;1633:107:22:-;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;;;;;;;;;1701:31:::1;482:24;1725:6;1701:10;:31::i;:::-;1633:107:::0;:::o;1520:105::-;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;1587:30:::1;482:24;1610:6;1587:9;:30::i;1292:105::-:0;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;1359:30:::1;413:24;1382:6;1359:9;:30::i;1173:111::-:0;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;1239:37:::1;2232:4:0;1270:5:22::0;1239:10:::1;:37::i;4226:136:0:-:0;3875:7;3901:12;;;;;;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4330:25:::1;4341:4;4347:7;4330:10;:25::i;:::-;;4226:136:::0;;;:::o;1056:109:22:-;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;1121:36:::1;2232:4:0;1151:5:22::0;1121:9:::1;:36::i;5328:245:0:-:0;-1:-1:-1;;;;;5421:34:0;;735:10:15;5421:34:0;5417:102;;5478:30;;-1:-1:-1;;;5478:30:0;;;;;;;;;;;5417:102;5529:37;5541:4;5547:18;5529:11;:37::i;:::-;;5328:245;;:::o;1526:142:2:-;1607:7;1633:18;;;:12;:18;;;;;:28;;1655:5;1633:21;:28::i;:::-;1626:35;1526:142;-1:-1:-1;;;1526:142:2:o;2854:136:0:-;2931:4;2954:12;;;;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;;;;2854:136::o;1836:131:2:-;1907:7;1933:18;;;:12;:18;;;;;:27;;:25;:27::i;1405:107:22:-;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;1473:31:::1;413:24;1497:6;4642:138:0::0;3875:7;3901:12;;;;;;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4747:26:::1;4759:4;4765:7;4747:11;:26::i;2565:202::-:0;2650:4;-1:-1:-1;;;;;;2673:47:0;;-1:-1:-1;;;2673:47:0;;:87;;-1:-1:-1;;;;;;;;;;861:40:17;;;2724:36:0;762:146:17;3199:103:0;3265:30;3276:4;735:10:15;3265::0;:30::i;2069:257:2:-;2155:4;2171:12;2186:31;2203:4;2209:7;2186:16;:31::i;:::-;2171:46;;2231:7;2227:69;;;2254:18;;;;:12;:18;;;;;:31;;2277:7;2254:22;:31::i;:::-;;2312:7;2069:257;-1:-1:-1;;;2069:257:2:o;2429:262::-;2516:4;2532:12;2547:32;2565:4;2571:7;2547:17;:32::i;:::-;2532:47;;2593:7;2589:72;;;2616:18;;;;:12;:18;;;;;:34;;2642:7;2616:25;:34::i;9574:156:21:-;9648:7;9698:22;9702:3;9714:5;9698:3;:22::i;9117:115::-;9180:7;9206:19;9214:3;4556:18;;4474:107;3432:197:0;3520:22;3528:4;3534:7;3520;:22::i;:::-;3515:108;;3565:47;;-1:-1:-1;;;3565:47:0;;-1:-1:-1;;;;;2736:32:23;;3565:47:0;;;2718:51:23;2785:18;;;2778:34;;;2691:18;;3565:47:0;2544:274:23;3515:108:0;3432:197;;:::o;6179:316::-;6256:4;6277:22;6285:4;6291:7;6277;:22::i;:::-;6272:217;;6315:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6315:29:0;;;;;;;;;:36;;-1:-1:-1;;6315:36:0;6347:4;6315:36;;;6397:12;735:10:15;;656:96;6397:12:0;-1:-1:-1;;;;;6370:40:0;6388:7;-1:-1:-1;;;;;6370:40:0;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:0;6424:11;;6272:217;-1:-1:-1;6473:5:0;6466:12;;8316:150:21;8386:4;8409:50;8414:3;-1:-1:-1;;;;;8434:23:21;;8409:4;:50::i;6730:317:0:-;6808:4;6828:22;6836:4;6842:7;6828;:22::i;:::-;6824:217;;;6898:5;6866:12;;;;;;;;;;;-1:-1:-1;;;;;6866:29:0;;;;;;;;;;:37;;-1:-1:-1;;6866:37:0;;;6922:40;735:10:15;;6866:12:0;;6922:40;;6898:5;6922:40;-1:-1:-1;6983:4:0;6976:11;;8634:156:21;8707:4;8730:53;8738:3;-1:-1:-1;;;;;8758:23:21;;8730:7;:53::i;4923:118::-;4990:7;5016:3;:11;;5028:5;5016:18;;;;;;;;:::i;:::-;;;;;;;;;5009:25;;4923:118;;;;:::o;2241:406::-;2304:4;4360:21;;;:14;;;:21;;;;;;2320:321;;-1:-1:-1;2362:23:21;;;;;;;;:11;:23;;;;;;;;;;;;;2544:18;;2520:21;;;:14;;;:21;;;;;;:42;;;;2576:11;;2815:1368;2881:4;3010:21;;;:14;;;:21;;;;;;3046:13;;3042:1135;;3413:18;3434:12;3445:1;3434:8;:12;:::i;:::-;3480:18;;3413:33;;-1:-1:-1;3460:17:21;;3480:22;;3501:1;;3480:22;:::i;:::-;3460:42;;3535:9;3521:10;:23;3517:378;;3564:17;3584:3;:11;;3596:9;3584:22;;;;;;;;:::i;:::-;;;;;;;;;3564:42;;3731:9;3705:3;:11;;3717:10;3705:23;;;;;;;;:::i;:::-;;;;;;;;;;;;:35;;;;3844:25;;;:14;;;:25;;;;;:36;;;3517:378;3973:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;4076:3;:14;;:21;4091:5;4076:21;;;;;;;;;;;4069:28;;;4119:4;4112:11;;;;;;;3042:1135;4161:5;4154:12;;;;;14:286:23;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:23;;209:43;;199:71;;266:1;263;256:12;497:173;565:20;;-1:-1:-1;;;;;614:31:23;;604:42;;594:70;;660:1;657;650:12;594:70;497:173;;;:::o;675:186::-;734:6;787:2;775:9;766:7;762:23;758:32;755:52;;;803:1;800;793:12;755:52;826:29;845:9;826:29;:::i;866:180::-;925:6;978:2;966:9;957:7;953:23;949:32;946:52;;;994:1;991;984:12;946:52;-1:-1:-1;1017:23:23;;866:180;-1:-1:-1;866:180:23:o;1233:254::-;1301:6;1309;1362:2;1350:9;1341:7;1337:23;1333:32;1330:52;;;1378:1;1375;1368:12;1330:52;1414:9;1401:23;1391:33;;1443:38;1477:2;1466:9;1462:18;1443:38;:::i;:::-;1433:48;;1233:254;;;;;:::o;1492:248::-;1560:6;1568;1621:2;1609:9;1600:7;1596:23;1592:32;1589:52;;;1637:1;1634;1627:12;1589:52;-1:-1:-1;;1660:23:23;;;1730:2;1715:18;;;1702:32;;-1:-1:-1;1492:248:23:o;2135:404::-;2337:2;2319:21;;;2376:2;2356:18;;;2349:30;2415:34;2410:2;2395:18;;2388:62;-1:-1:-1;;;2481:2:23;2466:18;;2459:38;2529:3;2514:19;;2135:404::o;2823:127::-;2884:10;2879:3;2875:20;2872:1;2865:31;2915:4;2912:1;2905:15;2939:4;2936:1;2929:15;2955:225;3022:9;;;3043:11;;;3040:134;;;3096:10;3091:3;3087:20;3084:1;3077:31;3131:4;3128:1;3121:15;3159:4;3156:1;3149:15;3185:127;3246:10;3241:3;3237:20;3234:1;3227:31;3277:4;3274:1;3267:15;3301:4;3298:1;3291:15"},"gasEstimates":{"creation":{"codeDepositCost":"541000","executionCost":"575","totalCost":"541575"},"external":{"BURNER_ROLE()":"240","DEFAULT_ADMIN_ROLE()":"217","MINTER_ROLE()":"283","getRoleAdmin(bytes32)":"2537","getRoleMember(bytes32,uint256)":"infinite","getRoleMemberCount(bytes32)":"infinite","grantAdmin(address)":"infinite","grantBurner(address)":"infinite","grantMinter(address)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2740","renounceRole(bytes32,address)":"infinite","revokeAdmin(address)":"infinite","revokeBurner(address)":"infinite","revokeMinter(address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"infinite"}},"methodIdentifiers":{"BURNER_ROLE()":"282c51f3","DEFAULT_ADMIN_ROLE()":"a217fddf","MINTER_ROLE()":"d5391393","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantAdmin(address)":"35bb3e16","grantBurner(address)":"10511f96","grantMinter(address)":"261707fa","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeAdmin(address)":"2d345670","revokeBurner(address)":"0900cc33","revokeMinter(address)":"cfbd4885","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"grantAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"grantBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"grantMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"revokeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PalmNFT.sol\":\"ACL\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControlEnumerable} from \\\"./IAccessControlEnumerable.sol\\\";\\nimport {AccessControl} from \\\"../AccessControl.sol\\\";\\nimport {EnumerableSet} from \\\"../../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 role => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        bool granted = super._grantRole(role, account);\\n        if (granted) {\\n            _roleMembers[role].add(account);\\n        }\\n        return granted;\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        bool revoked = super._revokeRole(role, account);\\n        if (revoked) {\\n            _roleMembers[role].remove(account);\\n        }\\n        return revoked;\\n    }\\n}\\n\",\"keccak256\":\"0xb1c906fcd870fc8dfedb63bfb1bc58b4d2a7469bc13cc44d996fda430693850a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"../IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1435f102633849858e75d7bed14c636f25448ceb3406d82992b0f2df52f4306\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x36797469c391ea5ba27408e6ca8adf0824ba6f3adea9c139be18bd6f63232c16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/PalmNFT.sol\":{\"content\":\"pragma solidity 0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\\\";\\r\\n\\r\\ncontract ACL is AccessControlEnumerable {\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(\\r\\n            hasRole(MINTER_ROLE, msg.sender),\\r\\n            \\\"Caller does not has a MINTER_ROLE\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyBurner() {\\r\\n        require(\\r\\n            hasRole(BURNER_ROLE, msg.sender),\\r\\n            \\\"Caller does not has a BURNER_ROLE\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(\\r\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\r\\n            \\\"Caller does not has a DEFAULT_ADMIN_ROLE\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function grantAdmin(address admin) external onlyAdmin {\\r\\n        grantRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n    }\\r\\n\\r\\n    function revokeAdmin(address admin) external onlyAdmin {\\r\\n        revokeRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n    }\\r\\n\\r\\n    function grantMinter(address minter) external onlyAdmin {\\r\\n        grantRole(MINTER_ROLE, minter);\\r\\n    }\\r\\n\\r\\n    function revokeMinter(address minter) external onlyAdmin {\\r\\n        revokeRole(MINTER_ROLE, minter);\\r\\n    }\\r\\n\\r\\n    function grantBurner(address burner) external onlyAdmin {\\r\\n        grantRole(BURNER_ROLE, burner);\\r\\n    }\\r\\n\\r\\n    function revokeBurner(address burner) external onlyAdmin {\\r\\n        revokeRole(BURNER_ROLE, burner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract PalmNFT is ERC721URIStorage, ERC721Enumerable, ACL {\\r\\n    event Memo(string memo);\\r\\n\\r\\n    bool public isPubliclyMintable = false;\\r\\n    bool public isSBT = false; //soul-bound nft\\r\\n    uint256 private _tokenIds;\\r\\n\\r\\n    mapping(address => bool) public freezeAccounts;\\r\\n\\r\\n    event Freeze(address account);\\r\\n    event Unfreeze(address account);\\r\\n\\r\\n\\r\\n    bool internal locked;\\r\\n\\r\\n    modifier noReentrant() {\\r\\n        require(!locked);\\r\\n        locked = true;\\r\\n        _;\\r\\n        locked = false;\\r\\n    }\\r\\n\\r\\n    constructor() ERC721(\\\"Palm-NFT\\\", \\\"PalmNFT\\\") {\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _grantRole(MINTER_ROLE, msg.sender);\\r\\n        _grantRole(BURNER_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    function setPubliclyMintable(bool mintable) public onlyAdmin {\\r\\n        isPubliclyMintable = mintable;\\r\\n    }\\r\\n\\r\\n    function setToSBT(bool SBT) public onlyAdmin {\\r\\n        isSBT = SBT;\\r\\n    }\\r\\n\\r\\n    function freeze(address account) public onlyAdmin {\\r\\n        freezeAccounts[account] = true;\\r\\n        emit Freeze(account);\\r\\n    }\\r\\n\\r\\n    function unfreeze(address account) public onlyAdmin {\\r\\n        freezeAccounts[account] = false;\\r\\n        emit Freeze(account);\\r\\n    }\\r\\n\\r\\n    function safeMint(address to, string memory uri) public noReentrant returns (uint256) {\\r\\n        bool isMinter = hasRole(MINTER_ROLE, msg.sender);\\r\\n\\r\\n        if (isPubliclyMintable || isMinter) {\\r\\n            uint256 tokenId = _tokenIds;\\r\\n            _safeMint(to, tokenId);\\r\\n            _setTokenURI(tokenId, uri);\\r\\n            _tokenIds += 1;\\r\\n\\r\\n            return tokenId;\\r\\n        } else {\\r\\n            require(isPubliclyMintable, \\\"This NFT is not publicly mintable\\\");\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTokenURI(uint256 tokenId, string memory uri) public onlyAdmin {\\r\\n        _setTokenURI(tokenId, uri);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) public {\\r\\n        require(!isSBT, \\\"This NFT was not permitted to burn\\\");\\r\\n        require(freezeAccounts[msg.sender] != true, \\\"Caller has been freeze\\\");\\r\\n\\r\\n        bool isBurner = hasRole(BURNER_ROLE, msg.sender);\\r\\n        if (isBurner) {\\r\\n            _burn(tokenId);\\r\\n        } else {\\r\\n            require(\\r\\n                msg.sender == ownerOf(tokenId),\\r\\n                \\\"Caller does not own this NFT\\\"\\r\\n            );\\r\\n\\r\\n            _burn(tokenId);\\r\\n        }\\r\\n    }\\r\\n    function transfer(address to, uint256 tokenId) public {\\r\\n        require(!isSBT, \\\"This NFT was not permitted to transfer\\\");\\r\\n        require(freezeAccounts[msg.sender] != true, \\\"Caller has been freeze\\\");\\r\\n        safeTransferFrom(msg.sender, to, tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function safeTransfer(address to, uint256 tokenId) public {\\r\\n        require(!isSBT, \\\"This NFT was not permitted to transfer\\\");\\r\\n        require(freezeAccounts[msg.sender] != true, \\\"Caller has been freeze\\\");\\r\\n        safeTransferFrom(msg.sender, to, tokenId);\\r\\n    }\\r\\n\\r\\n    // overrides\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    function _increaseBalance(\\r\\n        address account, \\r\\n        uint128 value\\r\\n    ) internal override(ERC721, ERC721Enumerable) {\\r\\n        super._increaseBalance(account, value);\\r\\n    }\\r\\n\\r\\n    function _update(\\r\\n        address to, \\r\\n        uint256 tokenId, \\r\\n        address auth\\r\\n    ) internal virtual override(ERC721, ERC721Enumerable) returns (address){\\r\\n        return super._update(to, tokenId, auth);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override(AccessControlEnumerable, ERC721Enumerable, ERC721URIStorage)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x76c95fe2f0dac1925795d171ed079315468030d3023c10f433a69ae5ae24c51a\"}},\"version\":1}","storageLayout":{"storage":[{"astId":26,"contract":"contracts/PalmNFT.sol:ACL","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)21_storage)"},{"astId":400,"contract":"contracts/PalmNFT.sol:ACL","label":"_roleMembers","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(AddressSet)4227_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(AddressSet)4227_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)4227_storage"},"t_mapping(t_bytes32,t_struct(RoleData)21_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)21_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)4227_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":4226,"contract":"contracts/PalmNFT.sol:ACL","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3912_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)21_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":18,"contract":"contracts/PalmNFT.sol:ACL","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":20,"contract":"contracts/PalmNFT.sol:ACL","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)3912_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":3907,"contract":"contracts/PalmNFT.sol:ACL","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":3911,"contract":"contracts/PalmNFT.sol:ACL","label":"_positions","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"PalmNFT":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ERC721EnumerableForbiddenBatchMint","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"ERC721OutOfBoundsIndex","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Freeze","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"memo","type":"string"}],"name":"Memo","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unfreeze","type":"event"},{"inputs":[],"name":"BURNER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"freeze","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"freezeAccounts","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"admin","type":"address"}],"name":"grantAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"burner","type":"address"}],"name":"grantBurner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"minter","type":"address"}],"name":"grantMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPubliclyMintable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSBT","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"admin","type":"address"}],"name":"revokeAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"burner","type":"address"}],"name":"revokeBurner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"minter","type":"address"}],"name":"revokeMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"string","name":"uri","type":"string"}],"name":"safeMint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"mintable","type":"bool"}],"name":"setPubliclyMintable","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"SBT","type":"bool"}],"name":"setToSBT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"uri","type":"string"}],"name":"setTokenURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"unfreeze","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"ERC721EnumerableForbiddenBatchMint()":[{"details":"Batch mint is not allowed."}],"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}],"ERC721OutOfBoundsIndex(address,uint256)":[{"details":"An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index."}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenByIndex(uint256)":{"details":"See {IERC721Enumerable-tokenByIndex}."},"tokenOfOwnerByIndex(address,uint256)":{"details":"See {IERC721Enumerable-tokenOfOwnerByIndex}."},"totalSupply()":{"details":"See {IERC721Enumerable-totalSupply}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4725":{"entryPoint":null,"id":4725,"parameterSlots":0,"returnSlots":0},"@_785":{"entryPoint":null,"id":785,"parameterSlots":2,"returnSlots":0},"@_add_3954":{"entryPoint":null,"id":3954,"parameterSlots":2,"returnSlots":1},"@_contains_4057":{"entryPoint":null,"id":4057,"parameterSlots":2,"returnSlots":1},"@_grantRole_256":{"entryPoint":302,"id":256,"parameterSlots":2,"returnSlots":1},"@_grantRole_487":{"entryPoint":241,"id":487,"parameterSlots":2,"returnSlots":1},"@_msgSender_2441":{"entryPoint":null,"id":2441,"parameterSlots":0,"returnSlots":1},"@add_4254":{"entryPoint":480,"id":4254,"parameterSlots":2,"returnSlots":1},"@hasRole_80":{"entryPoint":null,"id":80,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":652,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":735,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":592,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":570,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2732:23","statements":[{"nodeType":"YulBlock","src":"6:3:23","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:23"},"nodeType":"YulFunctionCall","src":"66:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:23"},"nodeType":"YulFunctionCall","src":"56:31:23"},"nodeType":"YulExpressionStatement","src":"56:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:23"},"nodeType":"YulFunctionCall","src":"96:15:23"},"nodeType":"YulExpressionStatement","src":"96:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:23"},"nodeType":"YulFunctionCall","src":"120:15:23"},"nodeType":"YulExpressionStatement","src":"120:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:23"},{"body":{"nodeType":"YulBlock","src":"201:325:23","statements":[{"nodeType":"YulAssignment","src":"211:22:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"225:1:23","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"228:4:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"221:3:23"},"nodeType":"YulFunctionCall","src":"221:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"211:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"242:38:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"272:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"278:1:23","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"268:3:23"},"nodeType":"YulFunctionCall","src":"268:12:23"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"246:18:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"319:31:23","statements":[{"nodeType":"YulAssignment","src":"321:27:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"335:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"343:4:23","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"331:3:23"},"nodeType":"YulFunctionCall","src":"331:17:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"321:6:23"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"299:18:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"292:6:23"},"nodeType":"YulFunctionCall","src":"292:26:23"},"nodeType":"YulIf","src":"289:61:23"},{"body":{"nodeType":"YulBlock","src":"409:111:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"430:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"437:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"442:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"433:3:23"},"nodeType":"YulFunctionCall","src":"433:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"423:6:23"},"nodeType":"YulFunctionCall","src":"423:31:23"},"nodeType":"YulExpressionStatement","src":"423:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"474:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"477:4:23","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"467:6:23"},"nodeType":"YulFunctionCall","src":"467:15:23"},"nodeType":"YulExpressionStatement","src":"467:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"502:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"505:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"495:6:23"},"nodeType":"YulFunctionCall","src":"495:15:23"},"nodeType":"YulExpressionStatement","src":"495:15:23"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"365:18:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"388:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"396:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"385:2:23"},"nodeType":"YulFunctionCall","src":"385:14:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"362:2:23"},"nodeType":"YulFunctionCall","src":"362:38:23"},"nodeType":"YulIf","src":"359:161:23"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"181:4:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"190:6:23","type":""}],"src":"146:380:23"},{"body":{"nodeType":"YulBlock","src":"587:65:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"604:1:23","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"607:3:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"597:6:23"},"nodeType":"YulFunctionCall","src":"597:14:23"},"nodeType":"YulExpressionStatement","src":"597:14:23"},{"nodeType":"YulAssignment","src":"620:26:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"638:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"641:4:23","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"628:9:23"},"nodeType":"YulFunctionCall","src":"628:18:23"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"620:4:23"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"570:3:23","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"578:4:23","type":""}],"src":"531:121:23"},{"body":{"nodeType":"YulBlock","src":"738:464:23","statements":[{"body":{"nodeType":"YulBlock","src":"771:425:23","statements":[{"nodeType":"YulVariableDeclaration","src":"785:11:23","value":{"kind":"number","nodeType":"YulLiteral","src":"795:1:23","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"789:2:23","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"816:2:23"},{"name":"array","nodeType":"YulIdentifier","src":"820:5:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:23"},"nodeType":"YulFunctionCall","src":"809:17:23"},"nodeType":"YulExpressionStatement","src":"809:17:23"},{"nodeType":"YulVariableDeclaration","src":"839:31:23","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"861:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"865:4:23","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"851:9:23"},"nodeType":"YulFunctionCall","src":"851:19:23"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"843:4:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"883:57:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"906:4:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"916:1:23","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"923:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"935:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"919:3:23"},"nodeType":"YulFunctionCall","src":"919:19:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"912:3:23"},"nodeType":"YulFunctionCall","src":"912:27:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"902:3:23"},"nodeType":"YulFunctionCall","src":"902:38:23"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"887:11:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"977:23:23","statements":[{"nodeType":"YulAssignment","src":"979:19:23","value":{"name":"data","nodeType":"YulIdentifier","src":"994:4:23"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"979:11:23"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"959:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"971:4:23","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"956:2:23"},"nodeType":"YulFunctionCall","src":"956:20:23"},"nodeType":"YulIf","src":"953:47:23"},{"nodeType":"YulVariableDeclaration","src":"1013:41:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1027:4:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:23","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1044:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"1049:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1040:3:23"},"nodeType":"YulFunctionCall","src":"1040:12:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1033:3:23"},"nodeType":"YulFunctionCall","src":"1033:20:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:23"},"nodeType":"YulFunctionCall","src":"1023:31:23"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1017:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1067:24:23","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"1080:11:23"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"1071:5:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1165:21:23","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1174:5:23"},{"name":"_1","nodeType":"YulIdentifier","src":"1181:2:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"1167:6:23"},"nodeType":"YulFunctionCall","src":"1167:17:23"},"nodeType":"YulExpressionStatement","src":"1167:17:23"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1115:5:23"},{"name":"_2","nodeType":"YulIdentifier","src":"1122:2:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1112:2:23"},"nodeType":"YulFunctionCall","src":"1112:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1126:26:23","statements":[{"nodeType":"YulAssignment","src":"1128:22:23","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1141:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"1148:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1137:3:23"},"nodeType":"YulFunctionCall","src":"1137:13:23"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"1128:5:23"}]}]},"pre":{"nodeType":"YulBlock","src":"1108:3:23","statements":[]},"src":"1104:82:23"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"754:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"759:2:23","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"751:2:23"},"nodeType":"YulFunctionCall","src":"751:11:23"},"nodeType":"YulIf","src":"748:448:23"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"710:5:23","type":""},{"name":"len","nodeType":"YulTypedName","src":"717:3:23","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"722:10:23","type":""}],"src":"657:545:23"},{"body":{"nodeType":"YulBlock","src":"1292:81:23","statements":[{"nodeType":"YulAssignment","src":"1302:65:23","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1317:4:23"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1335:1:23","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"1338:3:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1331:3:23"},"nodeType":"YulFunctionCall","src":"1331:11:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1348:1:23","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1344:3:23"},"nodeType":"YulFunctionCall","src":"1344:6:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1327:3:23"},"nodeType":"YulFunctionCall","src":"1327:24:23"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1323:3:23"},"nodeType":"YulFunctionCall","src":"1323:29:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1313:3:23"},"nodeType":"YulFunctionCall","src":"1313:40:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1359:1:23","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"1362:3:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1355:3:23"},"nodeType":"YulFunctionCall","src":"1355:11:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1310:2:23"},"nodeType":"YulFunctionCall","src":"1310:57:23"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"1302:4:23"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1269:4:23","type":""},{"name":"len","nodeType":"YulTypedName","src":"1275:3:23","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"1283:4:23","type":""}],"src":"1207:166:23"},{"body":{"nodeType":"YulBlock","src":"1474:1256:23","statements":[{"nodeType":"YulVariableDeclaration","src":"1484:24:23","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1504:3:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1498:5:23"},"nodeType":"YulFunctionCall","src":"1498:10:23"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"1488:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1551:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1553:16:23"},"nodeType":"YulFunctionCall","src":"1553:18:23"},"nodeType":"YulExpressionStatement","src":"1553:18:23"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1523:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1539:2:23","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1543:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1535:3:23"},"nodeType":"YulFunctionCall","src":"1535:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"1547:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1531:3:23"},"nodeType":"YulFunctionCall","src":"1531:18:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1520:2:23"},"nodeType":"YulFunctionCall","src":"1520:30:23"},"nodeType":"YulIf","src":"1517:56:23"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1626:4:23"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1664:4:23"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"1658:5:23"},"nodeType":"YulFunctionCall","src":"1658:11:23"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"1632:25:23"},"nodeType":"YulFunctionCall","src":"1632:38:23"},{"name":"newLen","nodeType":"YulIdentifier","src":"1672:6:23"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"1582:43:23"},"nodeType":"YulFunctionCall","src":"1582:97:23"},"nodeType":"YulExpressionStatement","src":"1582:97:23"},{"nodeType":"YulVariableDeclaration","src":"1688:18:23","value":{"kind":"number","nodeType":"YulLiteral","src":"1705:1:23","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"1692:9:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1715:23:23","value":{"kind":"number","nodeType":"YulLiteral","src":"1734:4:23","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"1719:11:23","type":""}]},{"nodeType":"YulAssignment","src":"1747:24:23","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"1760:11:23"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"1747:9:23"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"1817:656:23","statements":[{"nodeType":"YulVariableDeclaration","src":"1831:35:23","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1850:6:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1862:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1858:3:23"},"nodeType":"YulFunctionCall","src":"1858:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1846:3:23"},"nodeType":"YulFunctionCall","src":"1846:20:23"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"1835:7:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1879:49:23","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1923:4:23"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"1893:29:23"},"nodeType":"YulFunctionCall","src":"1893:35:23"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"1883:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1941:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"1950:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1945:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"2028:172:23","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2053:6:23"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2071:3:23"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2076:9:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2067:3:23"},"nodeType":"YulFunctionCall","src":"2067:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2061:5:23"},"nodeType":"YulFunctionCall","src":"2061:26:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2046:6:23"},"nodeType":"YulFunctionCall","src":"2046:42:23"},"nodeType":"YulExpressionStatement","src":"2046:42:23"},{"nodeType":"YulAssignment","src":"2105:24:23","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2119:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2127:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2115:3:23"},"nodeType":"YulFunctionCall","src":"2115:14:23"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2105:6:23"}]},{"nodeType":"YulAssignment","src":"2146:40:23","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2163:9:23"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2174:11:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2159:3:23"},"nodeType":"YulFunctionCall","src":"2159:27:23"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2146:9:23"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1975:1:23"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"1978:7:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1972:2:23"},"nodeType":"YulFunctionCall","src":"1972:14:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1987:28:23","statements":[{"nodeType":"YulAssignment","src":"1989:24:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1998:1:23"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2001:11:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1994:3:23"},"nodeType":"YulFunctionCall","src":"1994:19:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1989:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"1968:3:23","statements":[]},"src":"1964:236:23"},{"body":{"nodeType":"YulBlock","src":"2248:166:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:43:23","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2293:3:23"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2298:9:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2289:3:23"},"nodeType":"YulFunctionCall","src":"2289:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2283:5:23"},"nodeType":"YulFunctionCall","src":"2283:26:23"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"2270:9:23","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2333:6:23"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"2345:9:23"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2372:1:23","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"2375:6:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2368:3:23"},"nodeType":"YulFunctionCall","src":"2368:14:23"},{"kind":"number","nodeType":"YulLiteral","src":"2384:3:23","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2364:3:23"},"nodeType":"YulFunctionCall","src":"2364:24:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2394:1:23","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2390:3:23"},"nodeType":"YulFunctionCall","src":"2390:6:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2360:3:23"},"nodeType":"YulFunctionCall","src":"2360:37:23"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2356:3:23"},"nodeType":"YulFunctionCall","src":"2356:42:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2341:3:23"},"nodeType":"YulFunctionCall","src":"2341:58:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2326:6:23"},"nodeType":"YulFunctionCall","src":"2326:74:23"},"nodeType":"YulExpressionStatement","src":"2326:74:23"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"2219:7:23"},{"name":"newLen","nodeType":"YulIdentifier","src":"2228:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2216:2:23"},"nodeType":"YulFunctionCall","src":"2216:19:23"},"nodeType":"YulIf","src":"2213:201:23"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2434:4:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2448:1:23","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"2451:6:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2444:3:23"},"nodeType":"YulFunctionCall","src":"2444:14:23"},{"kind":"number","nodeType":"YulLiteral","src":"2460:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2440:3:23"},"nodeType":"YulFunctionCall","src":"2440:22:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2427:6:23"},"nodeType":"YulFunctionCall","src":"2427:36:23"},"nodeType":"YulExpressionStatement","src":"2427:36:23"}]},"nodeType":"YulCase","src":"1810:663:23","value":{"kind":"number","nodeType":"YulLiteral","src":"1815:1:23","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2490:234:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2504:14:23","value":{"kind":"number","nodeType":"YulLiteral","src":"2517:1:23","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2508:5:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"2553:67:23","statements":[{"nodeType":"YulAssignment","src":"2571:35:23","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2590:3:23"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2595:9:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2586:3:23"},"nodeType":"YulFunctionCall","src":"2586:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2580:5:23"},"nodeType":"YulFunctionCall","src":"2580:26:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2571:5:23"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"2534:6:23"},"nodeType":"YulIf","src":"2531:89:23"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2640:4:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2699:5:23"},{"name":"newLen","nodeType":"YulIdentifier","src":"2706:6:23"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"2646:52:23"},"nodeType":"YulFunctionCall","src":"2646:67:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2633:6:23"},"nodeType":"YulFunctionCall","src":"2633:81:23"},"nodeType":"YulExpressionStatement","src":"2633:81:23"}]},"nodeType":"YulCase","src":"2482:242:23","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1790:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"1798:2:23","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1787:2:23"},"nodeType":"YulFunctionCall","src":"1787:14:23"},"nodeType":"YulSwitch","src":"1780:944:23"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1459:4:23","type":""},{"name":"src","nodeType":"YulTypedName","src":"1465:3:23","type":""}],"src":"1378:1352:23"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":23,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6080604052600d805461ffff191690553480156200001c57600080fd5b506040518060400160405280600881526020016714185b1b4b53919560c21b8152506040518060400160405280600781526020016614185b1b53919560ca1b81525081600090816200006f9190620002df565b5060016200007e8282620002df565b506200009091506000905033620000f1565b50620000bd7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620000f1565b50620000ea7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84833620000f1565b50620003ab565b6000806200010084846200012e565b9050801562000125576000848152600c60205260409020620001239084620001e0565b505b90505b92915050565b6000828152600b602090815260408083206001600160a01b038516845290915281205460ff16620001d7576000838152600b602090815260408083206001600160a01b03861684529091529020805460ff191660011790556200018e3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000128565b50600062000128565b600062000125836001600160a01b0384166000818152600183016020526040812054620001d75750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000128565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200026557607f821691505b6020821081036200028657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002da57600081815260208120601f850160051c81016020861015620002b55750805b601f850160051c820191505b81811015620002d657828155600101620002c1565b5050505b505050565b81516001600160401b03811115620002fb57620002fb6200023a565b62000313816200030c845462000250565b846200028c565b602080601f8311600181146200034b5760008415620003325750858301515b600019600386901b1c1916600185901b178555620002d6565b600085815260208120601f198616915b828110156200037c578886015182559484019460019091019084016200035b565b50858210156200039b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61262980620003bb6000396000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c80634f6ccce711610151578063b88d4fde116100c3578063d539139311610087578063d539139314610563578063d547741f14610578578063dcf993ee1461058b578063e276fea314610598578063e485857b146105bb578063e985e9c5146105ce57600080fd5b8063b88d4fde14610504578063c87b56dd14610517578063ca15c8731461052a578063cfbd48851461053d578063d204c45e1461055057600080fd5b80639010d07c116101155780639010d07c146104bb57806391d14854146104ce57806395d89b41146104e1578063a217fddf146104e9578063a22cb465146104f1578063a9059cbb1461041057600080fd5b80634f6ccce71461045c5780636352211e1461046f57806370a082311461048257806371222467146104955780638d1fdf2f146104a857600080fd5b8063282c51f3116101ea57806336568abe116101ae57806336568abe146103eb5780633cf40df3146103fe578063423f6cef1461041057806342842e0e1461042357806342966c681461043657806345c8b1a61461044957600080fd5b8063282c51f31461038a5780632d3456701461039f5780632f2ff15d146103b25780632f745c59146103c557806335bb3e16146103d857600080fd5b806310511f961161023c57806310511f9614610309578063162094c41461031c57806318160ddd1461032f57806323b872dd14610341578063248a9ca314610354578063261707fa1461037757600080fd5b806301ffc9a71461027957806306fdde03146102a1578063081812fc146102b65780630900cc33146102e1578063095ea7b3146102f6575b600080fd5b61028c610287366004611f88565b6105e1565b60405190151581526020015b60405180910390f35b6102a96105f2565b6040516102989190611ff5565b6102c96102c4366004612008565b610684565b6040516001600160a01b039091168152602001610298565b6102f46102ef36600461203d565b6106ad565b005b6102f4610304366004612058565b6106f8565b6102f461031736600461203d565b610707565b6102f461032a36600461212e565b610746565b6009545b604051908152602001610298565b6102f461034f366004612175565b610777565b610333610362366004612008565b6000908152600b602052604090206001015490565b6102f461038536600461203d565b610802565b6103336000805160206125b483398151915281565b6102f46103ad36600461203d565b610841565b6102f46103c03660046121b1565b610873565b6103336103d3366004612058565b610898565b6102f46103e636600461203d565b6108fd565b6102f46103f93660046121b1565b61092f565b600d5461028c90610100900460ff1681565b6102f461041e366004612058565b610967565b6102f4610431366004612175565b610a32565b6102f4610444366004612008565b610a4d565b6102f461045736600461203d565b610baa565b61033361046a366004612008565b610c29565b6102c961047d366004612008565b610c82565b61033361049036600461203d565b610c8d565b6102f46104a33660046121ed565b610cd5565b6102f46104b636600461203d565b610d0f565b6102c96104c9366004612208565b610d8a565b61028c6104dc3660046121b1565b610da9565b6102a9610dd4565b610333600081565b6102f46104ff36600461222a565b610de3565b6102f4610512366004612254565b610dee565b6102a9610525366004612008565b610e05565b610333610538366004612008565b610e10565b6102f461054b36600461203d565b610e27565b61033361055e3660046122d0565b610e66565b6103336000805160206125d483398151915281565b6102f46105863660046121b1565b610f61565b600d5461028c9060ff1681565b61028c6105a636600461203d565b600f6020526000908152604090205460ff1681565b6102f46105c93660046121ed565b610f86565b61028c6105dc366004612308565b610fc7565b60006105ec82610ff5565b92915050565b60606000805461060190612332565b80601f016020809104026020016040519081016040528092919081815260200182805461062d90612332565b801561067a5780601f1061064f5761010080835404028352916020019161067a565b820191906000526020600020905b81548152906001019060200180831161065d57829003601f168201915b5050505050905090565b600061068f8261101a565b506000828152600460205260409020546001600160a01b03166105ec565b6106b8600033610da9565b6106dd5760405162461bcd60e51b81526004016106d49061236c565b60405180910390fd5b6106f56000805160206125b483398151915282610f61565b50565b610703828233611053565b5050565b610712600033610da9565b61072e5760405162461bcd60e51b81526004016106d49061236c565b6106f56000805160206125b483398151915282610873565b610751600033610da9565b61076d5760405162461bcd60e51b81526004016106d49061236c565b6107038282611060565b6001600160a01b0382166107a157604051633250574960e11b8152600060048201526024016106d4565b60006107ae8383336110b0565b9050836001600160a01b0316816001600160a01b0316146107fc576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016106d4565b50505050565b61080d600033610da9565b6108295760405162461bcd60e51b81526004016106d49061236c565b6106f56000805160206125d483398151915282610873565b61084c600033610da9565b6108685760405162461bcd60e51b81526004016106d49061236c565b6106f5600082610f61565b6000828152600b602052604090206001015461088e816110c5565b6107fc83836110cf565b60006108a383610c8d565b82106108d45760405163295f44f760e21b81526001600160a01b0384166004820152602481018390526044016106d4565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b610908600033610da9565b6109245760405162461bcd60e51b81526004016106d49061236c565b6106f5600082610873565b6001600160a01b03811633146109585760405163334bd91960e11b815260040160405180910390fd5b6109628282611104565b505050565b600d54610100900460ff16156109ce5760405162461bcd60e51b815260206004820152602660248201527f54686973204e465420776173206e6f74207065726d697474656420746f20747260448201526530b739b332b960d11b60648201526084016106d4565b336000908152600f602052604090205460ff161515600103610a2b5760405162461bcd60e51b815260206004820152601660248201527543616c6c657220686173206265656e20667265657a6560501b60448201526064016106d4565b6107033383835b61096283838360405180602001604052806000815250610dee565b600d54610100900460ff1615610ab05760405162461bcd60e51b815260206004820152602260248201527f54686973204e465420776173206e6f74207065726d697474656420746f206275604482015261393760f11b60648201526084016106d4565b336000908152600f602052604090205460ff161515600103610b0d5760405162461bcd60e51b815260206004820152601660248201527543616c6c657220686173206265656e20667265657a6560501b60448201526064016106d4565b6000610b276000805160206125b483398151915233610da9565b90508015610b385761070382611131565b610b4182610c82565b6001600160a01b0316336001600160a01b031614610ba15760405162461bcd60e51b815260206004820152601c60248201527f43616c6c657220646f6573206e6f74206f776e2074686973204e46540000000060448201526064016106d4565b61070382611131565b610bb5600033610da9565b610bd15760405162461bcd60e51b81526004016106d49061236c565b6001600160a01b0381166000818152600f6020908152604091829020805460ff1916905590519182527faf85b60d26151edd11443b704d424da6c43d0468f2235ebae3d1904dbc32304991015b60405180910390a150565b6000610c3460095490565b8210610c5d5760405163295f44f760e21b815260006004820152602481018390526044016106d4565b60098281548110610c7057610c706123b4565b90600052602060002001549050919050565b60006105ec8261101a565b60006001600160a01b038216610cb9576040516322718ad960e21b8152600060048201526024016106d4565b506001600160a01b031660009081526003602052604090205490565b610ce0600033610da9565b610cfc5760405162461bcd60e51b81526004016106d49061236c565b600d805460ff1916911515919091179055565b610d1a600033610da9565b610d365760405162461bcd60e51b81526004016106d49061236c565b6001600160a01b0381166000818152600f6020908152604091829020805460ff1916600117905590519182527faf85b60d26151edd11443b704d424da6c43d0468f2235ebae3d1904dbc3230499101610c1e565b6000828152600c60205260408120610da2908361116c565b9392505050565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461060190612332565b610703338383611178565b610df9848484610777565b6107fc84848484611217565b60606105ec82611340565b6000818152600c602052604081206105ec90611449565b610e32600033610da9565b610e4e5760405162461bcd60e51b81526004016106d49061236c565b6106f56000805160206125d483398151915282610f61565b60105460009060ff1615610e7957600080fd5b6010805460ff191660011790556000610ea06000805160206125d483398151915233610da9565b600d5490915060ff1680610eb15750805b15610eef57600e54610ec38582611453565b610ecd8185611060565b6001600e6000828254610ee091906123e0565b90915550909250610f51915050565b600d5460ff16610f4b5760405162461bcd60e51b815260206004820152602160248201527f54686973204e4654206973206e6f74207075626c69636c79206d696e7461626c6044820152606560f81b60648201526084016106d4565b60009150505b6010805460ff1916905592915050565b6000828152600b6020526040902060010154610f7c816110c5565b6107fc8383611104565b610f91600033610da9565b610fad5760405162461bcd60e51b81526004016106d49061236c565b600d80549115156101000261ff0019909216919091179055565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b03198216635a05180f60e01b14806105ec57506105ec8261146d565b6000818152600260205260408120546001600160a01b0316806105ec57604051637e27328960e01b8152600481018490526024016106d4565b6109628383836001611492565b60008281526006602052604090206110788282612441565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b60006110bd848484611598565b949350505050565b6106f58133611665565b6000806110dc848461169e565b90508015610da2576000848152600c602052604090206110fc9084611732565b509392505050565b6000806111118484611747565b90508015610da2576000848152600c602052604090206110fc90846117b4565b600061114060008360006110b0565b90506001600160a01b03811661070357604051637e27328960e01b8152600481018390526024016106d4565b6000610da283836117c9565b6001600160a01b0382166111aa57604051630b61174360e31b81526001600160a01b03831660048201526024016106d4565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156107fc57604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611259903390889087908790600401612501565b6020604051808303816000875af1925050508015611294575060408051601f3d908101601f191682019092526112919181019061253e565b60015b6112fd573d8080156112c2576040519150601f19603f3d011682016040523d82523d6000602084013e6112c7565b606091505b5080516000036112f557604051633250574960e11b81526001600160a01b03851660048201526024016106d4565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461133957604051633250574960e11b81526001600160a01b03851660048201526024016106d4565b5050505050565b606061134b8261101a565b506000828152600660205260408120805461136590612332565b80601f016020809104026020016040519081016040528092919081815260200182805461139190612332565b80156113de5780601f106113b3576101008083540402835291602001916113de565b820191906000526020600020905b8154815290600101906020018083116113c157829003601f168201915b5050505050905060006113fc60408051602081019091526000815290565b9050805160000361140e575092915050565b81511561144057808260405160200161142892919061255b565b60405160208183030381529060405292505050919050565b6110bd846117f3565b60006105ec825490565b610703828260405180602001604052806000815250611867565b60006001600160e01b03198216637965db0b60e01b14806105ec57506105ec8261187e565b80806114a657506001600160a01b03821615155b156115685760006114b68461101a565b90506001600160a01b038316158015906114e25750826001600160a01b0316816001600160a01b031614155b80156114f557506114f38184610fc7565b155b1561151e5760405163a9fbf51f60e01b81526001600160a01b03841660048201526024016106d4565b81156115665783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806115a68585856118a3565b90506001600160a01b038116611603576115fe84600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b611626565b846001600160a01b0316816001600160a01b03161461162657611626818561199c565b6001600160a01b0385166116425761163d84611a2d565b6110bd565b846001600160a01b0316816001600160a01b0316146110bd576110bd8585611adc565b61166f8282610da9565b6107035760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016106d4565b60006116aa8383610da9565b61172a576000838152600b602090815260408083206001600160a01b03861684529091529020805460ff191660011790556116e23390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016105ec565b5060006105ec565b6000610da2836001600160a01b038416611b2c565b60006117538383610da9565b1561172a576000838152600b602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016105ec565b6000610da2836001600160a01b038416611b73565b60008260000182815481106117e0576117e06123b4565b9060005260206000200154905092915050565b60606117fe8261101a565b50600061181660408051602081019091526000815290565b905060008151116118365760405180602001604052806000815250610da2565b8061184084611c66565b60405160200161185192919061255b565b6040516020818303038152906040529392505050565b6118718383611cf9565b6109626000848484611217565b60006001600160e01b0319821663780e9d6360e01b14806105ec57506105ec82611d5e565b6000828152600260205260408120546001600160a01b03908116908316156118d0576118d0818486611d83565b6001600160a01b0381161561190e576118ed600085600080611492565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561193d576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b60006119a783610c8d565b6000838152600860205260409020549091508082146119fa576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b600954600090611a3f9060019061258a565b6000838152600a602052604081205460098054939450909284908110611a6757611a676123b4565b906000526020600020015490508060098381548110611a8857611a886123b4565b6000918252602080832090910192909255828152600a90915260408082208490558582528120556009805480611ac057611ac061259d565b6001900381819060005260206000200160009055905550505050565b60006001611ae984610c8d565b611af3919061258a565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b600081815260018301602052604081205461172a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105ec565b60008181526001830160205260408120548015611c5c576000611b9760018361258a565b8554909150600090611bab9060019061258a565b9050808214611c10576000866000018281548110611bcb57611bcb6123b4565b9060005260206000200154905080876000018481548110611bee57611bee6123b4565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611c2157611c2161259d565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105ec565b60009150506105ec565b60606000611c7383611de7565b600101905060008167ffffffffffffffff811115611c9357611c93612082565b6040519080825280601f01601f191660200182016040528015611cbd576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611cc757509392505050565b6001600160a01b038216611d2357604051633250574960e11b8152600060048201526024016106d4565b6000611d31838360006110b0565b90506001600160a01b03811615610962576040516339e3563760e11b8152600060048201526024016106d4565b60006001600160e01b03198216632483248360e11b14806105ec57506105ec82611ebf565b611d8e838383611f0f565b610962576001600160a01b038316611dbc57604051637e27328960e01b8152600481018290526024016106d4565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016106d4565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611e265772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611e52576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611e7057662386f26fc10000830492506010015b6305f5e1008310611e88576305f5e100830492506008015b6127108310611e9c57612710830492506004015b60648310611eae576064830492506002015b600a83106105ec5760010192915050565b60006001600160e01b031982166380ac58cd60e01b1480611ef057506001600160e01b03198216635b5e139f60e01b145b806105ec57506301ffc9a760e01b6001600160e01b03198316146105ec565b60006001600160a01b038316158015906110bd5750826001600160a01b0316846001600160a01b03161480611f495750611f498484610fc7565b806110bd5750506000908152600460205260409020546001600160a01b03908116911614919050565b6001600160e01b0319811681146106f557600080fd5b600060208284031215611f9a57600080fd5b8135610da281611f72565b60005b83811015611fc0578181015183820152602001611fa8565b50506000910152565b60008151808452611fe1816020860160208601611fa5565b601f01601f19169290920160200192915050565b602081526000610da26020830184611fc9565b60006020828403121561201a57600080fd5b5035919050565b80356001600160a01b038116811461203857600080fd5b919050565b60006020828403121561204f57600080fd5b610da282612021565b6000806040838503121561206b57600080fd5b61207483612021565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156120b3576120b3612082565b604051601f8501601f19908116603f011681019082821181831017156120db576120db612082565b816040528093508581528686860111156120f457600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261211f57600080fd5b610da283833560208501612098565b6000806040838503121561214157600080fd5b82359150602083013567ffffffffffffffff81111561215f57600080fd5b61216b8582860161210e565b9150509250929050565b60008060006060848603121561218a57600080fd5b61219384612021565b92506121a160208501612021565b9150604084013590509250925092565b600080604083850312156121c457600080fd5b823591506121d460208401612021565b90509250929050565b8035801515811461203857600080fd5b6000602082840312156121ff57600080fd5b610da2826121dd565b6000806040838503121561221b57600080fd5b50508035926020909101359150565b6000806040838503121561223d57600080fd5b61224683612021565b91506121d4602084016121dd565b6000806000806080858703121561226a57600080fd5b61227385612021565b935061228160208601612021565b925060408501359150606085013567ffffffffffffffff8111156122a457600080fd5b8501601f810187136122b557600080fd5b6122c487823560208401612098565b91505092959194509250565b600080604083850312156122e357600080fd5b6122ec83612021565b9150602083013567ffffffffffffffff81111561215f57600080fd5b6000806040838503121561231b57600080fd5b61232483612021565b91506121d460208401612021565b600181811c9082168061234657607f821691505b60208210810361236657634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f43616c6c657220646f6573206e6f742068617320612044454641554c545f41446040820152674d494e5f524f4c4560c01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105ec576105ec6123ca565b601f82111561096257600081815260208120601f850160051c8101602086101561241a5750805b601f850160051c820191505b8181101561243957828155600101612426565b505050505050565b815167ffffffffffffffff81111561245b5761245b612082565b61246f816124698454612332565b846123f3565b602080601f8311600181146124a4576000841561248c5750858301515b600019600386901b1c1916600185901b178555612439565b600085815260208120601f198616915b828110156124d3578886015182559484019460019091019084016124b4565b50858210156124f15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061253490830184611fc9565b9695505050505050565b60006020828403121561255057600080fd5b8151610da281611f72565b6000835161256d818460208801611fa5565b835190830190612581818360208801611fa5565b01949350505050565b818103818111156105ec576105ec6123ca565b634e487b7160e01b600052603160045260246000fdfe3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8489f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a26469706673582212202eca2958ff58e2f34e3a25f1d4f123c598671e0f4bc42e871cfd3b348003185664736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x14185B1B4B539195 PUSH1 0xC2 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x14185B1B539195 PUSH1 0xCA SHL DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x6F SWAP2 SWAP1 PUSH3 0x2DF JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x7E DUP3 DUP3 PUSH3 0x2DF JUMP JUMPDEST POP PUSH3 0x90 SWAP2 POP PUSH1 0x0 SWAP1 POP CALLER PUSH3 0xF1 JUMP JUMPDEST POP PUSH3 0xBD PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH3 0xF1 JUMP JUMPDEST POP PUSH3 0xEA PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 CALLER PUSH3 0xF1 JUMP JUMPDEST POP PUSH3 0x3AB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x100 DUP5 DUP5 PUSH3 0x12E JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH3 0x125 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH3 0x123 SWAP1 DUP5 PUSH3 0x1E0 JUMP JUMPDEST POP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x1D7 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x18E CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH3 0x128 JUMP JUMPDEST POP PUSH1 0x0 PUSH3 0x128 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x125 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH3 0x1D7 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH3 0x128 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x265 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x286 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2DA JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x2B5 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x2D6 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x2C1 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x2FB JUMPI PUSH3 0x2FB PUSH3 0x23A JUMP JUMPDEST PUSH3 0x313 DUP2 PUSH3 0x30C DUP5 SLOAD PUSH3 0x250 JUMP JUMPDEST DUP5 PUSH3 0x28C JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x34B JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x332 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x2D6 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x37C JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x35B JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x39B JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x2629 DUP1 PUSH3 0x3BB PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x274 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4F6CCCE7 GT PUSH2 0x151 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xD5391393 GT PUSH2 0x87 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x563 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x578 JUMPI DUP1 PUSH4 0xDCF993EE EQ PUSH2 0x58B JUMPI DUP1 PUSH4 0xE276FEA3 EQ PUSH2 0x598 JUMPI DUP1 PUSH4 0xE485857B EQ PUSH2 0x5BB JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x5CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x504 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x517 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x52A JUMPI DUP1 PUSH4 0xCFBD4885 EQ PUSH2 0x53D JUMPI DUP1 PUSH4 0xD204C45E EQ PUSH2 0x550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9010D07C GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x4BB JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4CE JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4E1 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x4E9 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x4F1 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x410 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x45C JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x46F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x482 JUMPI DUP1 PUSH4 0x71222467 EQ PUSH2 0x495 JUMPI DUP1 PUSH4 0x8D1FDF2F EQ PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x282C51F3 GT PUSH2 0x1EA JUMPI DUP1 PUSH4 0x36568ABE GT PUSH2 0x1AE JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0x3CF40DF3 EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0x423F6CEF EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x45C8B1A6 EQ PUSH2 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x282C51F3 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0x2D345670 EQ PUSH2 0x39F JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x35BB3E16 EQ PUSH2 0x3D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10511F96 GT PUSH2 0x23C JUMPI DUP1 PUSH4 0x10511F96 EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0x162094C4 EQ PUSH2 0x31C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x32F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0x261707FA EQ PUSH2 0x377 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2A1 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x900CC33 EQ PUSH2 0x2E1 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2F6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28C PUSH2 0x287 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F88 JUMP JUMPDEST PUSH2 0x5E1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A9 PUSH2 0x5F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x298 SWAP2 SWAP1 PUSH2 0x1FF5 JUMP JUMPDEST PUSH2 0x2C9 PUSH2 0x2C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0x684 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x298 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x2EF CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x6AD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F4 PUSH2 0x304 CALLDATASIZE PUSH1 0x4 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0x6F8 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x317 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x707 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x32A CALLDATASIZE PUSH1 0x4 PUSH2 0x212E JUMP JUMPDEST PUSH2 0x746 JUMP JUMPDEST PUSH1 0x9 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x298 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x34F CALLDATASIZE PUSH1 0x4 PUSH2 0x2175 JUMP JUMPDEST PUSH2 0x777 JUMP JUMPDEST PUSH2 0x333 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x385 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x802 JUMP JUMPDEST PUSH2 0x333 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25B4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x841 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x3C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x21B1 JUMP JUMPDEST PUSH2 0x873 JUMP JUMPDEST PUSH2 0x333 PUSH2 0x3D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0x898 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x3E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x8FD JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x3F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x21B1 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x28C SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x41E CALLDATASIZE PUSH1 0x4 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0x967 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x431 CALLDATASIZE PUSH1 0x4 PUSH2 0x2175 JUMP JUMPDEST PUSH2 0xA32 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x444 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0xA4D JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x457 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0xBAA JUMP JUMPDEST PUSH2 0x333 PUSH2 0x46A CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0xC29 JUMP JUMPDEST PUSH2 0x2C9 PUSH2 0x47D CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0xC82 JUMP JUMPDEST PUSH2 0x333 PUSH2 0x490 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0xC8D JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x21ED JUMP JUMPDEST PUSH2 0xCD5 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x4B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0xD0F JUMP JUMPDEST PUSH2 0x2C9 PUSH2 0x4C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2208 JUMP JUMPDEST PUSH2 0xD8A JUMP JUMPDEST PUSH2 0x28C PUSH2 0x4DC CALLDATASIZE PUSH1 0x4 PUSH2 0x21B1 JUMP JUMPDEST PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x2A9 PUSH2 0xDD4 JUMP JUMPDEST PUSH2 0x333 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x4FF CALLDATASIZE PUSH1 0x4 PUSH2 0x222A JUMP JUMPDEST PUSH2 0xDE3 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x512 CALLDATASIZE PUSH1 0x4 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0xDEE JUMP JUMPDEST PUSH2 0x2A9 PUSH2 0x525 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0xE05 JUMP JUMPDEST PUSH2 0x333 PUSH2 0x538 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0xE10 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x54B CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0xE27 JUMP JUMPDEST PUSH2 0x333 PUSH2 0x55E CALLDATASIZE PUSH1 0x4 PUSH2 0x22D0 JUMP JUMPDEST PUSH2 0xE66 JUMP JUMPDEST PUSH2 0x333 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25D4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x586 CALLDATASIZE PUSH1 0x4 PUSH2 0x21B1 JUMP JUMPDEST PUSH2 0xF61 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x28C SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x5A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x5C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x21ED JUMP JUMPDEST PUSH2 0xF86 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x5DC CALLDATASIZE PUSH1 0x4 PUSH2 0x2308 JUMP JUMPDEST PUSH2 0xFC7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EC DUP3 PUSH2 0xFF5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x601 SWAP1 PUSH2 0x2332 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x62D SWAP1 PUSH2 0x2332 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x67A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x64F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x67A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x65D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x68F DUP3 PUSH2 0x101A JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x6B8 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x6DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6F5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25B4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xF61 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x703 DUP3 DUP3 CALLER PUSH2 0x1053 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x712 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x72E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x6F5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25B4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x751 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x76D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x703 DUP3 DUP3 PUSH2 0x1060 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7A1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AE DUP4 DUP4 CALLER PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7FC JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x80D PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x829 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x6F5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25D4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x84C PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x868 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x6F5 PUSH1 0x0 DUP3 PUSH2 0xF61 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x88E DUP2 PUSH2 0x10C5 JUMP JUMPDEST PUSH2 0x7FC DUP4 DUP4 PUSH2 0x10CF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A3 DUP4 PUSH2 0xC8D JUMP JUMPDEST DUP3 LT PUSH2 0x8D4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x295F44F7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6D4 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x908 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x924 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x6F5 PUSH1 0x0 DUP3 PUSH2 0x873 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x958 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x962 DUP3 DUP3 PUSH2 0x1104 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x9CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973204E465420776173206E6F74207065726D697474656420746F207472 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x30B739B332B9 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6D4 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 SUB PUSH2 0xA2B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x43616C6C657220686173206265656E20667265657A65 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0x703 CALLER DUP4 DUP4 JUMPDEST PUSH2 0x962 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xDEE JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xAB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973204E465420776173206E6F74207065726D697474656420746F206275 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x3937 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6D4 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 SUB PUSH2 0xB0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x43616C6C657220686173206265656E20667265657A65 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB27 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25B4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0xDA9 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xB38 JUMPI PUSH2 0x703 DUP3 PUSH2 0x1131 JUMP JUMPDEST PUSH2 0xB41 DUP3 PUSH2 0xC82 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBA1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C657220646F6573206E6F74206F776E2074686973204E465400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0x703 DUP3 PUSH2 0x1131 JUMP JUMPDEST PUSH2 0xBB5 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xAF85B60D26151EDD11443B704D424DA6C43D0468F2235EBAE3D1904DBC323049 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC34 PUSH1 0x9 SLOAD SWAP1 JUMP JUMPDEST DUP3 LT PUSH2 0xC5D JUMPI PUSH1 0x40 MLOAD PUSH4 0x295F44F7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x9 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xC70 JUMPI PUSH2 0xC70 PUSH2 0x23B4 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EC DUP3 PUSH2 0x101A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCB9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xCE0 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0xCFC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xD1A PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0xD36 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xAF85B60D26151EDD11443B704D424DA6C43D0468F2235EBAE3D1904DBC323049 SWAP2 ADD PUSH2 0xC1E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xDA2 SWAP1 DUP4 PUSH2 0x116C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x601 SWAP1 PUSH2 0x2332 JUMP JUMPDEST PUSH2 0x703 CALLER DUP4 DUP4 PUSH2 0x1178 JUMP JUMPDEST PUSH2 0xDF9 DUP5 DUP5 DUP5 PUSH2 0x777 JUMP JUMPDEST PUSH2 0x7FC DUP5 DUP5 DUP5 DUP5 PUSH2 0x1217 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5EC DUP3 PUSH2 0x1340 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x5EC SWAP1 PUSH2 0x1449 JUMP JUMPDEST PUSH2 0xE32 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0xE4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x6F5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25D4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xF61 JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xE79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x10 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x0 PUSH2 0xEA0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25D4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND DUP1 PUSH2 0xEB1 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xEEF JUMPI PUSH1 0xE SLOAD PUSH2 0xEC3 DUP6 DUP3 PUSH2 0x1453 JUMP JUMPDEST PUSH2 0xECD DUP2 DUP6 PUSH2 0x1060 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xEE0 SWAP2 SWAP1 PUSH2 0x23E0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP SWAP1 SWAP3 POP PUSH2 0xF51 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND PUSH2 0xF4B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973204E4654206973206E6F74207075626C69636C79206D696E7461626C PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x65 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST PUSH1 0x10 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xF7C DUP2 PUSH2 0x10C5 JUMP JUMPDEST PUSH2 0x7FC DUP4 DUP4 PUSH2 0x1104 JUMP JUMPDEST PUSH2 0xF91 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0xFAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH2 0x100 MUL PUSH2 0xFF00 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x5EC JUMPI POP PUSH2 0x5EC DUP3 PUSH2 0x146D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x5EC JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0x962 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1492 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1078 DUP3 DUP3 PUSH2 0x2441 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10BD DUP5 DUP5 DUP5 PUSH2 0x1598 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x6F5 DUP2 CALLER PUSH2 0x1665 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10DC DUP5 DUP5 PUSH2 0x169E JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xDA2 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x10FC SWAP1 DUP5 PUSH2 0x1732 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1111 DUP5 DUP5 PUSH2 0x1747 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xDA2 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x10FC SWAP1 DUP5 PUSH2 0x17B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1140 PUSH1 0x0 DUP4 PUSH1 0x0 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA2 DUP4 DUP4 PUSH2 0x17C9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x11AA JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x7FC JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1259 SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2501 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1294 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1291 SWAP2 DUP2 ADD SWAP1 PUSH2 0x253E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x12FD JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x12C2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12C7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x12F5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0x1339 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x134B DUP3 PUSH2 0x101A JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x1365 SWAP1 PUSH2 0x2332 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1391 SWAP1 PUSH2 0x2332 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13DE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13B3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x13DE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13C1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x13FC PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x140E JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1440 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1428 SWAP3 SWAP2 SWAP1 PUSH2 0x255B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10BD DUP5 PUSH2 0x17F3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EC DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x703 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1867 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x5EC JUMPI POP PUSH2 0x5EC DUP3 PUSH2 0x187E JUMP JUMPDEST DUP1 DUP1 PUSH2 0x14A6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1568 JUMPI PUSH1 0x0 PUSH2 0x14B6 DUP5 PUSH2 0x101A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x14E2 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x14F5 JUMPI POP PUSH2 0x14F3 DUP2 DUP5 PUSH2 0xFC7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x151E JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1566 JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x15A6 DUP6 DUP6 DUP6 PUSH2 0x18A3 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1603 JUMPI PUSH2 0x15FE DUP5 PUSH1 0x9 DUP1 SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD DUP4 SSTORE SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x6E1540171B6C0C960B71A7020D9F60077F6AF931A8BBF590DA0223DACF75C7AF ADD SSTORE JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1626 JUMPI PUSH2 0x1626 DUP2 DUP6 PUSH2 0x199C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1642 JUMPI PUSH2 0x163D DUP5 PUSH2 0x1A2D JUMP JUMPDEST PUSH2 0x10BD JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x10BD JUMPI PUSH2 0x10BD DUP6 DUP6 PUSH2 0x1ADC JUMP JUMPDEST PUSH2 0x166F DUP3 DUP3 PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16AA DUP4 DUP4 PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x172A JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x16E2 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x5EC JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1B2C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1753 DUP4 DUP4 PUSH2 0xDA9 JUMP JUMPDEST ISZERO PUSH2 0x172A JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1B73 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x17E0 JUMPI PUSH2 0x17E0 PUSH2 0x23B4 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x17FE DUP3 PUSH2 0x101A JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1816 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1836 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xDA2 JUMP JUMPDEST DUP1 PUSH2 0x1840 DUP5 PUSH2 0x1C66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1851 SWAP3 SWAP2 SWAP1 PUSH2 0x255B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1871 DUP4 DUP4 PUSH2 0x1CF9 JUMP JUMPDEST PUSH2 0x962 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1217 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x780E9D63 PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x5EC JUMPI POP PUSH2 0x5EC DUP3 PUSH2 0x1D5E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x18D0 JUMPI PUSH2 0x18D0 DUP2 DUP5 DUP7 PUSH2 0x1D83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x190E JUMPI PUSH2 0x18ED PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1492 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x193D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19A7 DUP4 PUSH2 0xC8D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 DUP3 EQ PUSH2 0x19FA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP5 DUP5 MSTORE DUP2 DUP5 KECCAK256 DUP2 SWAP1 SSTORE DUP4 MSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE PUSH1 0x7 DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE SWAP1 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1A3F SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x258A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x9 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 DUP5 SWAP1 DUP2 LT PUSH2 0x1A67 JUMPI PUSH2 0x1A67 PUSH2 0x23B4 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x9 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1A88 JUMPI PUSH2 0x1A88 PUSH2 0x23B4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 DUP2 MSTORE PUSH1 0xA SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP5 SWAP1 SSTORE DUP6 DUP3 MSTORE DUP2 KECCAK256 SSTORE PUSH1 0x9 DUP1 SLOAD DUP1 PUSH2 0x1AC0 JUMPI PUSH2 0x1AC0 PUSH2 0x259D JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x1AE9 DUP5 PUSH2 0xC8D JUMP JUMPDEST PUSH2 0x1AF3 SWAP2 SWAP1 PUSH2 0x258A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE SWAP4 DUP3 MSTORE PUSH1 0x8 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x172A JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x1C5C JUMPI PUSH1 0x0 PUSH2 0x1B97 PUSH1 0x1 DUP4 PUSH2 0x258A JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x1BAB SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x258A JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ PUSH2 0x1C10 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1BCB JUMPI PUSH2 0x1BCB PUSH2 0x23B4 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1BEE JUMPI PUSH2 0x1BEE PUSH2 0x23B4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1C21 JUMPI PUSH2 0x1C21 PUSH2 0x259D JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1C73 DUP4 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C93 JUMPI PUSH2 0x1C93 PUSH2 0x2082 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1CBD JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1CC7 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1D23 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D31 DUP4 DUP4 PUSH1 0x0 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x962 JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x24832483 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x5EC JUMPI POP PUSH2 0x5EC DUP3 PUSH2 0x1EBF JUMP JUMPDEST PUSH2 0x1D8E DUP4 DUP4 DUP4 PUSH2 0x1F0F JUMP JUMPDEST PUSH2 0x962 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1DBC JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1E26 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1E52 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1E70 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1E88 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1E9C JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1EAE JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x5EC JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x1EF0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x5EC JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x10BD JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x1F49 JUMPI POP PUSH2 0x1F49 DUP5 DUP5 PUSH2 0xFC7 JUMP JUMPDEST DUP1 PUSH2 0x10BD JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xDA2 DUP2 PUSH2 0x1F72 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FC0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1FA8 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1FE1 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1FA5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xDA2 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1FC9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x201A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2038 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x204F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDA2 DUP3 PUSH2 0x2021 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x206B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2074 DUP4 PUSH2 0x2021 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x20B3 JUMPI PUSH2 0x20B3 PUSH2 0x2082 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x20DB JUMPI PUSH2 0x20DB PUSH2 0x2082 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x20F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x211F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDA2 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x2098 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2141 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x215F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x216B DUP6 DUP3 DUP7 ADD PUSH2 0x210E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x218A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2193 DUP5 PUSH2 0x2021 JUMP JUMPDEST SWAP3 POP PUSH2 0x21A1 PUSH1 0x20 DUP6 ADD PUSH2 0x2021 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x21D4 PUSH1 0x20 DUP5 ADD PUSH2 0x2021 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2038 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDA2 DUP3 PUSH2 0x21DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x221B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x223D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2246 DUP4 PUSH2 0x2021 JUMP JUMPDEST SWAP2 POP PUSH2 0x21D4 PUSH1 0x20 DUP5 ADD PUSH2 0x21DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x226A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2273 DUP6 PUSH2 0x2021 JUMP JUMPDEST SWAP4 POP PUSH2 0x2281 PUSH1 0x20 DUP7 ADD PUSH2 0x2021 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x22B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22C4 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2098 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22EC DUP4 PUSH2 0x2021 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x215F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x231B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2324 DUP4 PUSH2 0x2021 JUMP JUMPDEST SWAP2 POP PUSH2 0x21D4 PUSH1 0x20 DUP5 ADD PUSH2 0x2021 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2346 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2366 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C657220646F6573206E6F742068617320612044454641554C545F4144 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x4D494E5F524F4C45 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x5EC JUMPI PUSH2 0x5EC PUSH2 0x23CA JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x962 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x241A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2439 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2426 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x245B JUMPI PUSH2 0x245B PUSH2 0x2082 JUMP JUMPDEST PUSH2 0x246F DUP2 PUSH2 0x2469 DUP5 SLOAD PUSH2 0x2332 JUMP JUMPDEST DUP5 PUSH2 0x23F3 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x24A4 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x248C JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x2439 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x24D3 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x24B4 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x24F1 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2534 SWAP1 DUP4 ADD DUP5 PUSH2 0x1FC9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xDA2 DUP2 PUSH2 0x1F72 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x256D DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1FA5 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2581 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1FA5 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x5EC JUMPI PUSH2 0x5EC PUSH2 0x23CA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID EXTCODECOPY GT 0xD1 PUSH13 0xBAFFD01DF69CE1C404F6340EE0 JUMPI 0x49 DUP16 PUSH0 STOP 0x24 PUSH2 0x90EA SLOAD 0x22 SDIV PUSH23 0xA8489F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8 LOG1 0xAB 0x4C 0xEE 0xEF DUP14 SWAP9 SHR DUP10 JUMP 0xA6 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E 0xCA 0x29 PC SELFDESTRUCT PC 0xE2 RETURN 0x4E GASPRICE 0x25 CALL 0xD4 CALL 0x23 0xC5 SWAP9 PUSH8 0x1E0F4BC42E871CFD EXTCODESIZE CALLVALUE DUP1 SUB XOR JUMP PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"1747:3859:22:-:0;;;1846:38;;;-1:-1:-1;;1891:25:22;;;2263:197;;;;;;;;;;1381:113:8;;;;;;;;;;;;;-1:-1:-1;;;1381:113:8;;;;;;;;;;;;;;;;-1:-1:-1;;;1381:113:8;;;1455:5;1447;:13;;;;;;:::i;:::-;-1:-1:-1;1470:7:8;:17;1480:7;1470;:17;:::i;:::-;-1:-1:-1;2318:42:22::1;::::0;-1:-1:-1;2232:4:0::1;::::0;-1:-1:-1;2349:10:22::1;2318;:42::i;:::-;-1:-1:-1::0;2371:35:22::1;413:24;2395:10;2371;:35::i;:::-;-1:-1:-1::0;2417:35:22::1;482:24;2441:10;2417;:35::i;:::-;;1747:3859:::0;;2069:257:2;2155:4;;2186:31;2203:4;2209:7;2186:16;:31::i;:::-;2171:46;;2231:7;2227:69;;;2254:18;;;;:12;:18;;;;;:31;;2277:7;2254:22;:31::i;:::-;;2227:69;2312:7;-1:-1:-1;2069:257:2;;;;;:::o;6179:316:0:-;6256:4;2954:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;6272:217;;6315:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;6315:29:0;;;;;;;;;:36;;-1:-1:-1;;6315:36:0;6347:4;6315:36;;;6397:12;735:10:15;;656:96;6397:12:0;-1:-1:-1;;;;;6370:40:0;6388:7;-1:-1:-1;;;;;6370:40:0;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:0;6424:11;;6272:217;-1:-1:-1;6473:5:0;6466:12;;8316:150:21;8386:4;8409:50;8414:3;-1:-1:-1;;;;;8434:23:21;;2304:4;4360:21;;;:14;;;:21;;;;;;2320:321;;-1:-1:-1;2362:23:21;;;;;;;;:11;:23;;;;;;;;;;;;;2544:18;;2520:21;;;:14;;;:21;;;;;;:42;;;;2576:11;;14:127:23;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:23;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;748:448;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:23;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:23;;;2580:26;2531:89;-1:-1:-1;;1335:1:23;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:23;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:23;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:23;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:23:o;:::-;1747:3859:22;;;;;;"},"deployedBytecode":{"functionDebugData":{"@BURNER_ROLE_4532":{"entryPoint":null,"id":4532,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_29":{"entryPoint":null,"id":29,"parameterSlots":0,"returnSlots":0},"@MINTER_ROLE_4527":{"entryPoint":null,"id":4527,"parameterSlots":0,"returnSlots":0},"@_addTokenToAllTokensEnumeration_2109":{"entryPoint":null,"id":2109,"parameterSlots":1,"returnSlots":0},"@_addTokenToOwnerEnumeration_2089":{"entryPoint":6876,"id":2089,"parameterSlots":2,"returnSlots":0},"@_add_3954":{"entryPoint":6956,"id":3954,"parameterSlots":2,"returnSlots":1},"@_approve_1527":{"entryPoint":4179,"id":1527,"parameterSlots":3,"returnSlots":0},"@_approve_1593":{"entryPoint":5266,"id":1593,"parameterSlots":4,"returnSlots":0},"@_at_4088":{"entryPoint":6089,"id":4088,"parameterSlots":2,"returnSlots":1},"@_baseURI_920":{"entryPoint":null,"id":920,"parameterSlots":0,"returnSlots":1},"@_burn_1405":{"entryPoint":4401,"id":1405,"parameterSlots":1,"returnSlots":0},"@_checkAuthorized_1175":{"entryPoint":7555,"id":1175,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_1723":{"entryPoint":4631,"id":1723,"parameterSlots":4,"returnSlots":0},"@_checkRole_114":{"entryPoint":5733,"id":114,"parameterSlots":2,"returnSlots":0},"@_checkRole_93":{"entryPoint":4293,"id":93,"parameterSlots":1,"returnSlots":0},"@_contains_4057":{"entryPoint":null,"id":4057,"parameterSlots":2,"returnSlots":1},"@_getApproved_1102":{"entryPoint":null,"id":1102,"parameterSlots":1,"returnSlots":1},"@_grantRole_256":{"entryPoint":5790,"id":256,"parameterSlots":2,"returnSlots":1},"@_grantRole_487":{"entryPoint":4303,"id":487,"parameterSlots":2,"returnSlots":1},"@_isAuthorized_1138":{"entryPoint":7951,"id":1138,"parameterSlots":3,"returnSlots":1},"@_length_4071":{"entryPoint":null,"id":4071,"parameterSlots":1,"returnSlots":1},"@_mint_1331":{"entryPoint":7417,"id":1331,"parameterSlots":2,"returnSlots":0},"@_msgSender_2441":{"entryPoint":null,"id":2441,"parameterSlots":0,"returnSlots":1},"@_ownerOf_1089":{"entryPoint":null,"id":1089,"parameterSlots":1,"returnSlots":1},"@_removeTokenFromAllTokensEnumeration_2217":{"entryPoint":6701,"id":2217,"parameterSlots":1,"returnSlots":0},"@_removeTokenFromOwnerEnumeration_2169":{"entryPoint":6556,"id":2169,"parameterSlots":2,"returnSlots":0},"@_remove_4038":{"entryPoint":7027,"id":4038,"parameterSlots":2,"returnSlots":1},"@_requireOwned_1659":{"entryPoint":4122,"id":1659,"parameterSlots":1,"returnSlots":1},"@_revokeRole_294":{"entryPoint":5959,"id":294,"parameterSlots":2,"returnSlots":1},"@_revokeRole_519":{"entryPoint":4356,"id":519,"parameterSlots":2,"returnSlots":1},"@_safeMint_1346":{"entryPoint":5203,"id":1346,"parameterSlots":2,"returnSlots":0},"@_safeMint_1372":{"entryPoint":6247,"id":1372,"parameterSlots":3,"returnSlots":0},"@_setApprovalForAll_1630":{"entryPoint":4472,"id":1630,"parameterSlots":3,"returnSlots":0},"@_setTokenURI_2368":{"entryPoint":4192,"id":2368,"parameterSlots":2,"returnSlots":0},"@_update_1281":{"entryPoint":6307,"id":1281,"parameterSlots":3,"returnSlots":1},"@_update_2058":{"entryPoint":5528,"id":2058,"parameterSlots":3,"returnSlots":1},"@_update_5023":{"entryPoint":4272,"id":5023,"parameterSlots":3,"returnSlots":1},"@add_4254":{"entryPoint":5938,"id":4254,"parameterSlots":2,"returnSlots":1},"@approve_936":{"entryPoint":1784,"id":936,"parameterSlots":2,"returnSlots":0},"@at_4350":{"entryPoint":4460,"id":4350,"parameterSlots":2,"returnSlots":1},"@balanceOf_844":{"entryPoint":3213,"id":844,"parameterSlots":1,"returnSlots":1},"@burn_4905":{"entryPoint":2637,"id":4905,"parameterSlots":1,"returnSlots":0},"@freezeAccounts_4672":{"entryPoint":null,"id":4672,"parameterSlots":0,"returnSlots":0},"@freeze_4767":{"entryPoint":3343,"id":4767,"parameterSlots":1,"returnSlots":0},"@getApproved_953":{"entryPoint":1668,"id":953,"parameterSlots":1,"returnSlots":1},"@getRoleAdmin_128":{"entryPoint":null,"id":128,"parameterSlots":1,"returnSlots":1},"@getRoleMemberCount_455":{"entryPoint":3600,"id":455,"parameterSlots":1,"returnSlots":1},"@getRoleMember_440":{"entryPoint":3466,"id":440,"parameterSlots":2,"returnSlots":1},"@grantAdmin_4584":{"entryPoint":2301,"id":4584,"parameterSlots":1,"returnSlots":0},"@grantBurner_4636":{"entryPoint":1799,"id":4636,"parameterSlots":1,"returnSlots":0},"@grantMinter_4610":{"entryPoint":2050,"id":4610,"parameterSlots":1,"returnSlots":0},"@grantRole_147":{"entryPoint":2163,"id":147,"parameterSlots":2,"returnSlots":0},"@hasRole_80":{"entryPoint":3497,"id":80,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_986":{"entryPoint":4039,"id":986,"parameterSlots":2,"returnSlots":1},"@isPubliclyMintable_4663":{"entryPoint":null,"id":4663,"parameterSlots":0,"returnSlots":0},"@isSBT_4666":{"entryPoint":null,"id":4666,"parameterSlots":0,"returnSlots":0},"@length_4323":{"entryPoint":5193,"id":4323,"parameterSlots":1,"returnSlots":1},"@log10_3616":{"entryPoint":7655,"id":3616,"parameterSlots":1,"returnSlots":1},"@name_866":{"entryPoint":1522,"id":866,"parameterSlots":0,"returnSlots":1},"@ownerOf_857":{"entryPoint":3202,"id":857,"parameterSlots":1,"returnSlots":1},"@remove_4281":{"entryPoint":6068,"id":4281,"parameterSlots":2,"returnSlots":1},"@renounceRole_189":{"entryPoint":2351,"id":189,"parameterSlots":2,"returnSlots":0},"@revokeAdmin_4597":{"entryPoint":2113,"id":4597,"parameterSlots":1,"returnSlots":0},"@revokeBurner_4649":{"entryPoint":1709,"id":4649,"parameterSlots":1,"returnSlots":0},"@revokeMinter_4623":{"entryPoint":3623,"id":4623,"parameterSlots":1,"returnSlots":0},"@revokeRole_166":{"entryPoint":3937,"id":166,"parameterSlots":2,"returnSlots":0},"@safeMint_4838":{"entryPoint":3686,"id":4838,"parameterSlots":2,"returnSlots":1},"@safeTransferFrom_1050":{"entryPoint":2610,"id":1050,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_1076":{"entryPoint":3566,"id":1076,"parameterSlots":4,"returnSlots":0},"@safeTransfer_4967":{"entryPoint":2407,"id":4967,"parameterSlots":2,"returnSlots":0},"@setApprovalForAll_969":{"entryPoint":3555,"id":969,"parameterSlots":2,"returnSlots":0},"@setPubliclyMintable_4737":{"entryPoint":3285,"id":4737,"parameterSlots":1,"returnSlots":0},"@setToSBT_4749":{"entryPoint":3974,"id":4749,"parameterSlots":1,"returnSlots":0},"@setTokenURI_4853":{"entryPoint":1862,"id":4853,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1923":{"entryPoint":6270,"id":1923,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2292":{"entryPoint":7518,"id":2292,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2729":{"entryPoint":null,"id":2729,"parameterSlots":1,"returnSlots":1},"@supportsInterface_422":{"entryPoint":4085,"id":422,"parameterSlots":1,"returnSlots":1},"@supportsInterface_5040":{"entryPoint":1505,"id":5040,"parameterSlots":1,"returnSlots":1},"@supportsInterface_62":{"entryPoint":5229,"id":62,"parameterSlots":1,"returnSlots":1},"@supportsInterface_816":{"entryPoint":7871,"id":816,"parameterSlots":1,"returnSlots":1},"@symbol_875":{"entryPoint":3540,"id":875,"parameterSlots":0,"returnSlots":1},"@toString_2519":{"entryPoint":7270,"id":2519,"parameterSlots":1,"returnSlots":1},"@tokenByIndex_1989":{"entryPoint":3113,"id":1989,"parameterSlots":1,"returnSlots":1},"@tokenOfOwnerByIndex_1952":{"entryPoint":2200,"id":1952,"parameterSlots":2,"returnSlots":1},"@tokenURI_2349":{"entryPoint":4928,"id":2349,"parameterSlots":1,"returnSlots":1},"@tokenURI_4983":{"entryPoint":3589,"id":4983,"parameterSlots":1,"returnSlots":1},"@tokenURI_911":{"entryPoint":6131,"id":911,"parameterSlots":1,"returnSlots":1},"@totalSupply_1962":{"entryPoint":null,"id":1962,"parameterSlots":0,"returnSlots":1},"@transferFrom_1032":{"entryPoint":1911,"id":1032,"parameterSlots":3,"returnSlots":0},"@transfer_4936":{"entryPoint":null,"id":4936,"parameterSlots":2,"returnSlots":0},"@unfreeze_4785":{"entryPoint":2986,"id":4785,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":8225,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_available_length_string":{"entryPoint":8344,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bool":{"entryPoint":8669,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_string":{"entryPoint":8462,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":8253,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":8968,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":8565,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":8788,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":8746,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_string_memory_ptr":{"entryPoint":8912,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":8280,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool":{"entryPoint":8685,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":8625,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":8712,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":8072,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":9534,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":8200,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_string_memory_ptr":{"entryPoint":8494,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_string":{"entryPoint":8137,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":9563,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9473,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8181,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d23406286cff9f065550eeba5e3e1e76b7868deae85a2bc79d8a126c15e661d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_26a18b82a6f0089994fa1fc7c15d389f66d55b2b42f9d4738227fb927dd79151__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9068,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_96265c9a7a9576744e74229ec48afeae05f496150ec706fc9d69b4d994b10fa4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df799cddfe1e8e896d8d4ad58f231c73395b1e5aae588589151e636922b9fd0b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e688d7497ddb1402e497ed0319ede17625ff78c3f261503d4327ab1b642407bb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f73ae05a0e7fa0084b25cebcc7c99c97b88354866069b73642dfeeee8282b4dd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9184,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9610,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":9203,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":9281,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":8101,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":9010,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":9162,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":9629,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":9140,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":8322,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":8050,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:14994:23","statements":[{"nodeType":"YulBlock","src":"6:3:23","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:23","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:23"},"nodeType":"YulFunctionCall","src":"125:12:23"},"nodeType":"YulExpressionStatement","src":"125:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:23"},"nodeType":"YulFunctionCall","src":"99:20:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:23"},"nodeType":"YulFunctionCall","src":"88:32:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:23"},"nodeType":"YulFunctionCall","src":"78:43:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:23"},"nodeType":"YulFunctionCall","src":"71:51:23"},"nodeType":"YulIf","src":"68:71:23"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:23","type":""}],"src":"14:131:23"},{"body":{"nodeType":"YulBlock","src":"219:176:23","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:23"},"nodeType":"YulFunctionCall","src":"267:12:23"},"nodeType":"YulExpressionStatement","src":"267:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:23"},"nodeType":"YulFunctionCall","src":"236:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:23"},"nodeType":"YulFunctionCall","src":"232:32:23"},"nodeType":"YulIf","src":"229:52:23"},{"nodeType":"YulVariableDeclaration","src":"290:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:23"},"nodeType":"YulFunctionCall","src":"303:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:23"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:23"},"nodeType":"YulFunctionCall","src":"335:30:23"},"nodeType":"YulExpressionStatement","src":"335:30:23"},{"nodeType":"YulAssignment","src":"374:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:23"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:23","type":""}],"src":"150:245:23"},{"body":{"nodeType":"YulBlock","src":"495:92:23","statements":[{"nodeType":"YulAssignment","src":"505:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:23"},"nodeType":"YulFunctionCall","src":"513:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:23"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:23"},"nodeType":"YulFunctionCall","src":"565:14:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:23"},"nodeType":"YulFunctionCall","src":"558:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:23"},"nodeType":"YulFunctionCall","src":"540:41:23"},"nodeType":"YulExpressionStatement","src":"540:41:23"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:23","type":""}],"src":"400:187:23"},{"body":{"nodeType":"YulBlock","src":"658:184:23","statements":[{"nodeType":"YulVariableDeclaration","src":"668:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"677:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"672:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"737:63:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"762:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"767:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"758:3:23"},"nodeType":"YulFunctionCall","src":"758:11:23"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"781:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"786:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:23"},"nodeType":"YulFunctionCall","src":"777:11:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"771:5:23"},"nodeType":"YulFunctionCall","src":"771:18:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"751:6:23"},"nodeType":"YulFunctionCall","src":"751:39:23"},"nodeType":"YulExpressionStatement","src":"751:39:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"701:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"695:2:23"},"nodeType":"YulFunctionCall","src":"695:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"709:19:23","statements":[{"nodeType":"YulAssignment","src":"711:15:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"720:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"723:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:23"},"nodeType":"YulFunctionCall","src":"716:10:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"711:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"691:3:23","statements":[]},"src":"687:113:23"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"820:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"825:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"816:3:23"},"nodeType":"YulFunctionCall","src":"816:16:23"},{"kind":"number","nodeType":"YulLiteral","src":"834:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:23"},"nodeType":"YulFunctionCall","src":"809:27:23"},"nodeType":"YulExpressionStatement","src":"809:27:23"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"636:3:23","type":""},{"name":"dst","nodeType":"YulTypedName","src":"641:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"646:6:23","type":""}],"src":"592:250:23"},{"body":{"nodeType":"YulBlock","src":"897:221:23","statements":[{"nodeType":"YulVariableDeclaration","src":"907:26:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"927:5:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"921:5:23"},"nodeType":"YulFunctionCall","src":"921:12:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"911:6:23","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"949:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"954:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"942:6:23"},"nodeType":"YulFunctionCall","src":"942:19:23"},"nodeType":"YulExpressionStatement","src":"942:19:23"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1009:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"1016:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1005:3:23"},"nodeType":"YulFunctionCall","src":"1005:16:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1027:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"1032:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:23"},"nodeType":"YulFunctionCall","src":"1023:14:23"},{"name":"length","nodeType":"YulIdentifier","src":"1039:6:23"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"970:34:23"},"nodeType":"YulFunctionCall","src":"970:76:23"},"nodeType":"YulExpressionStatement","src":"970:76:23"},{"nodeType":"YulAssignment","src":"1055:57:23","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1070:3:23"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1083:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"1091:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1079:3:23"},"nodeType":"YulFunctionCall","src":"1079:15:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1100:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1096:3:23"},"nodeType":"YulFunctionCall","src":"1096:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1075:3:23"},"nodeType":"YulFunctionCall","src":"1075:29:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:23"},"nodeType":"YulFunctionCall","src":"1066:39:23"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1062:3:23"},"nodeType":"YulFunctionCall","src":"1062:50:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1055:3:23"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"874:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"881:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"889:3:23","type":""}],"src":"847:271:23"},{"body":{"nodeType":"YulBlock","src":"1244:99:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1261:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1272:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1254:6:23"},"nodeType":"YulFunctionCall","src":"1254:21:23"},"nodeType":"YulExpressionStatement","src":"1254:21:23"},{"nodeType":"YulAssignment","src":"1284:53:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1310:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1322:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1333:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1318:3:23"},"nodeType":"YulFunctionCall","src":"1318:18:23"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1292:17:23"},"nodeType":"YulFunctionCall","src":"1292:45:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1284:4:23"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1213:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1224:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1235:4:23","type":""}],"src":"1123:220:23"},{"body":{"nodeType":"YulBlock","src":"1418:110:23","statements":[{"body":{"nodeType":"YulBlock","src":"1464:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1473:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1476:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1466:6:23"},"nodeType":"YulFunctionCall","src":"1466:12:23"},"nodeType":"YulExpressionStatement","src":"1466:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1439:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1448:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1435:3:23"},"nodeType":"YulFunctionCall","src":"1435:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"1460:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1431:3:23"},"nodeType":"YulFunctionCall","src":"1431:32:23"},"nodeType":"YulIf","src":"1428:52:23"},{"nodeType":"YulAssignment","src":"1489:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1512:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1499:12:23"},"nodeType":"YulFunctionCall","src":"1499:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1489:6:23"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1384:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1395:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1407:6:23","type":""}],"src":"1348:180:23"},{"body":{"nodeType":"YulBlock","src":"1634:102:23","statements":[{"nodeType":"YulAssignment","src":"1644:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1656:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1667:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1652:3:23"},"nodeType":"YulFunctionCall","src":"1652:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1644:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1686:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1701:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1717:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1722:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1713:3:23"},"nodeType":"YulFunctionCall","src":"1713:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"1726:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1709:3:23"},"nodeType":"YulFunctionCall","src":"1709:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1697:3:23"},"nodeType":"YulFunctionCall","src":"1697:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1679:6:23"},"nodeType":"YulFunctionCall","src":"1679:51:23"},"nodeType":"YulExpressionStatement","src":"1679:51:23"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1603:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1614:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1625:4:23","type":""}],"src":"1533:203:23"},{"body":{"nodeType":"YulBlock","src":"1790:124:23","statements":[{"nodeType":"YulAssignment","src":"1800:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1822:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1809:12:23"},"nodeType":"YulFunctionCall","src":"1809:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1800:5:23"}]},{"body":{"nodeType":"YulBlock","src":"1892:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1901:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1904:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1894:6:23"},"nodeType":"YulFunctionCall","src":"1894:12:23"},"nodeType":"YulExpressionStatement","src":"1894:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1851:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1862:5:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1882:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1873:3:23"},"nodeType":"YulFunctionCall","src":"1873:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"1886:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1869:3:23"},"nodeType":"YulFunctionCall","src":"1869:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1858:3:23"},"nodeType":"YulFunctionCall","src":"1858:31:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1848:2:23"},"nodeType":"YulFunctionCall","src":"1848:42:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1841:6:23"},"nodeType":"YulFunctionCall","src":"1841:50:23"},"nodeType":"YulIf","src":"1838:70:23"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1780:5:23","type":""}],"src":"1741:173:23"},{"body":{"nodeType":"YulBlock","src":"1989:116:23","statements":[{"body":{"nodeType":"YulBlock","src":"2035:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2044:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2047:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2037:6:23"},"nodeType":"YulFunctionCall","src":"2037:12:23"},"nodeType":"YulExpressionStatement","src":"2037:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2010:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2019:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2006:3:23"},"nodeType":"YulFunctionCall","src":"2006:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"2031:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2002:3:23"},"nodeType":"YulFunctionCall","src":"2002:32:23"},"nodeType":"YulIf","src":"1999:52:23"},{"nodeType":"YulAssignment","src":"2060:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2089:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2070:18:23"},"nodeType":"YulFunctionCall","src":"2070:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2060:6:23"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1955:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1966:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1978:6:23","type":""}],"src":"1919:186:23"},{"body":{"nodeType":"YulBlock","src":"2197:167:23","statements":[{"body":{"nodeType":"YulBlock","src":"2243:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2252:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2255:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2245:6:23"},"nodeType":"YulFunctionCall","src":"2245:12:23"},"nodeType":"YulExpressionStatement","src":"2245:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2218:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2227:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2214:3:23"},"nodeType":"YulFunctionCall","src":"2214:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"2239:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2210:3:23"},"nodeType":"YulFunctionCall","src":"2210:32:23"},"nodeType":"YulIf","src":"2207:52:23"},{"nodeType":"YulAssignment","src":"2268:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2297:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2278:18:23"},"nodeType":"YulFunctionCall","src":"2278:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2268:6:23"}]},{"nodeType":"YulAssignment","src":"2316:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2343:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2354:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2339:3:23"},"nodeType":"YulFunctionCall","src":"2339:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2326:12:23"},"nodeType":"YulFunctionCall","src":"2326:32:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2316:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2155:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2166:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2178:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2186:6:23","type":""}],"src":"2110:254:23"},{"body":{"nodeType":"YulBlock","src":"2401:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2418:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2425:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2430:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2421:3:23"},"nodeType":"YulFunctionCall","src":"2421:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2411:6:23"},"nodeType":"YulFunctionCall","src":"2411:31:23"},"nodeType":"YulExpressionStatement","src":"2411:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2458:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2461:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2451:6:23"},"nodeType":"YulFunctionCall","src":"2451:15:23"},"nodeType":"YulExpressionStatement","src":"2451:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2482:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2485:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2475:6:23"},"nodeType":"YulFunctionCall","src":"2475:15:23"},"nodeType":"YulExpressionStatement","src":"2475:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2369:127:23"},{"body":{"nodeType":"YulBlock","src":"2576:557:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2586:28:23","value":{"kind":"number","nodeType":"YulLiteral","src":"2596:18:23","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2590:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"2641:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2643:16:23"},"nodeType":"YulFunctionCall","src":"2643:18:23"},"nodeType":"YulExpressionStatement","src":"2643:18:23"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2629:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"2637:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2626:2:23"},"nodeType":"YulFunctionCall","src":"2626:14:23"},"nodeType":"YulIf","src":"2623:40:23"},{"nodeType":"YulVariableDeclaration","src":"2672:17:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2686:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2682:3:23"},"nodeType":"YulFunctionCall","src":"2682:7:23"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2676:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2698:23:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2718:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2712:5:23"},"nodeType":"YulFunctionCall","src":"2712:9:23"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2702:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2730:73:23","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2752:6:23"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2776:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2784:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2772:3:23"},"nodeType":"YulFunctionCall","src":"2772:15:23"},{"name":"_2","nodeType":"YulIdentifier","src":"2789:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2768:3:23"},"nodeType":"YulFunctionCall","src":"2768:24:23"},{"kind":"number","nodeType":"YulLiteral","src":"2794:2:23","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2764:3:23"},"nodeType":"YulFunctionCall","src":"2764:33:23"},{"name":"_2","nodeType":"YulIdentifier","src":"2799:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2760:3:23"},"nodeType":"YulFunctionCall","src":"2760:42:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2748:3:23"},"nodeType":"YulFunctionCall","src":"2748:55:23"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2734:10:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"2862:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2864:16:23"},"nodeType":"YulFunctionCall","src":"2864:18:23"},"nodeType":"YulExpressionStatement","src":"2864:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2821:10:23"},{"name":"_1","nodeType":"YulIdentifier","src":"2833:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2818:2:23"},"nodeType":"YulFunctionCall","src":"2818:18:23"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2841:10:23"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2853:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2838:2:23"},"nodeType":"YulFunctionCall","src":"2838:22:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2815:2:23"},"nodeType":"YulFunctionCall","src":"2815:46:23"},"nodeType":"YulIf","src":"2812:72:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2900:2:23","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2904:10:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2893:6:23"},"nodeType":"YulFunctionCall","src":"2893:22:23"},"nodeType":"YulExpressionStatement","src":"2893:22:23"},{"nodeType":"YulAssignment","src":"2924:15:23","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"2933:6:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2924:5:23"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2955:6:23"},{"name":"length","nodeType":"YulIdentifier","src":"2963:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2948:6:23"},"nodeType":"YulFunctionCall","src":"2948:22:23"},"nodeType":"YulExpressionStatement","src":"2948:22:23"},{"body":{"nodeType":"YulBlock","src":"3008:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3017:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3020:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3010:6:23"},"nodeType":"YulFunctionCall","src":"3010:12:23"},"nodeType":"YulExpressionStatement","src":"3010:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2989:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"2994:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2985:3:23"},"nodeType":"YulFunctionCall","src":"2985:16:23"},{"name":"end","nodeType":"YulIdentifier","src":"3003:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2982:2:23"},"nodeType":"YulFunctionCall","src":"2982:25:23"},"nodeType":"YulIf","src":"2979:45:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3050:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3058:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3046:3:23"},"nodeType":"YulFunctionCall","src":"3046:17:23"},{"name":"src","nodeType":"YulIdentifier","src":"3065:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"3070:6:23"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3033:12:23"},"nodeType":"YulFunctionCall","src":"3033:44:23"},"nodeType":"YulExpressionStatement","src":"3033:44:23"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3101:6:23"},{"name":"length","nodeType":"YulIdentifier","src":"3109:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3097:3:23"},"nodeType":"YulFunctionCall","src":"3097:19:23"},{"kind":"number","nodeType":"YulLiteral","src":"3118:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3093:3:23"},"nodeType":"YulFunctionCall","src":"3093:30:23"},{"kind":"number","nodeType":"YulLiteral","src":"3125:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3086:6:23"},"nodeType":"YulFunctionCall","src":"3086:41:23"},"nodeType":"YulExpressionStatement","src":"3086:41:23"}]},"name":"abi_decode_available_length_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2545:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"2550:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"2558:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2566:5:23","type":""}],"src":"2501:632:23"},{"body":{"nodeType":"YulBlock","src":"3191:169:23","statements":[{"body":{"nodeType":"YulBlock","src":"3240:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3249:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3252:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3242:6:23"},"nodeType":"YulFunctionCall","src":"3242:12:23"},"nodeType":"YulExpressionStatement","src":"3242:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3219:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3227:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3215:3:23"},"nodeType":"YulFunctionCall","src":"3215:17:23"},{"name":"end","nodeType":"YulIdentifier","src":"3234:3:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3211:3:23"},"nodeType":"YulFunctionCall","src":"3211:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3204:6:23"},"nodeType":"YulFunctionCall","src":"3204:35:23"},"nodeType":"YulIf","src":"3201:55:23"},{"nodeType":"YulAssignment","src":"3265:89:23","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3313:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3321:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3309:3:23"},"nodeType":"YulFunctionCall","src":"3309:17:23"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3341:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3328:12:23"},"nodeType":"YulFunctionCall","src":"3328:20:23"},{"name":"end","nodeType":"YulIdentifier","src":"3350:3:23"}],"functionName":{"name":"abi_decode_available_length_string","nodeType":"YulIdentifier","src":"3274:34:23"},"nodeType":"YulFunctionCall","src":"3274:80:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3265:5:23"}]}]},"name":"abi_decode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3165:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"3173:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3181:5:23","type":""}],"src":"3138:222:23"},{"body":{"nodeType":"YulBlock","src":"3462:293:23","statements":[{"body":{"nodeType":"YulBlock","src":"3508:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3517:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3520:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3510:6:23"},"nodeType":"YulFunctionCall","src":"3510:12:23"},"nodeType":"YulExpressionStatement","src":"3510:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3483:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"3492:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3479:3:23"},"nodeType":"YulFunctionCall","src":"3479:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"3504:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3475:3:23"},"nodeType":"YulFunctionCall","src":"3475:32:23"},"nodeType":"YulIf","src":"3472:52:23"},{"nodeType":"YulAssignment","src":"3533:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3556:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3543:12:23"},"nodeType":"YulFunctionCall","src":"3543:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3533:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"3575:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3606:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3617:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3602:3:23"},"nodeType":"YulFunctionCall","src":"3602:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3589:12:23"},"nodeType":"YulFunctionCall","src":"3589:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3579:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3664:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3673:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3676:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3666:6:23"},"nodeType":"YulFunctionCall","src":"3666:12:23"},"nodeType":"YulExpressionStatement","src":"3666:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3636:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3644:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3633:2:23"},"nodeType":"YulFunctionCall","src":"3633:30:23"},"nodeType":"YulIf","src":"3630:50:23"},{"nodeType":"YulAssignment","src":"3689:60:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3721:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"3732:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3717:3:23"},"nodeType":"YulFunctionCall","src":"3717:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3741:7:23"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"3699:17:23"},"nodeType":"YulFunctionCall","src":"3699:50:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3689:6:23"}]}]},"name":"abi_decode_tuple_t_uint256t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3420:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3431:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3443:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3451:6:23","type":""}],"src":"3365:390:23"},{"body":{"nodeType":"YulBlock","src":"3861:76:23","statements":[{"nodeType":"YulAssignment","src":"3871:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3883:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3894:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3879:3:23"},"nodeType":"YulFunctionCall","src":"3879:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3871:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3913:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"3924:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3906:6:23"},"nodeType":"YulFunctionCall","src":"3906:25:23"},"nodeType":"YulExpressionStatement","src":"3906:25:23"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3830:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3841:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3852:4:23","type":""}],"src":"3760:177:23"},{"body":{"nodeType":"YulBlock","src":"4046:224:23","statements":[{"body":{"nodeType":"YulBlock","src":"4092:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4101:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4104:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4094:6:23"},"nodeType":"YulFunctionCall","src":"4094:12:23"},"nodeType":"YulExpressionStatement","src":"4094:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4067:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"4076:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4063:3:23"},"nodeType":"YulFunctionCall","src":"4063:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4088:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4059:3:23"},"nodeType":"YulFunctionCall","src":"4059:32:23"},"nodeType":"YulIf","src":"4056:52:23"},{"nodeType":"YulAssignment","src":"4117:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4146:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4127:18:23"},"nodeType":"YulFunctionCall","src":"4127:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4117:6:23"}]},{"nodeType":"YulAssignment","src":"4165:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4198:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4209:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4194:3:23"},"nodeType":"YulFunctionCall","src":"4194:18:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4175:18:23"},"nodeType":"YulFunctionCall","src":"4175:38:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4165:6:23"}]},{"nodeType":"YulAssignment","src":"4222:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4249:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4260:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4245:3:23"},"nodeType":"YulFunctionCall","src":"4245:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4232:12:23"},"nodeType":"YulFunctionCall","src":"4232:32:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4222:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3996:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4007:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4019:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4027:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4035:6:23","type":""}],"src":"3942:328:23"},{"body":{"nodeType":"YulBlock","src":"4345:110:23","statements":[{"body":{"nodeType":"YulBlock","src":"4391:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4400:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4403:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4393:6:23"},"nodeType":"YulFunctionCall","src":"4393:12:23"},"nodeType":"YulExpressionStatement","src":"4393:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4366:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"4375:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4362:3:23"},"nodeType":"YulFunctionCall","src":"4362:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4387:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4358:3:23"},"nodeType":"YulFunctionCall","src":"4358:32:23"},"nodeType":"YulIf","src":"4355:52:23"},{"nodeType":"YulAssignment","src":"4416:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4439:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4426:12:23"},"nodeType":"YulFunctionCall","src":"4426:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4416:6:23"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4311:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4322:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4334:6:23","type":""}],"src":"4275:180:23"},{"body":{"nodeType":"YulBlock","src":"4561:76:23","statements":[{"nodeType":"YulAssignment","src":"4571:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4583:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4594:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4579:3:23"},"nodeType":"YulFunctionCall","src":"4579:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4571:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4613:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"4624:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4606:6:23"},"nodeType":"YulFunctionCall","src":"4606:25:23"},"nodeType":"YulExpressionStatement","src":"4606:25:23"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4530:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4541:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4552:4:23","type":""}],"src":"4460:177:23"},{"body":{"nodeType":"YulBlock","src":"4729:167:23","statements":[{"body":{"nodeType":"YulBlock","src":"4775:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4784:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4787:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4777:6:23"},"nodeType":"YulFunctionCall","src":"4777:12:23"},"nodeType":"YulExpressionStatement","src":"4777:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4750:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"4759:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4746:3:23"},"nodeType":"YulFunctionCall","src":"4746:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4771:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4742:3:23"},"nodeType":"YulFunctionCall","src":"4742:32:23"},"nodeType":"YulIf","src":"4739:52:23"},{"nodeType":"YulAssignment","src":"4800:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4823:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4810:12:23"},"nodeType":"YulFunctionCall","src":"4810:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4800:6:23"}]},{"nodeType":"YulAssignment","src":"4842:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4875:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4886:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4871:3:23"},"nodeType":"YulFunctionCall","src":"4871:18:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4852:18:23"},"nodeType":"YulFunctionCall","src":"4852:38:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4842:6:23"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4687:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4698:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4710:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4718:6:23","type":""}],"src":"4642:254:23"},{"body":{"nodeType":"YulBlock","src":"4947:114:23","statements":[{"nodeType":"YulAssignment","src":"4957:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4979:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4966:12:23"},"nodeType":"YulFunctionCall","src":"4966:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4957:5:23"}]},{"body":{"nodeType":"YulBlock","src":"5039:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5048:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5051:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5041:6:23"},"nodeType":"YulFunctionCall","src":"5041:12:23"},"nodeType":"YulExpressionStatement","src":"5041:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5008:5:23"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5029:5:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5022:6:23"},"nodeType":"YulFunctionCall","src":"5022:13:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5015:6:23"},"nodeType":"YulFunctionCall","src":"5015:21:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5005:2:23"},"nodeType":"YulFunctionCall","src":"5005:32:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4998:6:23"},"nodeType":"YulFunctionCall","src":"4998:40:23"},"nodeType":"YulIf","src":"4995:60:23"}]},"name":"abi_decode_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4926:6:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4937:5:23","type":""}],"src":"4901:160:23"},{"body":{"nodeType":"YulBlock","src":"5133:113:23","statements":[{"body":{"nodeType":"YulBlock","src":"5179:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5188:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5191:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5181:6:23"},"nodeType":"YulFunctionCall","src":"5181:12:23"},"nodeType":"YulExpressionStatement","src":"5181:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5154:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"5163:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5150:3:23"},"nodeType":"YulFunctionCall","src":"5150:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"5175:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5146:3:23"},"nodeType":"YulFunctionCall","src":"5146:32:23"},"nodeType":"YulIf","src":"5143:52:23"},{"nodeType":"YulAssignment","src":"5204:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5230:9:23"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"5214:15:23"},"nodeType":"YulFunctionCall","src":"5214:26:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5204:6:23"}]}]},"name":"abi_decode_tuple_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5099:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5110:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5122:6:23","type":""}],"src":"5066:180:23"},{"body":{"nodeType":"YulBlock","src":"5338:161:23","statements":[{"body":{"nodeType":"YulBlock","src":"5384:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5393:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5396:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5386:6:23"},"nodeType":"YulFunctionCall","src":"5386:12:23"},"nodeType":"YulExpressionStatement","src":"5386:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5359:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"5368:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5355:3:23"},"nodeType":"YulFunctionCall","src":"5355:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"5380:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5351:3:23"},"nodeType":"YulFunctionCall","src":"5351:32:23"},"nodeType":"YulIf","src":"5348:52:23"},{"nodeType":"YulAssignment","src":"5409:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5432:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5419:12:23"},"nodeType":"YulFunctionCall","src":"5419:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5409:6:23"}]},{"nodeType":"YulAssignment","src":"5451:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5478:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5489:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5474:3:23"},"nodeType":"YulFunctionCall","src":"5474:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5461:12:23"},"nodeType":"YulFunctionCall","src":"5461:32:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5451:6:23"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5296:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5307:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5319:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5327:6:23","type":""}],"src":"5251:248:23"},{"body":{"nodeType":"YulBlock","src":"5588:170:23","statements":[{"body":{"nodeType":"YulBlock","src":"5634:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5643:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5646:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5636:6:23"},"nodeType":"YulFunctionCall","src":"5636:12:23"},"nodeType":"YulExpressionStatement","src":"5636:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5609:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"5618:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5605:3:23"},"nodeType":"YulFunctionCall","src":"5605:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"5630:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5601:3:23"},"nodeType":"YulFunctionCall","src":"5601:32:23"},"nodeType":"YulIf","src":"5598:52:23"},{"nodeType":"YulAssignment","src":"5659:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5688:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5669:18:23"},"nodeType":"YulFunctionCall","src":"5669:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5659:6:23"}]},{"nodeType":"YulAssignment","src":"5707:45:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5737:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5748:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5733:3:23"},"nodeType":"YulFunctionCall","src":"5733:18:23"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"5717:15:23"},"nodeType":"YulFunctionCall","src":"5717:35:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5707:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5546:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5557:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5569:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5577:6:23","type":""}],"src":"5504:254:23"},{"body":{"nodeType":"YulBlock","src":"5893:537:23","statements":[{"body":{"nodeType":"YulBlock","src":"5940:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5949:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5952:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5942:6:23"},"nodeType":"YulFunctionCall","src":"5942:12:23"},"nodeType":"YulExpressionStatement","src":"5942:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5914:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"5923:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5910:3:23"},"nodeType":"YulFunctionCall","src":"5910:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"5935:3:23","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5906:3:23"},"nodeType":"YulFunctionCall","src":"5906:33:23"},"nodeType":"YulIf","src":"5903:53:23"},{"nodeType":"YulAssignment","src":"5965:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5994:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5975:18:23"},"nodeType":"YulFunctionCall","src":"5975:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5965:6:23"}]},{"nodeType":"YulAssignment","src":"6013:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6046:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6057:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6042:3:23"},"nodeType":"YulFunctionCall","src":"6042:18:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6023:18:23"},"nodeType":"YulFunctionCall","src":"6023:38:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6013:6:23"}]},{"nodeType":"YulAssignment","src":"6070:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6097:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6108:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6093:3:23"},"nodeType":"YulFunctionCall","src":"6093:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6080:12:23"},"nodeType":"YulFunctionCall","src":"6080:32:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6070:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"6121:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6152:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6163:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6148:3:23"},"nodeType":"YulFunctionCall","src":"6148:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6135:12:23"},"nodeType":"YulFunctionCall","src":"6135:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6125:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"6210:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6219:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6222:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6212:6:23"},"nodeType":"YulFunctionCall","src":"6212:12:23"},"nodeType":"YulExpressionStatement","src":"6212:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6182:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6190:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6179:2:23"},"nodeType":"YulFunctionCall","src":"6179:30:23"},"nodeType":"YulIf","src":"6176:50:23"},{"nodeType":"YulVariableDeclaration","src":"6235:32:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6249:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"6260:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6245:3:23"},"nodeType":"YulFunctionCall","src":"6245:22:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6239:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"6315:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6324:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6327:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6317:6:23"},"nodeType":"YulFunctionCall","src":"6317:12:23"},"nodeType":"YulExpressionStatement","src":"6317:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6294:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"6298:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6290:3:23"},"nodeType":"YulFunctionCall","src":"6290:13:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6305:7:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6286:3:23"},"nodeType":"YulFunctionCall","src":"6286:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6279:6:23"},"nodeType":"YulFunctionCall","src":"6279:35:23"},"nodeType":"YulIf","src":"6276:55:23"},{"nodeType":"YulAssignment","src":"6340:84:23","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6389:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"6393:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6385:3:23"},"nodeType":"YulFunctionCall","src":"6385:11:23"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6411:2:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6398:12:23"},"nodeType":"YulFunctionCall","src":"6398:16:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6416:7:23"}],"functionName":{"name":"abi_decode_available_length_string","nodeType":"YulIdentifier","src":"6350:34:23"},"nodeType":"YulFunctionCall","src":"6350:74:23"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6340:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5835:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5846:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5858:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5866:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5874:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5882:6:23","type":""}],"src":"5763:667:23"},{"body":{"nodeType":"YulBlock","src":"6532:299:23","statements":[{"body":{"nodeType":"YulBlock","src":"6578:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6587:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6590:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6580:6:23"},"nodeType":"YulFunctionCall","src":"6580:12:23"},"nodeType":"YulExpressionStatement","src":"6580:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6553:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"6562:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6549:3:23"},"nodeType":"YulFunctionCall","src":"6549:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"6574:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6545:3:23"},"nodeType":"YulFunctionCall","src":"6545:32:23"},"nodeType":"YulIf","src":"6542:52:23"},{"nodeType":"YulAssignment","src":"6603:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6632:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6613:18:23"},"nodeType":"YulFunctionCall","src":"6613:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6603:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"6651:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6682:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6693:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6678:3:23"},"nodeType":"YulFunctionCall","src":"6678:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6665:12:23"},"nodeType":"YulFunctionCall","src":"6665:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6655:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"6740:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6749:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6752:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6742:6:23"},"nodeType":"YulFunctionCall","src":"6742:12:23"},"nodeType":"YulExpressionStatement","src":"6742:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6712:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6720:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6709:2:23"},"nodeType":"YulFunctionCall","src":"6709:30:23"},"nodeType":"YulIf","src":"6706:50:23"},{"nodeType":"YulAssignment","src":"6765:60:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6797:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"6808:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6793:3:23"},"nodeType":"YulFunctionCall","src":"6793:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6817:7:23"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"6775:17:23"},"nodeType":"YulFunctionCall","src":"6775:50:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6765:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6490:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6501:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6513:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6521:6:23","type":""}],"src":"6435:396:23"},{"body":{"nodeType":"YulBlock","src":"6923:173:23","statements":[{"body":{"nodeType":"YulBlock","src":"6969:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6978:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6981:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6971:6:23"},"nodeType":"YulFunctionCall","src":"6971:12:23"},"nodeType":"YulExpressionStatement","src":"6971:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6944:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"6953:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6940:3:23"},"nodeType":"YulFunctionCall","src":"6940:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"6965:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6936:3:23"},"nodeType":"YulFunctionCall","src":"6936:32:23"},"nodeType":"YulIf","src":"6933:52:23"},{"nodeType":"YulAssignment","src":"6994:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7023:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7004:18:23"},"nodeType":"YulFunctionCall","src":"7004:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6994:6:23"}]},{"nodeType":"YulAssignment","src":"7042:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7075:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7086:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7071:3:23"},"nodeType":"YulFunctionCall","src":"7071:18:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7052:18:23"},"nodeType":"YulFunctionCall","src":"7052:38:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7042:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6881:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6892:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6904:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6912:6:23","type":""}],"src":"6836:260:23"},{"body":{"nodeType":"YulBlock","src":"7156:325:23","statements":[{"nodeType":"YulAssignment","src":"7166:22:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7180:1:23","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"7183:4:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7176:3:23"},"nodeType":"YulFunctionCall","src":"7176:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7166:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"7197:38:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7227:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"7233:1:23","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7223:3:23"},"nodeType":"YulFunctionCall","src":"7223:12:23"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"7201:18:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"7274:31:23","statements":[{"nodeType":"YulAssignment","src":"7276:27:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7290:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"7298:4:23","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7286:3:23"},"nodeType":"YulFunctionCall","src":"7286:17:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7276:6:23"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"7254:18:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7247:6:23"},"nodeType":"YulFunctionCall","src":"7247:26:23"},"nodeType":"YulIf","src":"7244:61:23"},{"body":{"nodeType":"YulBlock","src":"7364:111:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7385:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7392:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7397:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7388:3:23"},"nodeType":"YulFunctionCall","src":"7388:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7378:6:23"},"nodeType":"YulFunctionCall","src":"7378:31:23"},"nodeType":"YulExpressionStatement","src":"7378:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7429:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7432:4:23","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7422:6:23"},"nodeType":"YulFunctionCall","src":"7422:15:23"},"nodeType":"YulExpressionStatement","src":"7422:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7457:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7460:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7450:6:23"},"nodeType":"YulFunctionCall","src":"7450:15:23"},"nodeType":"YulExpressionStatement","src":"7450:15:23"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"7320:18:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7343:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"7351:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7340:2:23"},"nodeType":"YulFunctionCall","src":"7340:14:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7317:2:23"},"nodeType":"YulFunctionCall","src":"7317:38:23"},"nodeType":"YulIf","src":"7314:161:23"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"7136:4:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"7145:6:23","type":""}],"src":"7101:380:23"},{"body":{"nodeType":"YulBlock","src":"7660:230:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7677:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7688:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7670:6:23"},"nodeType":"YulFunctionCall","src":"7670:21:23"},"nodeType":"YulExpressionStatement","src":"7670:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7711:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7722:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7707:3:23"},"nodeType":"YulFunctionCall","src":"7707:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"7727:2:23","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7700:6:23"},"nodeType":"YulFunctionCall","src":"7700:30:23"},"nodeType":"YulExpressionStatement","src":"7700:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7750:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7761:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7746:3:23"},"nodeType":"YulFunctionCall","src":"7746:18:23"},{"hexValue":"43616c6c657220646f6573206e6f742068617320612044454641554c545f4144","kind":"string","nodeType":"YulLiteral","src":"7766:34:23","type":"","value":"Caller does not has a DEFAULT_AD"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7739:6:23"},"nodeType":"YulFunctionCall","src":"7739:62:23"},"nodeType":"YulExpressionStatement","src":"7739:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7821:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7832:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7817:3:23"},"nodeType":"YulFunctionCall","src":"7817:18:23"},{"hexValue":"4d494e5f524f4c45","kind":"string","nodeType":"YulLiteral","src":"7837:10:23","type":"","value":"MIN_ROLE"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7810:6:23"},"nodeType":"YulFunctionCall","src":"7810:38:23"},"nodeType":"YulExpressionStatement","src":"7810:38:23"},{"nodeType":"YulAssignment","src":"7857:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7869:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7880:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7865:3:23"},"nodeType":"YulFunctionCall","src":"7865:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7857:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_26a18b82a6f0089994fa1fc7c15d389f66d55b2b42f9d4738227fb927dd79151__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7637:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7651:4:23","type":""}],"src":"7486:404:23"},{"body":{"nodeType":"YulBlock","src":"8052:218:23","statements":[{"nodeType":"YulAssignment","src":"8062:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8074:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8085:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8070:3:23"},"nodeType":"YulFunctionCall","src":"8070:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8062:4:23"}]},{"nodeType":"YulVariableDeclaration","src":"8097:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8115:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"8120:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8111:3:23"},"nodeType":"YulFunctionCall","src":"8111:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"8124:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8107:3:23"},"nodeType":"YulFunctionCall","src":"8107:19:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8101:2:23","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8142:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8157:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"8165:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8153:3:23"},"nodeType":"YulFunctionCall","src":"8153:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8135:6:23"},"nodeType":"YulFunctionCall","src":"8135:34:23"},"nodeType":"YulExpressionStatement","src":"8135:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8189:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8200:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8185:3:23"},"nodeType":"YulFunctionCall","src":"8185:18:23"},{"name":"value1","nodeType":"YulIdentifier","src":"8205:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8178:6:23"},"nodeType":"YulFunctionCall","src":"8178:34:23"},"nodeType":"YulExpressionStatement","src":"8178:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8232:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8243:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8228:3:23"},"nodeType":"YulFunctionCall","src":"8228:18:23"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8252:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"8260:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8248:3:23"},"nodeType":"YulFunctionCall","src":"8248:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8221:6:23"},"nodeType":"YulFunctionCall","src":"8221:43:23"},"nodeType":"YulExpressionStatement","src":"8221:43:23"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8005:9:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8016:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8024:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8032:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8043:4:23","type":""}],"src":"7895:375:23"},{"body":{"nodeType":"YulBlock","src":"8404:145:23","statements":[{"nodeType":"YulAssignment","src":"8414:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8426:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8437:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8422:3:23"},"nodeType":"YulFunctionCall","src":"8422:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8414:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8456:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8471:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8487:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"8492:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8483:3:23"},"nodeType":"YulFunctionCall","src":"8483:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"8496:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8479:3:23"},"nodeType":"YulFunctionCall","src":"8479:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8467:3:23"},"nodeType":"YulFunctionCall","src":"8467:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8449:6:23"},"nodeType":"YulFunctionCall","src":"8449:51:23"},"nodeType":"YulExpressionStatement","src":"8449:51:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8520:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8531:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8516:3:23"},"nodeType":"YulFunctionCall","src":"8516:18:23"},{"name":"value1","nodeType":"YulIdentifier","src":"8536:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8509:6:23"},"nodeType":"YulFunctionCall","src":"8509:34:23"},"nodeType":"YulExpressionStatement","src":"8509:34:23"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8365:9:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8376:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8384:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8395:4:23","type":""}],"src":"8275:274:23"},{"body":{"nodeType":"YulBlock","src":"8728:228:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8745:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8756:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8738:6:23"},"nodeType":"YulFunctionCall","src":"8738:21:23"},"nodeType":"YulExpressionStatement","src":"8738:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8779:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8790:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8775:3:23"},"nodeType":"YulFunctionCall","src":"8775:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"8795:2:23","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8768:6:23"},"nodeType":"YulFunctionCall","src":"8768:30:23"},"nodeType":"YulExpressionStatement","src":"8768:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8818:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8829:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8814:3:23"},"nodeType":"YulFunctionCall","src":"8814:18:23"},{"hexValue":"54686973204e465420776173206e6f74207065726d697474656420746f207472","kind":"string","nodeType":"YulLiteral","src":"8834:34:23","type":"","value":"This NFT was not permitted to tr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8807:6:23"},"nodeType":"YulFunctionCall","src":"8807:62:23"},"nodeType":"YulExpressionStatement","src":"8807:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8889:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8900:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8885:3:23"},"nodeType":"YulFunctionCall","src":"8885:18:23"},{"hexValue":"616e73666572","kind":"string","nodeType":"YulLiteral","src":"8905:8:23","type":"","value":"ansfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8878:6:23"},"nodeType":"YulFunctionCall","src":"8878:36:23"},"nodeType":"YulExpressionStatement","src":"8878:36:23"},{"nodeType":"YulAssignment","src":"8923:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8935:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8946:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8931:3:23"},"nodeType":"YulFunctionCall","src":"8931:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8923:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_96265c9a7a9576744e74229ec48afeae05f496150ec706fc9d69b4d994b10fa4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8705:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8719:4:23","type":""}],"src":"8554:402:23"},{"body":{"nodeType":"YulBlock","src":"9135:172:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9152:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9163:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9145:6:23"},"nodeType":"YulFunctionCall","src":"9145:21:23"},"nodeType":"YulExpressionStatement","src":"9145:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9186:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9197:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9182:3:23"},"nodeType":"YulFunctionCall","src":"9182:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"9202:2:23","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9175:6:23"},"nodeType":"YulFunctionCall","src":"9175:30:23"},"nodeType":"YulExpressionStatement","src":"9175:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9225:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9236:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9221:3:23"},"nodeType":"YulFunctionCall","src":"9221:18:23"},{"hexValue":"43616c6c657220686173206265656e20667265657a65","kind":"string","nodeType":"YulLiteral","src":"9241:24:23","type":"","value":"Caller has been freeze"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9214:6:23"},"nodeType":"YulFunctionCall","src":"9214:52:23"},"nodeType":"YulExpressionStatement","src":"9214:52:23"},{"nodeType":"YulAssignment","src":"9275:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9287:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9298:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9283:3:23"},"nodeType":"YulFunctionCall","src":"9283:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9275:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_df799cddfe1e8e896d8d4ad58f231c73395b1e5aae588589151e636922b9fd0b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9112:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9126:4:23","type":""}],"src":"8961:346:23"},{"body":{"nodeType":"YulBlock","src":"9486:224:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9503:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9514:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9496:6:23"},"nodeType":"YulFunctionCall","src":"9496:21:23"},"nodeType":"YulExpressionStatement","src":"9496:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9537:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9548:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9533:3:23"},"nodeType":"YulFunctionCall","src":"9533:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"9553:2:23","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9526:6:23"},"nodeType":"YulFunctionCall","src":"9526:30:23"},"nodeType":"YulExpressionStatement","src":"9526:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9576:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9587:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9572:3:23"},"nodeType":"YulFunctionCall","src":"9572:18:23"},{"hexValue":"54686973204e465420776173206e6f74207065726d697474656420746f206275","kind":"string","nodeType":"YulLiteral","src":"9592:34:23","type":"","value":"This NFT was not permitted to bu"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9565:6:23"},"nodeType":"YulFunctionCall","src":"9565:62:23"},"nodeType":"YulExpressionStatement","src":"9565:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9647:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9658:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9643:3:23"},"nodeType":"YulFunctionCall","src":"9643:18:23"},{"hexValue":"726e","kind":"string","nodeType":"YulLiteral","src":"9663:4:23","type":"","value":"rn"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9636:6:23"},"nodeType":"YulFunctionCall","src":"9636:32:23"},"nodeType":"YulExpressionStatement","src":"9636:32:23"},{"nodeType":"YulAssignment","src":"9677:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9689:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9700:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9685:3:23"},"nodeType":"YulFunctionCall","src":"9685:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9677:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_e688d7497ddb1402e497ed0319ede17625ff78c3f261503d4327ab1b642407bb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9463:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9477:4:23","type":""}],"src":"9312:398:23"},{"body":{"nodeType":"YulBlock","src":"9889:178:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9906:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9917:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9899:6:23"},"nodeType":"YulFunctionCall","src":"9899:21:23"},"nodeType":"YulExpressionStatement","src":"9899:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9940:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9951:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9936:3:23"},"nodeType":"YulFunctionCall","src":"9936:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"9956:2:23","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9929:6:23"},"nodeType":"YulFunctionCall","src":"9929:30:23"},"nodeType":"YulExpressionStatement","src":"9929:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9979:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9990:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9975:3:23"},"nodeType":"YulFunctionCall","src":"9975:18:23"},{"hexValue":"43616c6c657220646f6573206e6f74206f776e2074686973204e4654","kind":"string","nodeType":"YulLiteral","src":"9995:30:23","type":"","value":"Caller does not own this NFT"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9968:6:23"},"nodeType":"YulFunctionCall","src":"9968:58:23"},"nodeType":"YulExpressionStatement","src":"9968:58:23"},{"nodeType":"YulAssignment","src":"10035:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10047:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10058:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10043:3:23"},"nodeType":"YulFunctionCall","src":"10043:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10035:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_f73ae05a0e7fa0084b25cebcc7c99c97b88354866069b73642dfeeee8282b4dd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9866:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9880:4:23","type":""}],"src":"9715:352:23"},{"body":{"nodeType":"YulBlock","src":"10104:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10121:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10128:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"10133:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10124:3:23"},"nodeType":"YulFunctionCall","src":"10124:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10114:6:23"},"nodeType":"YulFunctionCall","src":"10114:31:23"},"nodeType":"YulExpressionStatement","src":"10114:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10161:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10164:4:23","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10154:6:23"},"nodeType":"YulFunctionCall","src":"10154:15:23"},"nodeType":"YulExpressionStatement","src":"10154:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10185:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10188:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10178:6:23"},"nodeType":"YulFunctionCall","src":"10178:15:23"},"nodeType":"YulExpressionStatement","src":"10178:15:23"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"10072:127:23"},{"body":{"nodeType":"YulBlock","src":"10236:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10253:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10260:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"10265:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10256:3:23"},"nodeType":"YulFunctionCall","src":"10256:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10246:6:23"},"nodeType":"YulFunctionCall","src":"10246:31:23"},"nodeType":"YulExpressionStatement","src":"10246:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10293:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10296:4:23","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10286:6:23"},"nodeType":"YulFunctionCall","src":"10286:15:23"},"nodeType":"YulExpressionStatement","src":"10286:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10317:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10320:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10310:6:23"},"nodeType":"YulFunctionCall","src":"10310:15:23"},"nodeType":"YulExpressionStatement","src":"10310:15:23"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10204:127:23"},{"body":{"nodeType":"YulBlock","src":"10384:77:23","statements":[{"nodeType":"YulAssignment","src":"10394:16:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10405:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"10408:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10401:3:23"},"nodeType":"YulFunctionCall","src":"10401:9:23"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"10394:3:23"}]},{"body":{"nodeType":"YulBlock","src":"10433:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10435:16:23"},"nodeType":"YulFunctionCall","src":"10435:18:23"},"nodeType":"YulExpressionStatement","src":"10435:18:23"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10425:1:23"},{"name":"sum","nodeType":"YulIdentifier","src":"10428:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10422:2:23"},"nodeType":"YulFunctionCall","src":"10422:10:23"},"nodeType":"YulIf","src":"10419:36:23"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10367:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"10370:1:23","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"10376:3:23","type":""}],"src":"10336:125:23"},{"body":{"nodeType":"YulBlock","src":"10640:223:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10657:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10668:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10650:6:23"},"nodeType":"YulFunctionCall","src":"10650:21:23"},"nodeType":"YulExpressionStatement","src":"10650:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10691:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10702:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10687:3:23"},"nodeType":"YulFunctionCall","src":"10687:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"10707:2:23","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10680:6:23"},"nodeType":"YulFunctionCall","src":"10680:30:23"},"nodeType":"YulExpressionStatement","src":"10680:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10730:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10741:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10726:3:23"},"nodeType":"YulFunctionCall","src":"10726:18:23"},{"hexValue":"54686973204e4654206973206e6f74207075626c69636c79206d696e7461626c","kind":"string","nodeType":"YulLiteral","src":"10746:34:23","type":"","value":"This NFT is not publicly mintabl"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10719:6:23"},"nodeType":"YulFunctionCall","src":"10719:62:23"},"nodeType":"YulExpressionStatement","src":"10719:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10801:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10812:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10797:3:23"},"nodeType":"YulFunctionCall","src":"10797:18:23"},{"hexValue":"65","kind":"string","nodeType":"YulLiteral","src":"10817:3:23","type":"","value":"e"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10790:6:23"},"nodeType":"YulFunctionCall","src":"10790:31:23"},"nodeType":"YulExpressionStatement","src":"10790:31:23"},{"nodeType":"YulAssignment","src":"10830:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10842:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10853:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10838:3:23"},"nodeType":"YulFunctionCall","src":"10838:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10830:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d23406286cff9f065550eeba5e3e1e76b7868deae85a2bc79d8a126c15e661d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10617:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10631:4:23","type":""}],"src":"10466:397:23"},{"body":{"nodeType":"YulBlock","src":"10924:65:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10941:1:23","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"10944:3:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10934:6:23"},"nodeType":"YulFunctionCall","src":"10934:14:23"},"nodeType":"YulExpressionStatement","src":"10934:14:23"},{"nodeType":"YulAssignment","src":"10957:26:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10975:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10978:4:23","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"10965:9:23"},"nodeType":"YulFunctionCall","src":"10965:18:23"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"10957:4:23"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"10907:3:23","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"10915:4:23","type":""}],"src":"10868:121:23"},{"body":{"nodeType":"YulBlock","src":"11075:464:23","statements":[{"body":{"nodeType":"YulBlock","src":"11108:425:23","statements":[{"nodeType":"YulVariableDeclaration","src":"11122:11:23","value":{"kind":"number","nodeType":"YulLiteral","src":"11132:1:23","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11126:2:23","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11153:2:23"},{"name":"array","nodeType":"YulIdentifier","src":"11157:5:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11146:6:23"},"nodeType":"YulFunctionCall","src":"11146:17:23"},"nodeType":"YulExpressionStatement","src":"11146:17:23"},{"nodeType":"YulVariableDeclaration","src":"11176:31:23","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11198:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"11202:4:23","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"11188:9:23"},"nodeType":"YulFunctionCall","src":"11188:19:23"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"11180:4:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11220:57:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"11243:4:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11253:1:23","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"11260:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"11272:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11256:3:23"},"nodeType":"YulFunctionCall","src":"11256:19:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"11249:3:23"},"nodeType":"YulFunctionCall","src":"11249:27:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11239:3:23"},"nodeType":"YulFunctionCall","src":"11239:38:23"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"11224:11:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"11314:23:23","statements":[{"nodeType":"YulAssignment","src":"11316:19:23","value":{"name":"data","nodeType":"YulIdentifier","src":"11331:4:23"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"11316:11:23"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"11296:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"11308:4:23","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11293:2:23"},"nodeType":"YulFunctionCall","src":"11293:20:23"},"nodeType":"YulIf","src":"11290:47:23"},{"nodeType":"YulVariableDeclaration","src":"11350:41:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"11364:4:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11374:1:23","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"11381:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"11386:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11377:3:23"},"nodeType":"YulFunctionCall","src":"11377:12:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"11370:3:23"},"nodeType":"YulFunctionCall","src":"11370:20:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11360:3:23"},"nodeType":"YulFunctionCall","src":"11360:31:23"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"11354:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11404:24:23","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"11417:11:23"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"11408:5:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"11502:21:23","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"11511:5:23"},{"name":"_1","nodeType":"YulIdentifier","src":"11518:2:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"11504:6:23"},"nodeType":"YulFunctionCall","src":"11504:17:23"},"nodeType":"YulExpressionStatement","src":"11504:17:23"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"11452:5:23"},{"name":"_2","nodeType":"YulIdentifier","src":"11459:2:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11449:2:23"},"nodeType":"YulFunctionCall","src":"11449:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11463:26:23","statements":[{"nodeType":"YulAssignment","src":"11465:22:23","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"11478:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"11485:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11474:3:23"},"nodeType":"YulFunctionCall","src":"11474:13:23"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"11465:5:23"}]}]},"pre":{"nodeType":"YulBlock","src":"11445:3:23","statements":[]},"src":"11441:82:23"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"11091:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"11096:2:23","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11088:2:23"},"nodeType":"YulFunctionCall","src":"11088:11:23"},"nodeType":"YulIf","src":"11085:448:23"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"11047:5:23","type":""},{"name":"len","nodeType":"YulTypedName","src":"11054:3:23","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"11059:10:23","type":""}],"src":"10994:545:23"},{"body":{"nodeType":"YulBlock","src":"11629:81:23","statements":[{"nodeType":"YulAssignment","src":"11639:65:23","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"11654:4:23"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11672:1:23","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"11675:3:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11668:3:23"},"nodeType":"YulFunctionCall","src":"11668:11:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11685:1:23","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11681:3:23"},"nodeType":"YulFunctionCall","src":"11681:6:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"11664:3:23"},"nodeType":"YulFunctionCall","src":"11664:24:23"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11660:3:23"},"nodeType":"YulFunctionCall","src":"11660:29:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11650:3:23"},"nodeType":"YulFunctionCall","src":"11650:40:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11696:1:23","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"11699:3:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11692:3:23"},"nodeType":"YulFunctionCall","src":"11692:11:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"11647:2:23"},"nodeType":"YulFunctionCall","src":"11647:57:23"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"11639:4:23"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"11606:4:23","type":""},{"name":"len","nodeType":"YulTypedName","src":"11612:3:23","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"11620:4:23","type":""}],"src":"11544:166:23"},{"body":{"nodeType":"YulBlock","src":"11811:1256:23","statements":[{"nodeType":"YulVariableDeclaration","src":"11821:24:23","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11841:3:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11835:5:23"},"nodeType":"YulFunctionCall","src":"11835:10:23"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"11825:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"11888:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"11890:16:23"},"nodeType":"YulFunctionCall","src":"11890:18:23"},"nodeType":"YulExpressionStatement","src":"11890:18:23"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"11860:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"11868:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11857:2:23"},"nodeType":"YulFunctionCall","src":"11857:30:23"},"nodeType":"YulIf","src":"11854:56:23"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"11963:4:23"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"12001:4:23"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"11995:5:23"},"nodeType":"YulFunctionCall","src":"11995:11:23"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"11969:25:23"},"nodeType":"YulFunctionCall","src":"11969:38:23"},{"name":"newLen","nodeType":"YulIdentifier","src":"12009:6:23"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"11919:43:23"},"nodeType":"YulFunctionCall","src":"11919:97:23"},"nodeType":"YulExpressionStatement","src":"11919:97:23"},{"nodeType":"YulVariableDeclaration","src":"12025:18:23","value":{"kind":"number","nodeType":"YulLiteral","src":"12042:1:23","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"12029:9:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12052:23:23","value":{"kind":"number","nodeType":"YulLiteral","src":"12071:4:23","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"12056:11:23","type":""}]},{"nodeType":"YulAssignment","src":"12084:24:23","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"12097:11:23"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"12084:9:23"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"12154:656:23","statements":[{"nodeType":"YulVariableDeclaration","src":"12168:35:23","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"12187:6:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12199:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12195:3:23"},"nodeType":"YulFunctionCall","src":"12195:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12183:3:23"},"nodeType":"YulFunctionCall","src":"12183:20:23"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"12172:7:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12216:49:23","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"12260:4:23"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"12230:29:23"},"nodeType":"YulFunctionCall","src":"12230:35:23"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"12220:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12278:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"12287:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"12282:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"12365:172:23","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"12390:6:23"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12408:3:23"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"12413:9:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12404:3:23"},"nodeType":"YulFunctionCall","src":"12404:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12398:5:23"},"nodeType":"YulFunctionCall","src":"12398:26:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"12383:6:23"},"nodeType":"YulFunctionCall","src":"12383:42:23"},"nodeType":"YulExpressionStatement","src":"12383:42:23"},{"nodeType":"YulAssignment","src":"12442:24:23","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"12456:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"12464:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12452:3:23"},"nodeType":"YulFunctionCall","src":"12452:14:23"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"12442:6:23"}]},{"nodeType":"YulAssignment","src":"12483:40:23","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"12500:9:23"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"12511:11:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12496:3:23"},"nodeType":"YulFunctionCall","src":"12496:27:23"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"12483:9:23"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12312:1:23"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"12315:7:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12309:2:23"},"nodeType":"YulFunctionCall","src":"12309:14:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12324:28:23","statements":[{"nodeType":"YulAssignment","src":"12326:24:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12335:1:23"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"12338:11:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12331:3:23"},"nodeType":"YulFunctionCall","src":"12331:19:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"12326:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"12305:3:23","statements":[]},"src":"12301:236:23"},{"body":{"nodeType":"YulBlock","src":"12585:166:23","statements":[{"nodeType":"YulVariableDeclaration","src":"12603:43:23","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12630:3:23"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"12635:9:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12626:3:23"},"nodeType":"YulFunctionCall","src":"12626:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12620:5:23"},"nodeType":"YulFunctionCall","src":"12620:26:23"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"12607:9:23","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"12670:6:23"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"12682:9:23"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12709:1:23","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"12712:6:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12705:3:23"},"nodeType":"YulFunctionCall","src":"12705:14:23"},{"kind":"number","nodeType":"YulLiteral","src":"12721:3:23","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12701:3:23"},"nodeType":"YulFunctionCall","src":"12701:24:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12731:1:23","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12727:3:23"},"nodeType":"YulFunctionCall","src":"12727:6:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"12697:3:23"},"nodeType":"YulFunctionCall","src":"12697:37:23"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12693:3:23"},"nodeType":"YulFunctionCall","src":"12693:42:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12678:3:23"},"nodeType":"YulFunctionCall","src":"12678:58:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"12663:6:23"},"nodeType":"YulFunctionCall","src":"12663:74:23"},"nodeType":"YulExpressionStatement","src":"12663:74:23"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"12556:7:23"},{"name":"newLen","nodeType":"YulIdentifier","src":"12565:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12553:2:23"},"nodeType":"YulFunctionCall","src":"12553:19:23"},"nodeType":"YulIf","src":"12550:201:23"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"12771:4:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12785:1:23","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"12788:6:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12781:3:23"},"nodeType":"YulFunctionCall","src":"12781:14:23"},{"kind":"number","nodeType":"YulLiteral","src":"12797:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12777:3:23"},"nodeType":"YulFunctionCall","src":"12777:22:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"12764:6:23"},"nodeType":"YulFunctionCall","src":"12764:36:23"},"nodeType":"YulExpressionStatement","src":"12764:36:23"}]},"nodeType":"YulCase","src":"12147:663:23","value":{"kind":"number","nodeType":"YulLiteral","src":"12152:1:23","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"12827:234:23","statements":[{"nodeType":"YulVariableDeclaration","src":"12841:14:23","value":{"kind":"number","nodeType":"YulLiteral","src":"12854:1:23","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12845:5:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"12890:67:23","statements":[{"nodeType":"YulAssignment","src":"12908:35:23","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12927:3:23"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"12932:9:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12923:3:23"},"nodeType":"YulFunctionCall","src":"12923:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12917:5:23"},"nodeType":"YulFunctionCall","src":"12917:26:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"12908:5:23"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"12871:6:23"},"nodeType":"YulIf","src":"12868:89:23"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"12977:4:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13036:5:23"},{"name":"newLen","nodeType":"YulIdentifier","src":"13043:6:23"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"12983:52:23"},"nodeType":"YulFunctionCall","src":"12983:67:23"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"12970:6:23"},"nodeType":"YulFunctionCall","src":"12970:81:23"},"nodeType":"YulExpressionStatement","src":"12970:81:23"}]},"nodeType":"YulCase","src":"12819:242:23","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"12127:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"12135:2:23","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12124:2:23"},"nodeType":"YulFunctionCall","src":"12124:14:23"},"nodeType":"YulSwitch","src":"12117:944:23"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"11796:4:23","type":""},{"name":"src","nodeType":"YulTypedName","src":"11802:3:23","type":""}],"src":"11715:1352:23"},{"body":{"nodeType":"YulBlock","src":"13275:286:23","statements":[{"nodeType":"YulVariableDeclaration","src":"13285:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13303:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"13308:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13299:3:23"},"nodeType":"YulFunctionCall","src":"13299:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"13312:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13295:3:23"},"nodeType":"YulFunctionCall","src":"13295:19:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13289:2:23","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13330:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13345:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"13353:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13341:3:23"},"nodeType":"YulFunctionCall","src":"13341:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13323:6:23"},"nodeType":"YulFunctionCall","src":"13323:34:23"},"nodeType":"YulExpressionStatement","src":"13323:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13377:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13388:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13373:3:23"},"nodeType":"YulFunctionCall","src":"13373:18:23"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13397:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"13405:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13393:3:23"},"nodeType":"YulFunctionCall","src":"13393:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13366:6:23"},"nodeType":"YulFunctionCall","src":"13366:43:23"},"nodeType":"YulExpressionStatement","src":"13366:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13429:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13440:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13425:3:23"},"nodeType":"YulFunctionCall","src":"13425:18:23"},{"name":"value2","nodeType":"YulIdentifier","src":"13445:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13418:6:23"},"nodeType":"YulFunctionCall","src":"13418:34:23"},"nodeType":"YulExpressionStatement","src":"13418:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13472:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13483:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13468:3:23"},"nodeType":"YulFunctionCall","src":"13468:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"13488:3:23","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13461:6:23"},"nodeType":"YulFunctionCall","src":"13461:31:23"},"nodeType":"YulExpressionStatement","src":"13461:31:23"},{"nodeType":"YulAssignment","src":"13501:54:23","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13527:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13539:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13550:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13535:3:23"},"nodeType":"YulFunctionCall","src":"13535:19:23"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"13509:17:23"},"nodeType":"YulFunctionCall","src":"13509:46:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13501:4:23"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13220:9:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13231:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13239:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13247:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13255:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13266:4:23","type":""}],"src":"13072:489:23"},{"body":{"nodeType":"YulBlock","src":"13646:169:23","statements":[{"body":{"nodeType":"YulBlock","src":"13692:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13701:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13704:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13694:6:23"},"nodeType":"YulFunctionCall","src":"13694:12:23"},"nodeType":"YulExpressionStatement","src":"13694:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13667:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"13676:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13663:3:23"},"nodeType":"YulFunctionCall","src":"13663:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"13688:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13659:3:23"},"nodeType":"YulFunctionCall","src":"13659:32:23"},"nodeType":"YulIf","src":"13656:52:23"},{"nodeType":"YulVariableDeclaration","src":"13717:29:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13736:9:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13730:5:23"},"nodeType":"YulFunctionCall","src":"13730:16:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13721:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13779:5:23"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"13755:23:23"},"nodeType":"YulFunctionCall","src":"13755:30:23"},"nodeType":"YulExpressionStatement","src":"13755:30:23"},{"nodeType":"YulAssignment","src":"13794:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"13804:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13794:6:23"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13612:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13623:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13635:6:23","type":""}],"src":"13566:249:23"},{"body":{"nodeType":"YulBlock","src":"14007:309:23","statements":[{"nodeType":"YulVariableDeclaration","src":"14017:27:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14037:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14031:5:23"},"nodeType":"YulFunctionCall","src":"14031:13:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14021:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14092:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"14100:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14088:3:23"},"nodeType":"YulFunctionCall","src":"14088:17:23"},{"name":"pos","nodeType":"YulIdentifier","src":"14107:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"14112:6:23"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"14053:34:23"},"nodeType":"YulFunctionCall","src":"14053:66:23"},"nodeType":"YulExpressionStatement","src":"14053:66:23"},{"nodeType":"YulVariableDeclaration","src":"14128:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14145:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"14150:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14141:3:23"},"nodeType":"YulFunctionCall","src":"14141:16:23"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"14132:5:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14166:29:23","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14188:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14182:5:23"},"nodeType":"YulFunctionCall","src":"14182:13:23"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"14170:8:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14243:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"14251:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14239:3:23"},"nodeType":"YulFunctionCall","src":"14239:17:23"},{"name":"end_1","nodeType":"YulIdentifier","src":"14258:5:23"},{"name":"length_1","nodeType":"YulIdentifier","src":"14265:8:23"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"14204:34:23"},"nodeType":"YulFunctionCall","src":"14204:70:23"},"nodeType":"YulExpressionStatement","src":"14204:70:23"},{"nodeType":"YulAssignment","src":"14283:27:23","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"14294:5:23"},{"name":"length_1","nodeType":"YulIdentifier","src":"14301:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14290:3:23"},"nodeType":"YulFunctionCall","src":"14290:20:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14283:3:23"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13975:3:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13980:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13988:6:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13999:3:23","type":""}],"src":"13820:496:23"},{"body":{"nodeType":"YulBlock","src":"14450:145:23","statements":[{"nodeType":"YulAssignment","src":"14460:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14472:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14483:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14468:3:23"},"nodeType":"YulFunctionCall","src":"14468:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14460:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14502:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14517:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14533:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"14538:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14529:3:23"},"nodeType":"YulFunctionCall","src":"14529:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"14542:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14525:3:23"},"nodeType":"YulFunctionCall","src":"14525:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14513:3:23"},"nodeType":"YulFunctionCall","src":"14513:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14495:6:23"},"nodeType":"YulFunctionCall","src":"14495:51:23"},"nodeType":"YulExpressionStatement","src":"14495:51:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14566:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14577:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14562:3:23"},"nodeType":"YulFunctionCall","src":"14562:18:23"},{"name":"value1","nodeType":"YulIdentifier","src":"14582:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14555:6:23"},"nodeType":"YulFunctionCall","src":"14555:34:23"},"nodeType":"YulExpressionStatement","src":"14555:34:23"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14411:9:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14422:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14430:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14441:4:23","type":""}],"src":"14321:274:23"},{"body":{"nodeType":"YulBlock","src":"14649:79:23","statements":[{"nodeType":"YulAssignment","src":"14659:17:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14671:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"14674:1:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14667:3:23"},"nodeType":"YulFunctionCall","src":"14667:9:23"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"14659:4:23"}]},{"body":{"nodeType":"YulBlock","src":"14700:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14702:16:23"},"nodeType":"YulFunctionCall","src":"14702:18:23"},"nodeType":"YulExpressionStatement","src":"14702:18:23"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"14691:4:23"},{"name":"x","nodeType":"YulIdentifier","src":"14697:1:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14688:2:23"},"nodeType":"YulFunctionCall","src":"14688:11:23"},"nodeType":"YulIf","src":"14685:37:23"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14631:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"14634:1:23","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"14640:4:23","type":""}],"src":"14600:128:23"},{"body":{"nodeType":"YulBlock","src":"14765:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14782:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14789:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"14794:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14785:3:23"},"nodeType":"YulFunctionCall","src":"14785:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14775:6:23"},"nodeType":"YulFunctionCall","src":"14775:31:23"},"nodeType":"YulExpressionStatement","src":"14775:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14822:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14825:4:23","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14815:6:23"},"nodeType":"YulFunctionCall","src":"14815:15:23"},"nodeType":"YulExpressionStatement","src":"14815:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14846:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14849:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14839:6:23"},"nodeType":"YulFunctionCall","src":"14839:15:23"},"nodeType":"YulExpressionStatement","src":"14839:15:23"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"14733:127:23"},{"body":{"nodeType":"YulBlock","src":"14897:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14914:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14921:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"14926:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14917:3:23"},"nodeType":"YulFunctionCall","src":"14917:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14907:6:23"},"nodeType":"YulFunctionCall","src":"14907:31:23"},"nodeType":"YulExpressionStatement","src":"14907:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14954:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14957:4:23","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14947:6:23"},"nodeType":"YulFunctionCall","src":"14947:15:23"},"nodeType":"YulExpressionStatement","src":"14947:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14978:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14981:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14971:6:23"},"nodeType":"YulFunctionCall","src":"14971:15:23"},"nodeType":"YulExpressionStatement","src":"14971:15:23"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"14865:127:23"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 31), _2), 63), _2))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), src, length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_string(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_uint256t_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_bool(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_bool(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_26a18b82a6f0089994fa1fc7c15d389f66d55b2b42f9d4738227fb927dd79151__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"Caller does not has a DEFAULT_AD\")\n        mstore(add(headStart, 96), \"MIN_ROLE\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_96265c9a7a9576744e74229ec48afeae05f496150ec706fc9d69b4d994b10fa4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"This NFT was not permitted to tr\")\n        mstore(add(headStart, 96), \"ansfer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_df799cddfe1e8e896d8d4ad58f231c73395b1e5aae588589151e636922b9fd0b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Caller has been freeze\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e688d7497ddb1402e497ed0319ede17625ff78c3f261503d4327ab1b642407bb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"This NFT was not permitted to bu\")\n        mstore(add(headStart, 96), \"rn\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f73ae05a0e7fa0084b25cebcc7c99c97b88354866069b73642dfeeee8282b4dd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Caller does not own this NFT\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_0d23406286cff9f065550eeba5e3e1e76b7868deae85a2bc79d8a126c15e661d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"This NFT is not publicly mintabl\")\n        mstore(add(headStart, 96), \"e\")\n        tail := add(headStart, 128)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n}","id":23,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x274 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4F6CCCE7 GT PUSH2 0x151 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xD5391393 GT PUSH2 0x87 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x563 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x578 JUMPI DUP1 PUSH4 0xDCF993EE EQ PUSH2 0x58B JUMPI DUP1 PUSH4 0xE276FEA3 EQ PUSH2 0x598 JUMPI DUP1 PUSH4 0xE485857B EQ PUSH2 0x5BB JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x5CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x504 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x517 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x52A JUMPI DUP1 PUSH4 0xCFBD4885 EQ PUSH2 0x53D JUMPI DUP1 PUSH4 0xD204C45E EQ PUSH2 0x550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9010D07C GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x4BB JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4CE JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4E1 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x4E9 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x4F1 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x410 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x45C JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x46F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x482 JUMPI DUP1 PUSH4 0x71222467 EQ PUSH2 0x495 JUMPI DUP1 PUSH4 0x8D1FDF2F EQ PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x282C51F3 GT PUSH2 0x1EA JUMPI DUP1 PUSH4 0x36568ABE GT PUSH2 0x1AE JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0x3CF40DF3 EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0x423F6CEF EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x45C8B1A6 EQ PUSH2 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x282C51F3 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0x2D345670 EQ PUSH2 0x39F JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x35BB3E16 EQ PUSH2 0x3D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10511F96 GT PUSH2 0x23C JUMPI DUP1 PUSH4 0x10511F96 EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0x162094C4 EQ PUSH2 0x31C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x32F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0x261707FA EQ PUSH2 0x377 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2A1 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x900CC33 EQ PUSH2 0x2E1 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2F6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28C PUSH2 0x287 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F88 JUMP JUMPDEST PUSH2 0x5E1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A9 PUSH2 0x5F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x298 SWAP2 SWAP1 PUSH2 0x1FF5 JUMP JUMPDEST PUSH2 0x2C9 PUSH2 0x2C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0x684 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x298 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x2EF CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x6AD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F4 PUSH2 0x304 CALLDATASIZE PUSH1 0x4 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0x6F8 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x317 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x707 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x32A CALLDATASIZE PUSH1 0x4 PUSH2 0x212E JUMP JUMPDEST PUSH2 0x746 JUMP JUMPDEST PUSH1 0x9 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x298 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x34F CALLDATASIZE PUSH1 0x4 PUSH2 0x2175 JUMP JUMPDEST PUSH2 0x777 JUMP JUMPDEST PUSH2 0x333 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x385 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x802 JUMP JUMPDEST PUSH2 0x333 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25B4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x841 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x3C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x21B1 JUMP JUMPDEST PUSH2 0x873 JUMP JUMPDEST PUSH2 0x333 PUSH2 0x3D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0x898 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x3E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0x8FD JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x3F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x21B1 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x28C SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x41E CALLDATASIZE PUSH1 0x4 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0x967 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x431 CALLDATASIZE PUSH1 0x4 PUSH2 0x2175 JUMP JUMPDEST PUSH2 0xA32 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x444 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0xA4D JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x457 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0xBAA JUMP JUMPDEST PUSH2 0x333 PUSH2 0x46A CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0xC29 JUMP JUMPDEST PUSH2 0x2C9 PUSH2 0x47D CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0xC82 JUMP JUMPDEST PUSH2 0x333 PUSH2 0x490 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0xC8D JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x21ED JUMP JUMPDEST PUSH2 0xCD5 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x4B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0xD0F JUMP JUMPDEST PUSH2 0x2C9 PUSH2 0x4C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2208 JUMP JUMPDEST PUSH2 0xD8A JUMP JUMPDEST PUSH2 0x28C PUSH2 0x4DC CALLDATASIZE PUSH1 0x4 PUSH2 0x21B1 JUMP JUMPDEST PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x2A9 PUSH2 0xDD4 JUMP JUMPDEST PUSH2 0x333 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x4FF CALLDATASIZE PUSH1 0x4 PUSH2 0x222A JUMP JUMPDEST PUSH2 0xDE3 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x512 CALLDATASIZE PUSH1 0x4 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0xDEE JUMP JUMPDEST PUSH2 0x2A9 PUSH2 0x525 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0xE05 JUMP JUMPDEST PUSH2 0x333 PUSH2 0x538 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0xE10 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x54B CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH2 0xE27 JUMP JUMPDEST PUSH2 0x333 PUSH2 0x55E CALLDATASIZE PUSH1 0x4 PUSH2 0x22D0 JUMP JUMPDEST PUSH2 0xE66 JUMP JUMPDEST PUSH2 0x333 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25D4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x586 CALLDATASIZE PUSH1 0x4 PUSH2 0x21B1 JUMP JUMPDEST PUSH2 0xF61 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x28C SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x5A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x203D JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2F4 PUSH2 0x5C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x21ED JUMP JUMPDEST PUSH2 0xF86 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x5DC CALLDATASIZE PUSH1 0x4 PUSH2 0x2308 JUMP JUMPDEST PUSH2 0xFC7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EC DUP3 PUSH2 0xFF5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x601 SWAP1 PUSH2 0x2332 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x62D SWAP1 PUSH2 0x2332 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x67A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x64F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x67A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x65D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x68F DUP3 PUSH2 0x101A JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x6B8 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x6DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6F5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25B4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xF61 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x703 DUP3 DUP3 CALLER PUSH2 0x1053 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x712 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x72E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x6F5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25B4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x751 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x76D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x703 DUP3 DUP3 PUSH2 0x1060 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7A1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AE DUP4 DUP4 CALLER PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7FC JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x80D PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x829 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x6F5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25D4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x84C PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x868 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x6F5 PUSH1 0x0 DUP3 PUSH2 0xF61 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x88E DUP2 PUSH2 0x10C5 JUMP JUMPDEST PUSH2 0x7FC DUP4 DUP4 PUSH2 0x10CF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A3 DUP4 PUSH2 0xC8D JUMP JUMPDEST DUP3 LT PUSH2 0x8D4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x295F44F7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6D4 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x908 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x924 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x6F5 PUSH1 0x0 DUP3 PUSH2 0x873 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x958 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x962 DUP3 DUP3 PUSH2 0x1104 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x9CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973204E465420776173206E6F74207065726D697474656420746F207472 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x30B739B332B9 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6D4 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 SUB PUSH2 0xA2B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x43616C6C657220686173206265656E20667265657A65 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0x703 CALLER DUP4 DUP4 JUMPDEST PUSH2 0x962 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xDEE JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xAB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973204E465420776173206E6F74207065726D697474656420746F206275 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x3937 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6D4 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 SUB PUSH2 0xB0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x43616C6C657220686173206265656E20667265657A65 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB27 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25B4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0xDA9 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xB38 JUMPI PUSH2 0x703 DUP3 PUSH2 0x1131 JUMP JUMPDEST PUSH2 0xB41 DUP3 PUSH2 0xC82 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBA1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C657220646F6573206E6F74206F776E2074686973204E465400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0x703 DUP3 PUSH2 0x1131 JUMP JUMPDEST PUSH2 0xBB5 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xAF85B60D26151EDD11443B704D424DA6C43D0468F2235EBAE3D1904DBC323049 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC34 PUSH1 0x9 SLOAD SWAP1 JUMP JUMPDEST DUP3 LT PUSH2 0xC5D JUMPI PUSH1 0x40 MLOAD PUSH4 0x295F44F7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x9 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xC70 JUMPI PUSH2 0xC70 PUSH2 0x23B4 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EC DUP3 PUSH2 0x101A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCB9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xCE0 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0xCFC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xD1A PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0xD36 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xAF85B60D26151EDD11443B704D424DA6C43D0468F2235EBAE3D1904DBC323049 SWAP2 ADD PUSH2 0xC1E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xDA2 SWAP1 DUP4 PUSH2 0x116C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x601 SWAP1 PUSH2 0x2332 JUMP JUMPDEST PUSH2 0x703 CALLER DUP4 DUP4 PUSH2 0x1178 JUMP JUMPDEST PUSH2 0xDF9 DUP5 DUP5 DUP5 PUSH2 0x777 JUMP JUMPDEST PUSH2 0x7FC DUP5 DUP5 DUP5 DUP5 PUSH2 0x1217 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5EC DUP3 PUSH2 0x1340 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x5EC SWAP1 PUSH2 0x1449 JUMP JUMPDEST PUSH2 0xE32 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0xE4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x6F5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25D4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xF61 JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xE79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x10 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x0 PUSH2 0xEA0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x25D4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND DUP1 PUSH2 0xEB1 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xEEF JUMPI PUSH1 0xE SLOAD PUSH2 0xEC3 DUP6 DUP3 PUSH2 0x1453 JUMP JUMPDEST PUSH2 0xECD DUP2 DUP6 PUSH2 0x1060 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xEE0 SWAP2 SWAP1 PUSH2 0x23E0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP SWAP1 SWAP3 POP PUSH2 0xF51 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND PUSH2 0xF4B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973204E4654206973206E6F74207075626C69636C79206D696E7461626C PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x65 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST PUSH1 0x10 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xF7C DUP2 PUSH2 0x10C5 JUMP JUMPDEST PUSH2 0x7FC DUP4 DUP4 PUSH2 0x1104 JUMP JUMPDEST PUSH2 0xF91 PUSH1 0x0 CALLER PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0xFAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D4 SWAP1 PUSH2 0x236C JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH2 0x100 MUL PUSH2 0xFF00 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x5EC JUMPI POP PUSH2 0x5EC DUP3 PUSH2 0x146D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x5EC JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0x962 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1492 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1078 DUP3 DUP3 PUSH2 0x2441 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10BD DUP5 DUP5 DUP5 PUSH2 0x1598 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x6F5 DUP2 CALLER PUSH2 0x1665 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10DC DUP5 DUP5 PUSH2 0x169E JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xDA2 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x10FC SWAP1 DUP5 PUSH2 0x1732 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1111 DUP5 DUP5 PUSH2 0x1747 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xDA2 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x10FC SWAP1 DUP5 PUSH2 0x17B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1140 PUSH1 0x0 DUP4 PUSH1 0x0 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA2 DUP4 DUP4 PUSH2 0x17C9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x11AA JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x7FC JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1259 SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2501 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1294 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1291 SWAP2 DUP2 ADD SWAP1 PUSH2 0x253E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x12FD JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x12C2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12C7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x12F5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0x1339 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x134B DUP3 PUSH2 0x101A JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x1365 SWAP1 PUSH2 0x2332 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1391 SWAP1 PUSH2 0x2332 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13DE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13B3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x13DE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13C1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x13FC PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x140E JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1440 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1428 SWAP3 SWAP2 SWAP1 PUSH2 0x255B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10BD DUP5 PUSH2 0x17F3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5EC DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x703 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1867 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x5EC JUMPI POP PUSH2 0x5EC DUP3 PUSH2 0x187E JUMP JUMPDEST DUP1 DUP1 PUSH2 0x14A6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1568 JUMPI PUSH1 0x0 PUSH2 0x14B6 DUP5 PUSH2 0x101A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x14E2 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x14F5 JUMPI POP PUSH2 0x14F3 DUP2 DUP5 PUSH2 0xFC7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x151E JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1566 JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x15A6 DUP6 DUP6 DUP6 PUSH2 0x18A3 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1603 JUMPI PUSH2 0x15FE DUP5 PUSH1 0x9 DUP1 SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD DUP4 SSTORE SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x6E1540171B6C0C960B71A7020D9F60077F6AF931A8BBF590DA0223DACF75C7AF ADD SSTORE JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1626 JUMPI PUSH2 0x1626 DUP2 DUP6 PUSH2 0x199C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1642 JUMPI PUSH2 0x163D DUP5 PUSH2 0x1A2D JUMP JUMPDEST PUSH2 0x10BD JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x10BD JUMPI PUSH2 0x10BD DUP6 DUP6 PUSH2 0x1ADC JUMP JUMPDEST PUSH2 0x166F DUP3 DUP3 PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16AA DUP4 DUP4 PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0x172A JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x16E2 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x5EC JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1B2C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1753 DUP4 DUP4 PUSH2 0xDA9 JUMP JUMPDEST ISZERO PUSH2 0x172A JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1B73 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x17E0 JUMPI PUSH2 0x17E0 PUSH2 0x23B4 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x17FE DUP3 PUSH2 0x101A JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1816 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1836 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xDA2 JUMP JUMPDEST DUP1 PUSH2 0x1840 DUP5 PUSH2 0x1C66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1851 SWAP3 SWAP2 SWAP1 PUSH2 0x255B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1871 DUP4 DUP4 PUSH2 0x1CF9 JUMP JUMPDEST PUSH2 0x962 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1217 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x780E9D63 PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x5EC JUMPI POP PUSH2 0x5EC DUP3 PUSH2 0x1D5E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x18D0 JUMPI PUSH2 0x18D0 DUP2 DUP5 DUP7 PUSH2 0x1D83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x190E JUMPI PUSH2 0x18ED PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1492 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x193D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19A7 DUP4 PUSH2 0xC8D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 DUP3 EQ PUSH2 0x19FA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP5 DUP5 MSTORE DUP2 DUP5 KECCAK256 DUP2 SWAP1 SSTORE DUP4 MSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE PUSH1 0x7 DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE SWAP1 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1A3F SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x258A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x9 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 DUP5 SWAP1 DUP2 LT PUSH2 0x1A67 JUMPI PUSH2 0x1A67 PUSH2 0x23B4 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x9 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1A88 JUMPI PUSH2 0x1A88 PUSH2 0x23B4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 DUP2 MSTORE PUSH1 0xA SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP5 SWAP1 SSTORE DUP6 DUP3 MSTORE DUP2 KECCAK256 SSTORE PUSH1 0x9 DUP1 SLOAD DUP1 PUSH2 0x1AC0 JUMPI PUSH2 0x1AC0 PUSH2 0x259D JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x1AE9 DUP5 PUSH2 0xC8D JUMP JUMPDEST PUSH2 0x1AF3 SWAP2 SWAP1 PUSH2 0x258A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE SWAP4 DUP3 MSTORE PUSH1 0x8 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x172A JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x1C5C JUMPI PUSH1 0x0 PUSH2 0x1B97 PUSH1 0x1 DUP4 PUSH2 0x258A JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x1BAB SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x258A JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ PUSH2 0x1C10 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1BCB JUMPI PUSH2 0x1BCB PUSH2 0x23B4 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1BEE JUMPI PUSH2 0x1BEE PUSH2 0x23B4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1C21 JUMPI PUSH2 0x1C21 PUSH2 0x259D JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1C73 DUP4 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C93 JUMPI PUSH2 0x1C93 PUSH2 0x2082 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1CBD JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1CC7 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1D23 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D31 DUP4 DUP4 PUSH1 0x0 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x962 JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x24832483 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x5EC JUMPI POP PUSH2 0x5EC DUP3 PUSH2 0x1EBF JUMP JUMPDEST PUSH2 0x1D8E DUP4 DUP4 DUP4 PUSH2 0x1F0F JUMP JUMPDEST PUSH2 0x962 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1DBC JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1E26 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1E52 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1E70 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1E88 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1E9C JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1EAE JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x5EC JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x1EF0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x5EC JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x10BD JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x1F49 JUMPI POP PUSH2 0x1F49 DUP5 DUP5 PUSH2 0xFC7 JUMP JUMPDEST DUP1 PUSH2 0x10BD JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xDA2 DUP2 PUSH2 0x1F72 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FC0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1FA8 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1FE1 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1FA5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xDA2 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1FC9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x201A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2038 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x204F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDA2 DUP3 PUSH2 0x2021 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x206B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2074 DUP4 PUSH2 0x2021 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x20B3 JUMPI PUSH2 0x20B3 PUSH2 0x2082 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x20DB JUMPI PUSH2 0x20DB PUSH2 0x2082 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x20F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x211F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDA2 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x2098 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2141 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x215F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x216B DUP6 DUP3 DUP7 ADD PUSH2 0x210E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x218A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2193 DUP5 PUSH2 0x2021 JUMP JUMPDEST SWAP3 POP PUSH2 0x21A1 PUSH1 0x20 DUP6 ADD PUSH2 0x2021 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x21D4 PUSH1 0x20 DUP5 ADD PUSH2 0x2021 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2038 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDA2 DUP3 PUSH2 0x21DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x221B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x223D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2246 DUP4 PUSH2 0x2021 JUMP JUMPDEST SWAP2 POP PUSH2 0x21D4 PUSH1 0x20 DUP5 ADD PUSH2 0x21DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x226A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2273 DUP6 PUSH2 0x2021 JUMP JUMPDEST SWAP4 POP PUSH2 0x2281 PUSH1 0x20 DUP7 ADD PUSH2 0x2021 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x22B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22C4 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2098 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22EC DUP4 PUSH2 0x2021 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x215F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x231B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2324 DUP4 PUSH2 0x2021 JUMP JUMPDEST SWAP2 POP PUSH2 0x21D4 PUSH1 0x20 DUP5 ADD PUSH2 0x2021 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2346 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2366 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C657220646F6573206E6F742068617320612044454641554C545F4144 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x4D494E5F524F4C45 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x5EC JUMPI PUSH2 0x5EC PUSH2 0x23CA JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x962 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x241A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2439 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2426 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x245B JUMPI PUSH2 0x245B PUSH2 0x2082 JUMP JUMPDEST PUSH2 0x246F DUP2 PUSH2 0x2469 DUP5 SLOAD PUSH2 0x2332 JUMP JUMPDEST DUP5 PUSH2 0x23F3 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x24A4 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x248C JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x2439 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x24D3 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x24B4 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x24F1 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2534 SWAP1 DUP4 ADD DUP5 PUSH2 0x1FC9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xDA2 DUP2 PUSH2 0x1F72 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x256D DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1FA5 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2581 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1FA5 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x5EC JUMPI PUSH2 0x5EC PUSH2 0x23CA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID EXTCODECOPY GT 0xD1 PUSH13 0xBAFFD01DF69CE1C404F6340EE0 JUMPI 0x49 DUP16 PUSH0 STOP 0x24 PUSH2 0x90EA SLOAD 0x22 SDIV PUSH23 0xA8489F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8 LOG1 0xAB 0x4C 0xEE 0xEF DUP14 SWAP9 SHR DUP10 JUMP 0xA6 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E 0xCA 0x29 PC SELFDESTRUCT PC 0xE2 RETURN 0x4E GASPRICE 0x25 CALL 0xD4 CALL 0x23 0xC5 SWAP9 PUSH8 0x1E0F4BC42E871CFD EXTCODESIZE CALLVALUE DUP1 SUB XOR JUMP PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"1747:3859:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5340:263;;;;;;:::i;:::-;;:::i;:::-;;;565:14:23;;558:22;540:41;;528:2;513:18;5340:263:22;;;;;;;;2365:89:8;;;:::i;:::-;;;;;;;:::i;3497:154::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:23;;;1679:51;;1667:2;1652:18;3497:154:8;1533:203:23;1633:107:22;;;;;;:::i;:::-;;:::i;:::-;;3323:113:8;;;;;;:::i;:::-;;:::i;1520:105:22:-;;;;;;:::i;:::-;;:::i;3468:119::-;;;;;;:::i;:::-;;:::i;2062:102:11:-;2140:10;:17;2062:102;;;3906:25:23;;;3894:2;3879:18;2062:102:11;3760:177:23;4143:578:8;;;;;;:::i;:::-;;:::i;3810:120:0:-;;;;;;:::i;:::-;3875:7;3901:12;;;:6;:12;;;;;:22;;;;3810:120;1292:105:22;;;;;;:::i;:::-;;:::i;444:62::-;;-1:-1:-1;;;;;;;;;;;444:62:22;;1173:111;;;;;;:::i;:::-;;:::i;4226:136:0:-;;;;;;:::i;:::-;;:::i;1736:255:11:-;;;;;;:::i;:::-;;:::i;1056:109:22:-;;;;;;:::i;:::-;;:::i;5328:245:0:-;;;;;;:::i;:::-;;:::i;1891:25:22:-;;;;;;;;;;;;4373:266;;;;;;:::i;:::-;;:::i;4787:132:8:-;;;;;;:::i;:::-;;:::i;3595:500:22:-;;;;;;:::i;:::-;;:::i;2806:133::-;;;;;;:::i;:::-;;:::i;2236:226:11:-;;;;;;:::i;:::-;;:::i;2185:118:8:-;;;;;;:::i;:::-;;:::i;1920:208::-;;;;;;:::i;:::-;;:::i;2468:109:22:-;;;;;;:::i;:::-;;:::i;2668:130::-;;;;;;:::i;:::-;;:::i;1526:142:2:-;;;;;;:::i;:::-;;:::i;2854:136:0:-;;;;;;:::i;:::-;;:::i;2518:93:8:-;;;:::i;2187:49:0:-;;2232:4;2187:49;;3718:144:8;;;;;;:::i;:::-;;:::i;4985:208::-;;;;;;:::i;:::-;;:::i;4737:171:22:-;;;;;;:::i;:::-;;:::i;1836:131:2:-;;;;;;:::i;:::-;;:::i;1405:107:22:-;;;;;;:::i;:::-;;:::i;2947:513::-;;;;;;:::i;:::-;;:::i;375:62::-;;-1:-1:-1;;;;;;;;;;;375:62:22;;4642:138:0;;;;;;:::i;:::-;;:::i;1846:38:22:-;;;;;;;;;1974:46;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2585:75;;;;;;:::i;:::-;;:::i;3928:153:8:-;;;;;;:::i;:::-;;:::i;5340:263:22:-;5530:4;5559:36;5583:11;5559:23;:36::i;:::-;5552:43;5340:263;-1:-1:-1;;5340:263:22:o;2365:89:8:-;2410:13;2442:5;2435:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:89;:::o;3497:154::-;3564:7;3583:22;3597:7;3583:13;:22::i;:::-;-1:-1:-1;6008:7:8;6034:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6034:24:8;3623:21;5938:127;1633:107:22;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;;;;;;;;;1701:31:::1;-1:-1:-1::0;;;;;;;;;;;1725:6:22::1;1701:10;:31::i;:::-;1633:107:::0;:::o;3323:113:8:-;3394:35;3403:2;3407:7;735:10:15;3394:8:8;:35::i;:::-;3323:113;;:::o;1520:105:22:-;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;1587:30:::1;-1:-1:-1::0;;;;;;;;;;;1610:6:22::1;1587:9;:30::i;3468:119::-:0;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;3553:26:::1;3566:7;3575:3;3553:12;:26::i;4143:578:8:-:0;-1:-1:-1;;;;;4237:16:8;;4233:87;;4276:33;;-1:-1:-1;;;4276:33:8;;4306:1;4276:33;;;1679:51:23;1652:18;;4276:33:8;1533:203:23;4233:87:8;4538:21;4562:34;4570:2;4574:7;735:10:15;4562:7:8;:34::i;:::-;4538:58;;4627:4;-1:-1:-1;;;;;4610:21:8;:13;-1:-1:-1;;;;;4610:21:8;;4606:109;;4654:50;;-1:-1:-1;;;4654:50:8;;-1:-1:-1;;;;;8153:15:23;;;4654:50:8;;;8135:34:23;8185:18;;;8178:34;;;8248:15;;8228:18;;;8221:43;8070:18;;4654:50:8;7895:375:23;4606:109:8;4223:498;4143:578;;;:::o;1292:105:22:-;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;1359:30:::1;-1:-1:-1::0;;;;;;;;;;;1382:6:22::1;1359:9;:30::i;1173:111::-:0;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;1239:37:::1;2232:4:0;1270:5:22::0;1239:10:::1;:37::i;4226:136:0:-:0;3875:7;3901:12;;;:6;:12;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4330:25:::1;4341:4;4347:7;4330:10;:25::i;1736:255:11:-:0;1824:7;1856:16;1866:5;1856:9;:16::i;:::-;1847:5;:25;1843:99;;1895:36;;-1:-1:-1;;;1895:36:11;;-1:-1:-1;;;;;8467:32:23;;1895:36:11;;;8449:51:23;8516:18;;;8509:34;;;8422:18;;1895:36:11;8275:274:23;1843:99:11;-1:-1:-1;;;;;;1958:19:11;;;;;;;;:12;:19;;;;;;;;:26;;;;;;;;;1736:255::o;1056:109:22:-;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;1121:36:::1;2232:4:0;1151:5:22::0;1121:9:::1;:36::i;5328:245:0:-:0;-1:-1:-1;;;;;5421:34:0;;735:10:15;5421:34:0;5417:102;;5478:30;;-1:-1:-1;;;5478:30:0;;;;;;;;;;;5417:102;5529:37;5541:4;5547:18;5529:11;:37::i;:::-;;5328:245;;:::o;4373:266:22:-;4451:5;;;;;;;4450:6;4442:57;;;;-1:-1:-1;;;4442:57:22;;8756:2:23;4442:57:22;;;8738:21:23;8795:2;8775:18;;;8768:30;8834:34;8814:18;;;8807:62;-1:-1:-1;;;8885:18:23;;;8878:36;8931:19;;4442:57:22;8554:402:23;4442:57:22;4533:10;4518:26;;;;:14;:26;;;;;;;;:34;;:26;:34;4510:69;;;;-1:-1:-1;;;4510:69:22;;9163:2:23;4510:69:22;;;9145:21:23;9202:2;9182:18;;;9175:30;-1:-1:-1;;;9221:18:23;;;9214:52;9283:18;;4510:69:22;8961:346:23;4510:69:22;4590:41;4607:10;4619:2;4623:7;4787:132:8;4873:39;4890:4;4896:2;4900:7;4873:39;;;;;;;;;;;;:16;:39::i;3595:500:22:-;3653:5;;;;;;;3652:6;3644:53;;;;-1:-1:-1;;;3644:53:22;;9514:2:23;3644:53:22;;;9496:21:23;9553:2;9533:18;;;9526:30;9592:34;9572:18;;;9565:62;-1:-1:-1;;;9643:18:23;;;9636:32;9685:19;;3644:53:22;9312:398:23;3644:53:22;3731:10;3716:26;;;;:14;:26;;;;;;;;:34;;:26;:34;3708:69;;;;-1:-1:-1;;;3708:69:22;;9163:2:23;3708:69:22;;;9145:21:23;9202:2;9182:18;;;9175:30;-1:-1:-1;;;9221:18:23;;;9214:52;9283:18;;3708:69:22;8961:346:23;3708:69:22;3790:13;3806:32;-1:-1:-1;;;;;;;;;;;3827:10:22;3806:7;:32::i;:::-;3790:48;;3853:8;3849:239;;;3878:14;3884:7;3878:5;:14::i;3849:239::-;3965:16;3973:7;3965;:16::i;:::-;-1:-1:-1;;;;;3951:30:22;:10;-1:-1:-1;;;;;3951:30:22;;3925:120;;;;-1:-1:-1;;;3925:120:22;;9917:2:23;3925:120:22;;;9899:21:23;9956:2;9936:18;;;9929:30;9995;9975:18;;;9968:58;10043:18;;3925:120:22;9715:352:23;3925:120:22;4062:14;4068:7;4062:5;:14::i;2806:133::-;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;-1:-1:-1;;;;;2869:23:22;::::1;2895:5;2869:23:::0;;;:14:::1;:23;::::0;;;;;;;;:31;;-1:-1:-1;;2869:31:22::1;::::0;;2916:15;;1679:51:23;;;2916:15:22::1;::::0;1652:18:23;2916:15:22::1;;;;;;;;2806:133:::0;:::o;2236:226:11:-;2302:7;2334:13;2140:10;:17;;2062:102;2334:13;2325:5;:22;2321:101;;2370:41;;-1:-1:-1;;;2370:41:11;;2401:1;2370:41;;;8449:51:23;8516:18;;;8509:34;;;8422:18;;2370:41:11;8275:274:23;2321:101:11;2438:10;2449:5;2438:17;;;;;;;;:::i;:::-;;;;;;;;;2431:24;;2236:226;;;:::o;2185:118:8:-;2248:7;2274:22;2288:7;2274:13;:22::i;1920:208::-;1983:7;-1:-1:-1;;;;;2006:19:8;;2002:87;;2048:30;;-1:-1:-1;;;2048:30:8;;2075:1;2048:30;;;1679:51:23;1652:18;;2048:30:8;1533:203:23;2002:87:8;-1:-1:-1;;;;;;2105:16:8;;;;;:9;:16;;;;;;;1920:208::o;2468:109:22:-;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;2540:18:::1;:29:::0;;-1:-1:-1;;2540:29:22::1;::::0;::::1;;::::0;;;::::1;::::0;;2468:109::o;2668:130::-;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;-1:-1:-1;;;;;2729:23:22;::::1;;::::0;;;:14:::1;:23;::::0;;;;;;;;:30;;-1:-1:-1;;2729:30:22::1;2755:4;2729:30;::::0;;2775:15;;1679:51:23;;;2775:15:22::1;::::0;1652:18:23;2775:15:22::1;1533:203:23::0;1526:142:2;1607:7;1633:18;;;:12;:18;;;;;:28;;1655:5;1633:21;:28::i;:::-;1626:35;1526:142;-1:-1:-1;;;1526:142:2:o;2854:136:0:-;2931:4;2954:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;;;;2854:136::o;2518:93:8:-;2565:13;2597:7;2590:14;;;;;:::i;3718:144::-;3803:52;735:10:15;3836:8:8;3846;3803:18;:52::i;4985:208::-;5098:31;5111:4;5117:2;5121:7;5098:12;:31::i;:::-;5139:47;5162:4;5168:2;5172:7;5181:4;5139:22;:47::i;4737:171:22:-;4844:13;4877:23;4892:7;4877:14;:23::i;1836:131:2:-;1907:7;1933:18;;;:12;:18;;;;;:27;;:25;:27::i;1405:107:22:-;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;1473:31:::1;-1:-1:-1::0;;;;;;;;;;;1497:6:22::1;1473:10;:31::i;2947:513::-:0;2179:6;;3024:7;;2179:6;;2178:7;2170:16;;;;;;2197:6;:13;;-1:-1:-1;;2197:13:22;2206:4;2197:13;;;:6;3060:32:::1;-1:-1:-1::0;;;;;;;;;;;3081:10:22::1;3060:7;:32::i;:::-;3109:18;::::0;3044:48;;-1:-1:-1;3109:18:22::1;;::::0;:30:::1;;;3131:8;3109:30;3105:348;;;3174:9;::::0;3198:22:::1;3208:2:::0;3174:9;3198::::1;:22::i;:::-;3235:26;3248:7;3257:3;3235:12;:26::i;:::-;3289:1;3276:9;;:14;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;3314:7:22;;-1:-1:-1;3307:14:22::1;::::0;-1:-1:-1;;3307:14:22::1;3105:348;3362:18;::::0;::::1;;3354:64;;;::::0;-1:-1:-1;;;3354:64:22;;10668:2:23;3354:64:22::1;::::0;::::1;10650:21:23::0;10707:2;10687:18;;;10680:30;10746:34;10726:18;;;10719:62;-1:-1:-1;;;10797:18:23;;;10790:31;10838:19;;3354:64:22::1;10466:397:23::0;3354:64:22::1;3440:1;3433:8;;;2221:1;2233:6:::0;:14;;-1:-1:-1;;2233:14:22;;;2947:513;;-1:-1:-1;;2947:513:22:o;4642:138:0:-;3875:7;3901:12;;;:6;:12;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4747:26:::1;4759:4;4765:7;4747:11;:26::i;2585:75:22:-:0;921:39;2232:4:0;949:10:22;921:7;:39::i;:::-;899:129;;;;-1:-1:-1;;;899:129:22;;;;;;;:::i;:::-;2641:5:::1;:11:::0;;;::::1;;;;-1:-1:-1::0;;2641:11:22;;::::1;::::0;;;::::1;::::0;;2585:75::o;3928:153:8:-;-1:-1:-1;;;;;4039:25:8;;;4016:4;4039:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;3928:153::o;729:212:2:-;814:4;-1:-1:-1;;;;;;837:57:2;;-1:-1:-1;;;837:57:2;;:97;;;898:36;922:11;898:23;:36::i;16138:241:8:-;16201:7;5799:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5799:16:8;;16263:88;;16309:31;;-1:-1:-1;;;16309:31:8;;;;;3906:25:23;;;3879:18;;16309:31:8;3760:177:23;14418:120:8;14498:33;14507:2;14511:7;14520:4;14526;14498:8;:33::i;1922:167:12:-;2013:19;;;;:10;:19;;;;;:31;2035:9;2013:19;:31;:::i;:::-;-1:-1:-1;2059:23:12;;3906:25:23;;;2059:23:12;;3894:2:23;3879:18;2059:23:12;;;;;;;1922:167;;:::o;5109:223:22:-;5266:7;5292:32;5306:2;5310:7;5319:4;5292:13;:32::i;:::-;5285:39;5109:223;-1:-1:-1;;;;5109:223:22:o;3199:103:0:-;3265:30;3276:4;735:10:15;3265::0;:30::i;2069:257:2:-;2155:4;2171:12;2186:31;2203:4;2209:7;2186:16;:31::i;:::-;2171:46;;2231:7;2227:69;;;2254:18;;;;:12;:18;;;;;:31;;2277:7;2254:22;:31::i;:::-;;2312:7;2069:257;-1:-1:-1;;;2069:257:2:o;2429:262::-;2516:4;2532:12;2547:32;2565:4;2571:7;2547:17;:32::i;:::-;2532:47;;2593:7;2589:72;;;2616:18;;;;:12;:18;;;;;:34;;2642:7;2616:25;:34::i;11462:227:8:-;11513:21;11537:40;11553:1;11557:7;11574:1;11537:7;:40::i;:::-;11513:64;-1:-1:-1;;;;;;11591:27:8;;11587:96;;11641:31;;-1:-1:-1;;;11641:31:8;;;;;3906:25:23;;;3879:18;;11641:31:8;3760:177:23;9574:156:21;9648:7;9698:22;9702:3;9714:5;9698:3;:22::i;15591:312:8:-;-1:-1:-1;;;;;15698:22:8;;15694:91;;15743:31;;-1:-1:-1;;;15743:31:8;;-1:-1:-1;;;;;1697:32:23;;15743:31:8;;;1679:51:23;1652:18;;15743:31:8;1533:203:23;15694:91:8;-1:-1:-1;;;;;15794:25:8;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;15794:46:8;;;;;;;;;;15855:41;;540::23;;;15855::8;;513:18:23;15855:41:8;;;;;;;15591:312;;;:::o;16918:782::-;-1:-1:-1;;;;;17034:14:8;;;:18;17030:664;;17072:71;;-1:-1:-1;;;17072:71:8;;-1:-1:-1;;;;;17072:36:8;;;;;:71;;735:10:15;;17123:4:8;;17129:7;;17138:4;;17072:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17072:71:8;;;;;;;;-1:-1:-1;;17072:71:8;;;;;;;;;;;;:::i;:::-;;;17068:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17381:6;:13;17398:1;17381:18;17377:293;;17430:25;;-1:-1:-1;;;17430:25:8;;-1:-1:-1;;;;;1697:32:23;;17430:25:8;;;1679:51:23;1652:18;;17430:25:8;1533:203:23;17377:293:8;17622:6;17616:13;17607:6;17603:2;17599:15;17592:38;17068:616;-1:-1:-1;;;;;;17190:51:8;;-1:-1:-1;;;17190:51:8;17186:130;;17272:25;;-1:-1:-1;;;17272:25:8;;-1:-1:-1;;;;;1697:32:23;;17272:25:8;;;1679:51:23;1652:18;;17272:25:8;1533:203:23;17186:130:8;17144:186;16918:782;;;;:::o;1210:593:12:-;1283:13;1308:22;1322:7;1308:13;:22::i;:::-;-1:-1:-1;1341:23:12;1367:19;;;:10;:19;;;;;1341:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1396:18;1417:10;3250:9:8;;;;;;;;;-1:-1:-1;3250:9:8;;;3174:92;1417:10:12;1396:31;;1506:4;1500:18;1522:1;1500:23;1496:70;;-1:-1:-1;1546:9:12;1210:593;-1:-1:-1;;1210:593:12:o;1496:70::-;1665:23;;:27;1661:95;;1729:4;1735:9;1715:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1708:37;;;;1210:593;;;:::o;1661:95::-;1773:23;1788:7;1773:14;:23::i;9117:115:21:-;9180:7;9206:19;9214:3;4556:18;;4474:107;10633:100:8;10700:26;10710:2;10714:7;10700:26;;;;;;;;;;;;:9;:26::i;2565:202:0:-;2650:4;-1:-1:-1;;;;;;2673:47:0;;-1:-1:-1;;;2673:47:0;;:87;;;2724:36;2748:11;2724:23;:36::i;14720:662:8:-;14880:9;:31;;;-1:-1:-1;;;;;;14893:18:8;;;;14880:31;14876:460;;;14927:13;14943:22;14957:7;14943:13;:22::i;:::-;14927:38;-1:-1:-1;;;;;;15093:18:8;;;;;;:35;;;15124:4;-1:-1:-1;;;;;15115:13:8;:5;-1:-1:-1;;;;;15115:13:8;;;15093:35;:69;;;;;15133:29;15150:5;15157:4;15133:16;:29::i;:::-;15132:30;15093:69;15089:142;;;15189:27;;-1:-1:-1;;;15189:27:8;;-1:-1:-1;;;;;1697:32:23;;15189:27:8;;;1679:51:23;1652:18;;15189:27:8;1533:203:23;15089:142:8;15249:9;15245:81;;;15303:7;15299:2;-1:-1:-1;;;;;15283:28:8;15292:5;-1:-1:-1;;;;;15283:28:8;;;;;;;;;;;15245:81;14913:423;14876:460;-1:-1:-1;;15346:24:8;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;15346:29:8;-1:-1:-1;;;;;15346:29:8;;;;;;;;;;14720:662::o;2518:625:11:-;2613:7;2632:21;2656:32;2670:2;2674:7;2683:4;2656:13;:32::i;:::-;2632:56;-1:-1:-1;;;;;;2703:27:11;;2699:210;;2746:40;2778:7;3949:10;:17;;3922:24;;;;:15;:24;;;;;:44;;;3976:24;;;;;;;;;;;;3846:161;2746:40;2699:210;;;2824:2;-1:-1:-1;;;;;2807:19:11;:13;-1:-1:-1;;;;;2807:19:11;;2803:106;;2842:56;2875:13;2890:7;2842:32;:56::i;:::-;-1:-1:-1;;;;;2922:16:11;;2918:188;;2954:45;2991:7;2954:36;:45::i;:::-;2918:188;;;3037:2;-1:-1:-1;;;;;3020:19:11;:13;-1:-1:-1;;;;;3020:19:11;;3016:90;;3055:40;3083:2;3087:7;3055:27;:40::i;3432:197:0:-;3520:22;3528:4;3534:7;3520;:22::i;:::-;3515:108;;3565:47;;-1:-1:-1;;;3565:47:0;;-1:-1:-1;;;;;8467:32:23;;3565:47:0;;;8449:51:23;8516:18;;;8509:34;;;8422:18;;3565:47:0;8275:274:23;6179:316:0;6256:4;6277:22;6285:4;6291:7;6277;:22::i;:::-;6272:217;;6315:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;6315:29:0;;;;;;;;;:36;;-1:-1:-1;;6315:36:0;6347:4;6315:36;;;6397:12;735:10:15;;656:96;6397:12:0;-1:-1:-1;;;;;6370:40:0;6388:7;-1:-1:-1;;;;;6370:40:0;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:0;6424:11;;6272:217;-1:-1:-1;6473:5:0;6466:12;;8316:150:21;8386:4;8409:50;8414:3;-1:-1:-1;;;;;8434:23:21;;8409:4;:50::i;6730:317:0:-;6808:4;6828:22;6836:4;6842:7;6828;:22::i;:::-;6824:217;;;6898:5;6866:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;6866:29:0;;;;;;;;;;:37;;-1:-1:-1;;6866:37:0;;;6922:40;735:10:15;;6866:12:0;;6922:40;;6898:5;6922:40;-1:-1:-1;6983:4:0;6976:11;;8634:156:21;8707:4;8730:53;8738:3;-1:-1:-1;;;;;8758:23:21;;8730:7;:53::i;4923:118::-;4990:7;5016:3;:11;;5028:5;5016:18;;;;;;;;:::i;:::-;;;;;;;;;5009:25;;4923:118;;;;:::o;2677:255:8:-;2741:13;2766:22;2780:7;2766:13;:22::i;:::-;;2799:21;2823:10;3250:9;;;;;;;;;-1:-1:-1;3250:9:8;;;3174:92;2823:10;2799:34;;2874:1;2856:7;2850:21;:25;:75;;;;;;;;;;;;;;;;;2892:7;2901:18;:7;:16;:18::i;:::-;2878:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2843:82;2677:255;-1:-1:-1;;;2677:255:8:o;10954:182::-;11048:18;11054:2;11058:7;11048:5;:18::i;:::-;11076:53;11107:1;11111:2;11115:7;11124:4;11076:22;:53::i;1435:222:11:-;1537:4;-1:-1:-1;;;;;;1560:50:11;;-1:-1:-1;;;1560:50:11;;:90;;;1614:36;1638:11;1614:23;:36::i;8838:795:8:-;8924:7;5799:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5799:16:8;;;;9035:18;;;9031:86;;9069:37;9086:4;9092;9098:7;9069:16;:37::i;:::-;-1:-1:-1;;;;;9161:18:8;;;9157:256;;9277:48;9294:1;9298:7;9315:1;9319:5;9277:8;:48::i;:::-;-1:-1:-1;;;;;9368:15:8;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;9368:20:8;;;9157:256;-1:-1:-1;;;;;9427:16:8;;;9423:107;;-1:-1:-1;;;;;9487:13:8;;;;;;:9;:13;;;;;:18;;9504:1;9487:18;;;9423:107;9540:16;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9540:21:8;-1:-1:-1;;;;;9540:21:8;;;;;;;;;9577:27;;9540:16;;9577:27;;;;;;;9622:4;8838:795;-1:-1:-1;;;;8838:795:8:o;4624:959:11:-;4886:22;4911:15;4921:4;4911:9;:15::i;:::-;4936:18;4957:26;;;:17;:26;;;;;;4886:40;;-1:-1:-1;5087:28:11;;;5083:323;;-1:-1:-1;;;;;5153:18:11;;5131:19;5153:18;;;:12;:18;;;;;;;;:34;;;;;;;;;5202:30;;;;;;:44;;;5318:30;;:17;:30;;;;;:43;;;5083:323;-1:-1:-1;5499:26:11;;;;:17;:26;;;;;;;;5492:33;;;-1:-1:-1;;;;;5542:18:11;;;;;:12;:18;;;;;:34;;;;;;;5535:41;4624:959::o;5871:1061::-;6145:10;:17;6120:22;;6145:21;;6165:1;;6145:21;:::i;:::-;6176:18;6197:24;;;:15;:24;;;;;;6565:10;:26;;6120:46;;-1:-1:-1;6197:24:11;;6120:46;;6565:26;;;;;;:::i;:::-;;;;;;;;;6543:48;;6627:11;6602:10;6613;6602:22;;;;;;;;:::i;:::-;;;;;;;;;;;;:36;;;;6706:28;;;:15;:28;;;;;;;:41;;;6875:24;;;;;6868:31;6909:10;:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;5942:990;;;5871:1061;:::o;3437:214::-;3521:14;3554:1;3538:13;3548:2;3538:9;:13::i;:::-;:17;;;;:::i;:::-;-1:-1:-1;;;;;3565:16:11;;;;;;;:12;:16;;;;;;;;:24;;;;;;;;:34;;;3609:26;;;:17;:26;;;;;;:35;;;;-1:-1:-1;3437:214:11:o;2241:406:21:-;2304:4;4360:21;;;:14;;;:21;;;;;;2320:321;;-1:-1:-1;2362:23:21;;;;;;;;:11;:23;;;;;;;;;;;;;2544:18;;2520:21;;;:14;;;:21;;;;;;:42;;;;2576:11;;2815:1368;2881:4;3010:21;;;:14;;;:21;;;;;;3046:13;;3042:1135;;3413:18;3434:12;3445:1;3434:8;:12;:::i;:::-;3480:18;;3413:33;;-1:-1:-1;3460:17:21;;3480:22;;3501:1;;3480:22;:::i;:::-;3460:42;;3535:9;3521:10;:23;3517:378;;3564:17;3584:3;:11;;3596:9;3584:22;;;;;;;;:::i;:::-;;;;;;;;;3564:42;;3731:9;3705:3;:11;;3717:10;3705:23;;;;;;;;:::i;:::-;;;;;;;;;;;;:35;;;;3844:25;;;:14;;;:25;;;;;:36;;;3517:378;3973:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;4076:3;:14;;:21;4091:5;4076:21;;;;;;;;;;;4069:28;;;4119:4;4112:11;;;;;;;3042:1135;4161:5;4154:12;;;;;637:698:16;693:13;742:14;759:17;770:5;759:10;:17::i;:::-;779:1;759:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:18:16;-1:-1:-1;794:41:16;-1:-1:-1;955:28:16;;;971:2;955:28;1010:282;-1:-1:-1;;1041:5:16;-1:-1:-1;;;1175:2:16;1164:14;;1159:32;1041:5;1146:46;1236:2;1227:11;;;-1:-1:-1;1256:21:16;1010:282;1256:21;-1:-1:-1;1312:6:16;637:698;-1:-1:-1;;;637:698:16:o;9955:327:8:-;-1:-1:-1;;;;;10022:16:8;;10018:87;;10061:33;;-1:-1:-1;;;10061:33:8;;10091:1;10061:33;;;1679:51:23;1652:18;;10061:33:8;1533:203:23;10018:87:8;10114:21;10138:32;10146:2;10150:7;10167:1;10138:7;:32::i;:::-;10114:56;-1:-1:-1;;;;;;10184:27:8;;;10180:96;;10234:31;;-1:-1:-1;;;10234:31:8;;10262:1;10234:31;;;1679:51:23;1652:18;;10234:31:8;1533:203:23;937:207:12;1039:4;-1:-1:-1;;;;;;1062:35:12;;-1:-1:-1;;;1062:35:12;;:75;;;1101:36;1125:11;1101:23;:36::i;7082:368:8:-;7194:38;7208:5;7215:7;7224;7194:13;:38::i;:::-;7189:255;;-1:-1:-1;;;;;7252:19:8;;7248:186;;7298:31;;-1:-1:-1;;;7298:31:8;;;;;3906:25:23;;;3879:18;;7298:31:8;3760:177:23;7248:186:8;7375:44;;-1:-1:-1;;;7375:44:8;;-1:-1:-1;;;;;8467:32:23;;7375:44:8;;;8449:51:23;8516:18;;;8509:34;;;8422:18;;7375:44:8;8275:274:23;12214:916:19;12267:7;;-1:-1:-1;;;12342:17:19;;12338:103;;-1:-1:-1;;;12379:17:19;;;-1:-1:-1;12424:2:19;12414:12;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;-1:-1:-1;12540:2:19;12530:12;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;-1:-1:-1;12656:2:19;12646:12;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;-1:-1:-1;12770:1:19;12760:11;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;-1:-1:-1;12883:1:19;12873:11;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;-1:-1:-1;12996:1:19;12986:11;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;13117:6;12214:916;-1:-1:-1;;12214:916:19:o;1561:300:8:-;1663:4;-1:-1:-1;;;;;;1698:40:8;;-1:-1:-1;;;1698:40:8;;:104;;-1:-1:-1;;;;;;;1754:48:8;;-1:-1:-1;;;1754:48:8;1698:104;:156;;;-1:-1:-1;;;;;;;;;;861:40:17;;;1818:36:8;762:146:17;6376:272:8;6479:4;-1:-1:-1;;;;;6514:21:8;;;;;;:127;;;6561:7;-1:-1:-1;;;;;6552:16:8;:5;-1:-1:-1;;;;;6552:16:8;;:52;;;;6572:32;6589:5;6596:7;6572:16;:32::i;:::-;6552:88;;;-1:-1:-1;;6008:7:8;6034:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6034:24:8;;;6608:32;;;;;-1:-1:-1;6376:272:8:o;14:131:23:-;-1:-1:-1;;;;;;88:32:23;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:23;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:23;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:23:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:23;;1348:180;-1:-1:-1;1348:180:23:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:23;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:186::-;1978:6;2031:2;2019:9;2010:7;2006:23;2002:32;1999:52;;;2047:1;2044;2037:12;1999:52;2070:29;2089:9;2070:29;:::i;2110:254::-;2178:6;2186;2239:2;2227:9;2218:7;2214:23;2210:32;2207:52;;;2255:1;2252;2245:12;2207:52;2278:29;2297:9;2278:29;:::i;:::-;2268:39;2354:2;2339:18;;;;2326:32;;-1:-1:-1;;;2110:254:23:o;2369:127::-;2430:10;2425:3;2421:20;2418:1;2411:31;2461:4;2458:1;2451:15;2485:4;2482:1;2475:15;2501:632;2566:5;2596:18;2637:2;2629:6;2626:14;2623:40;;;2643:18;;:::i;:::-;2718:2;2712:9;2686:2;2772:15;;-1:-1:-1;;2768:24:23;;;2794:2;2764:33;2760:42;2748:55;;;2818:18;;;2838:22;;;2815:46;2812:72;;;2864:18;;:::i;:::-;2904:10;2900:2;2893:22;2933:6;2924:15;;2963:6;2955;2948:22;3003:3;2994:6;2989:3;2985:16;2982:25;2979:45;;;3020:1;3017;3010:12;2979:45;3070:6;3065:3;3058:4;3050:6;3046:17;3033:44;3125:1;3118:4;3109:6;3101;3097:19;3093:30;3086:41;;;;2501:632;;;;;:::o;3138:222::-;3181:5;3234:3;3227:4;3219:6;3215:17;3211:27;3201:55;;3252:1;3249;3242:12;3201:55;3274:80;3350:3;3341:6;3328:20;3321:4;3313:6;3309:17;3274:80;:::i;3365:390::-;3443:6;3451;3504:2;3492:9;3483:7;3479:23;3475:32;3472:52;;;3520:1;3517;3510:12;3472:52;3556:9;3543:23;3533:33;;3617:2;3606:9;3602:18;3589:32;3644:18;3636:6;3633:30;3630:50;;;3676:1;3673;3666:12;3630:50;3699;3741:7;3732:6;3721:9;3717:22;3699:50;:::i;:::-;3689:60;;;3365:390;;;;;:::o;3942:328::-;4019:6;4027;4035;4088:2;4076:9;4067:7;4063:23;4059:32;4056:52;;;4104:1;4101;4094:12;4056:52;4127:29;4146:9;4127:29;:::i;:::-;4117:39;;4175:38;4209:2;4198:9;4194:18;4175:38;:::i;:::-;4165:48;;4260:2;4249:9;4245:18;4232:32;4222:42;;3942:328;;;;;:::o;4642:254::-;4710:6;4718;4771:2;4759:9;4750:7;4746:23;4742:32;4739:52;;;4787:1;4784;4777:12;4739:52;4823:9;4810:23;4800:33;;4852:38;4886:2;4875:9;4871:18;4852:38;:::i;:::-;4842:48;;4642:254;;;;;:::o;4901:160::-;4966:20;;5022:13;;5015:21;5005:32;;4995:60;;5051:1;5048;5041:12;5066:180;5122:6;5175:2;5163:9;5154:7;5150:23;5146:32;5143:52;;;5191:1;5188;5181:12;5143:52;5214:26;5230:9;5214:26;:::i;5251:248::-;5319:6;5327;5380:2;5368:9;5359:7;5355:23;5351:32;5348:52;;;5396:1;5393;5386:12;5348:52;-1:-1:-1;;5419:23:23;;;5489:2;5474:18;;;5461:32;;-1:-1:-1;5251:248:23:o;5504:254::-;5569:6;5577;5630:2;5618:9;5609:7;5605:23;5601:32;5598:52;;;5646:1;5643;5636:12;5598:52;5669:29;5688:9;5669:29;:::i;:::-;5659:39;;5717:35;5748:2;5737:9;5733:18;5717:35;:::i;5763:667::-;5858:6;5866;5874;5882;5935:3;5923:9;5914:7;5910:23;5906:33;5903:53;;;5952:1;5949;5942:12;5903:53;5975:29;5994:9;5975:29;:::i;:::-;5965:39;;6023:38;6057:2;6046:9;6042:18;6023:38;:::i;:::-;6013:48;;6108:2;6097:9;6093:18;6080:32;6070:42;;6163:2;6152:9;6148:18;6135:32;6190:18;6182:6;6179:30;6176:50;;;6222:1;6219;6212:12;6176:50;6245:22;;6298:4;6290:13;;6286:27;-1:-1:-1;6276:55:23;;6327:1;6324;6317:12;6276:55;6350:74;6416:7;6411:2;6398:16;6393:2;6389;6385:11;6350:74;:::i;:::-;6340:84;;;5763:667;;;;;;;:::o;6435:396::-;6513:6;6521;6574:2;6562:9;6553:7;6549:23;6545:32;6542:52;;;6590:1;6587;6580:12;6542:52;6613:29;6632:9;6613:29;:::i;:::-;6603:39;;6693:2;6682:9;6678:18;6665:32;6720:18;6712:6;6709:30;6706:50;;;6752:1;6749;6742:12;6836:260;6904:6;6912;6965:2;6953:9;6944:7;6940:23;6936:32;6933:52;;;6981:1;6978;6971:12;6933:52;7004:29;7023:9;7004:29;:::i;:::-;6994:39;;7052:38;7086:2;7075:9;7071:18;7052:38;:::i;7101:380::-;7180:1;7176:12;;;;7223;;;7244:61;;7298:4;7290:6;7286:17;7276:27;;7244:61;7351:2;7343:6;7340:14;7320:18;7317:38;7314:161;;7397:10;7392:3;7388:20;7385:1;7378:31;7432:4;7429:1;7422:15;7460:4;7457:1;7450:15;7314:161;;7101:380;;;:::o;7486:404::-;7688:2;7670:21;;;7727:2;7707:18;;;7700:30;7766:34;7761:2;7746:18;;7739:62;-1:-1:-1;;;7832:2:23;7817:18;;7810:38;7880:3;7865:19;;7486:404::o;10072:127::-;10133:10;10128:3;10124:20;10121:1;10114:31;10164:4;10161:1;10154:15;10188:4;10185:1;10178:15;10204:127;10265:10;10260:3;10256:20;10253:1;10246:31;10296:4;10293:1;10286:15;10320:4;10317:1;10310:15;10336:125;10401:9;;;10422:10;;;10419:36;;;10435:18;;:::i;10994:545::-;11096:2;11091:3;11088:11;11085:448;;;11132:1;11157:5;11153:2;11146:17;11202:4;11198:2;11188:19;11272:2;11260:10;11256:19;11253:1;11249:27;11243:4;11239:38;11308:4;11296:10;11293:20;11290:47;;;-1:-1:-1;11331:4:23;11290:47;11386:2;11381:3;11377:12;11374:1;11370:20;11364:4;11360:31;11350:41;;11441:82;11459:2;11452:5;11449:13;11441:82;;;11504:17;;;11485:1;11474:13;11441:82;;;11445:3;;;10994:545;;;:::o;11715:1352::-;11841:3;11835:10;11868:18;11860:6;11857:30;11854:56;;;11890:18;;:::i;:::-;11919:97;12009:6;11969:38;12001:4;11995:11;11969:38;:::i;:::-;11963:4;11919:97;:::i;:::-;12071:4;;12135:2;12124:14;;12152:1;12147:663;;;;12854:1;12871:6;12868:89;;;-1:-1:-1;12923:19:23;;;12917:26;12868:89;-1:-1:-1;;11672:1:23;11668:11;;;11664:24;11660:29;11650:40;11696:1;11692:11;;;11647:57;12970:81;;12117:944;;12147:663;10941:1;10934:14;;;10978:4;10965:18;;-1:-1:-1;;12183:20:23;;;12301:236;12315:7;12312:1;12309:14;12301:236;;;12404:19;;;12398:26;12383:42;;12496:27;;;;12464:1;12452:14;;;;12331:19;;12301:236;;;12305:3;12565:6;12556:7;12553:19;12550:201;;;12626:19;;;12620:26;-1:-1:-1;;12709:1:23;12705:14;;;12721:3;12701:24;12697:37;12693:42;12678:58;12663:74;;12550:201;-1:-1:-1;;;;;12797:1:23;12781:14;;;12777:22;12764:36;;-1:-1:-1;11715:1352:23:o;13072:489::-;-1:-1:-1;;;;;13341:15:23;;;13323:34;;13393:15;;13388:2;13373:18;;13366:43;13440:2;13425:18;;13418:34;;;13488:3;13483:2;13468:18;;13461:31;;;13266:4;;13509:46;;13535:19;;13527:6;13509:46;:::i;:::-;13501:54;13072:489;-1:-1:-1;;;;;;13072:489:23:o;13566:249::-;13635:6;13688:2;13676:9;13667:7;13663:23;13659:32;13656:52;;;13704:1;13701;13694:12;13656:52;13736:9;13730:16;13755:30;13779:5;13755:30;:::i;13820:496::-;13999:3;14037:6;14031:13;14053:66;14112:6;14107:3;14100:4;14092:6;14088:17;14053:66;:::i;:::-;14182:13;;14141:16;;;;14204:70;14182:13;14141:16;14251:4;14239:17;;14204:70;:::i;:::-;14290:20;;13820:496;-1:-1:-1;;;;13820:496:23:o;14600:128::-;14667:9;;;14688:11;;;14685:37;;;14702:18;;:::i;14733:127::-;14794:10;14789:3;14785:20;14782:1;14775:31;14825:4;14822:1;14815:15;14849:4;14846:1;14839:15"},"gasEstimates":{"creation":{"codeDepositCost":"1953800","executionCost":"infinite","totalCost":"infinite"},"external":{"BURNER_ROLE()":"infinite","DEFAULT_ADMIN_ROLE()":"306","MINTER_ROLE()":"infinite","approve(address,uint256)":"31582","balanceOf(address)":"2679","burn(uint256)":"infinite","freeze(address)":"28144","freezeAccounts(address)":"2630","getApproved(uint256)":"infinite","getRoleAdmin(bytes32)":"2578","getRoleMember(bytes32,uint256)":"infinite","getRoleMemberCount(bytes32)":"infinite","grantAdmin(address)":"infinite","grantBurner(address)":"infinite","grantMinter(address)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2721","isApprovedForAll(address,address)":"infinite","isPubliclyMintable()":"2387","isSBT()":"2377","name()":"infinite","ownerOf(uint256)":"infinite","renounceRole(bytes32,address)":"infinite","revokeAdmin(address)":"infinite","revokeBurner(address)":"infinite","revokeMinter(address)":"infinite","revokeRole(bytes32,address)":"infinite","safeMint(address,string)":"infinite","safeTransfer(address,uint256)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","setPubliclyMintable(bool)":"26958","setToSBT(bool)":"26992","setTokenURI(uint256,string)":"infinite","supportsInterface(bytes4)":"infinite","symbol()":"infinite","tokenByIndex(uint256)":"6761","tokenOfOwnerByIndex(address,uint256)":"5042","tokenURI(uint256)":"infinite","totalSupply()":"2371","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","unfreeze(address)":"28148"},"internal":{"_increaseBalance(address,uint128)":"infinite","_update(address,uint256,address)":"infinite"}},"methodIdentifiers":{"BURNER_ROLE()":"282c51f3","DEFAULT_ADMIN_ROLE()":"a217fddf","MINTER_ROLE()":"d5391393","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","freeze(address)":"8d1fdf2f","freezeAccounts(address)":"e276fea3","getApproved(uint256)":"081812fc","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantAdmin(address)":"35bb3e16","grantBurner(address)":"10511f96","grantMinter(address)":"261707fa","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isApprovedForAll(address,address)":"e985e9c5","isPubliclyMintable()":"dcf993ee","isSBT()":"3cf40df3","name()":"06fdde03","ownerOf(uint256)":"6352211e","renounceRole(bytes32,address)":"36568abe","revokeAdmin(address)":"2d345670","revokeBurner(address)":"0900cc33","revokeMinter(address)":"cfbd4885","revokeRole(bytes32,address)":"d547741f","safeMint(address,string)":"d204c45e","safeTransfer(address,uint256)":"423f6cef","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setPubliclyMintable(bool)":"71222467","setToSBT(bool)":"e485857b","setTokenURI(uint256,string)":"162094c4","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","unfreeze(address)":"45c8b1a6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721EnumerableForbiddenBatchMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ERC721OutOfBoundsIndex\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"Memo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"grantAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"grantBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"grantMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPubliclyMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSBT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"revokeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"}],\"name\":\"setPubliclyMintable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"SBT\",\"type\":\"bool\"}],\"name\":\"setToSBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC721EnumerableForbiddenBatchMint()\":[{\"details\":\"Batch mint is not allowed.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721OutOfBoundsIndex(address,uint256)\":[{\"details\":\"An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PalmNFT.sol\":\"PalmNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControlEnumerable} from \\\"./IAccessControlEnumerable.sol\\\";\\nimport {AccessControl} from \\\"../AccessControl.sol\\\";\\nimport {EnumerableSet} from \\\"../../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 role => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        bool granted = super._grantRole(role, account);\\n        if (granted) {\\n            _roleMembers[role].add(account);\\n        }\\n        return granted;\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        bool revoked = super._revokeRole(role, account);\\n        if (revoked) {\\n            _roleMembers[role].remove(account);\\n        }\\n        return revoked;\\n    }\\n}\\n\",\"keccak256\":\"0xb1c906fcd870fc8dfedb63bfb1bc58b4d2a7469bc13cc44d996fda430693850a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"../IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1435f102633849858e75d7bed14c636f25448ceb3406d82992b0f2df52f4306\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x36797469c391ea5ba27408e6ca8adf0824ba6f3adea9c139be18bd6f63232c16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/PalmNFT.sol\":{\"content\":\"pragma solidity 0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\\\";\\r\\n\\r\\ncontract ACL is AccessControlEnumerable {\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(\\r\\n            hasRole(MINTER_ROLE, msg.sender),\\r\\n            \\\"Caller does not has a MINTER_ROLE\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyBurner() {\\r\\n        require(\\r\\n            hasRole(BURNER_ROLE, msg.sender),\\r\\n            \\\"Caller does not has a BURNER_ROLE\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(\\r\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\r\\n            \\\"Caller does not has a DEFAULT_ADMIN_ROLE\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function grantAdmin(address admin) external onlyAdmin {\\r\\n        grantRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n    }\\r\\n\\r\\n    function revokeAdmin(address admin) external onlyAdmin {\\r\\n        revokeRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n    }\\r\\n\\r\\n    function grantMinter(address minter) external onlyAdmin {\\r\\n        grantRole(MINTER_ROLE, minter);\\r\\n    }\\r\\n\\r\\n    function revokeMinter(address minter) external onlyAdmin {\\r\\n        revokeRole(MINTER_ROLE, minter);\\r\\n    }\\r\\n\\r\\n    function grantBurner(address burner) external onlyAdmin {\\r\\n        grantRole(BURNER_ROLE, burner);\\r\\n    }\\r\\n\\r\\n    function revokeBurner(address burner) external onlyAdmin {\\r\\n        revokeRole(BURNER_ROLE, burner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract PalmNFT is ERC721URIStorage, ERC721Enumerable, ACL {\\r\\n    event Memo(string memo);\\r\\n\\r\\n    bool public isPubliclyMintable = false;\\r\\n    bool public isSBT = false; //soul-bound nft\\r\\n    uint256 private _tokenIds;\\r\\n\\r\\n    mapping(address => bool) public freezeAccounts;\\r\\n\\r\\n    event Freeze(address account);\\r\\n    event Unfreeze(address account);\\r\\n\\r\\n\\r\\n    bool internal locked;\\r\\n\\r\\n    modifier noReentrant() {\\r\\n        require(!locked);\\r\\n        locked = true;\\r\\n        _;\\r\\n        locked = false;\\r\\n    }\\r\\n\\r\\n    constructor() ERC721(\\\"Palm-NFT\\\", \\\"PalmNFT\\\") {\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _grantRole(MINTER_ROLE, msg.sender);\\r\\n        _grantRole(BURNER_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    function setPubliclyMintable(bool mintable) public onlyAdmin {\\r\\n        isPubliclyMintable = mintable;\\r\\n    }\\r\\n\\r\\n    function setToSBT(bool SBT) public onlyAdmin {\\r\\n        isSBT = SBT;\\r\\n    }\\r\\n\\r\\n    function freeze(address account) public onlyAdmin {\\r\\n        freezeAccounts[account] = true;\\r\\n        emit Freeze(account);\\r\\n    }\\r\\n\\r\\n    function unfreeze(address account) public onlyAdmin {\\r\\n        freezeAccounts[account] = false;\\r\\n        emit Freeze(account);\\r\\n    }\\r\\n\\r\\n    function safeMint(address to, string memory uri) public noReentrant returns (uint256) {\\r\\n        bool isMinter = hasRole(MINTER_ROLE, msg.sender);\\r\\n\\r\\n        if (isPubliclyMintable || isMinter) {\\r\\n            uint256 tokenId = _tokenIds;\\r\\n            _safeMint(to, tokenId);\\r\\n            _setTokenURI(tokenId, uri);\\r\\n            _tokenIds += 1;\\r\\n\\r\\n            return tokenId;\\r\\n        } else {\\r\\n            require(isPubliclyMintable, \\\"This NFT is not publicly mintable\\\");\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTokenURI(uint256 tokenId, string memory uri) public onlyAdmin {\\r\\n        _setTokenURI(tokenId, uri);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) public {\\r\\n        require(!isSBT, \\\"This NFT was not permitted to burn\\\");\\r\\n        require(freezeAccounts[msg.sender] != true, \\\"Caller has been freeze\\\");\\r\\n\\r\\n        bool isBurner = hasRole(BURNER_ROLE, msg.sender);\\r\\n        if (isBurner) {\\r\\n            _burn(tokenId);\\r\\n        } else {\\r\\n            require(\\r\\n                msg.sender == ownerOf(tokenId),\\r\\n                \\\"Caller does not own this NFT\\\"\\r\\n            );\\r\\n\\r\\n            _burn(tokenId);\\r\\n        }\\r\\n    }\\r\\n    function transfer(address to, uint256 tokenId) public {\\r\\n        require(!isSBT, \\\"This NFT was not permitted to transfer\\\");\\r\\n        require(freezeAccounts[msg.sender] != true, \\\"Caller has been freeze\\\");\\r\\n        safeTransferFrom(msg.sender, to, tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function safeTransfer(address to, uint256 tokenId) public {\\r\\n        require(!isSBT, \\\"This NFT was not permitted to transfer\\\");\\r\\n        require(freezeAccounts[msg.sender] != true, \\\"Caller has been freeze\\\");\\r\\n        safeTransferFrom(msg.sender, to, tokenId);\\r\\n    }\\r\\n\\r\\n    // overrides\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    function _increaseBalance(\\r\\n        address account, \\r\\n        uint128 value\\r\\n    ) internal override(ERC721, ERC721Enumerable) {\\r\\n        super._increaseBalance(account, value);\\r\\n    }\\r\\n\\r\\n    function _update(\\r\\n        address to, \\r\\n        uint256 tokenId, \\r\\n        address auth\\r\\n    ) internal virtual override(ERC721, ERC721Enumerable) returns (address){\\r\\n        return super._update(to, tokenId, auth);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override(AccessControlEnumerable, ERC721Enumerable, ERC721URIStorage)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x76c95fe2f0dac1925795d171ed079315468030d3023c10f433a69ae5ae24c51a\"}},\"version\":1}","storageLayout":{"storage":[{"astId":748,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":750,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":754,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":758,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":762,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":768,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2271,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":1878,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_ownedTokens","offset":0,"slot":"7","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":1882,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_ownedTokensIndex","offset":0,"slot":"8","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1885,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_allTokens","offset":0,"slot":"9","type":"t_array(t_uint256)dyn_storage"},{"astId":1889,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_allTokensIndex","offset":0,"slot":"10","type":"t_mapping(t_uint256,t_uint256)"},{"astId":26,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_roles","offset":0,"slot":"11","type":"t_mapping(t_bytes32,t_struct(RoleData)21_storage)"},{"astId":400,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_roleMembers","offset":0,"slot":"12","type":"t_mapping(t_bytes32,t_struct(AddressSet)4227_storage)"},{"astId":4663,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"isPubliclyMintable","offset":0,"slot":"13","type":"t_bool"},{"astId":4666,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"isSBT","offset":1,"slot":"13","type":"t_bool"},{"astId":4668,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_tokenIds","offset":0,"slot":"14","type":"t_uint256"},{"astId":4672,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"freezeAccounts","offset":0,"slot":"15","type":"t_mapping(t_address,t_bool)"},{"astId":4682,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"locked","offset":0,"slot":"16","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(AddressSet)4227_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)4227_storage"},"t_mapping(t_bytes32,t_struct(RoleData)21_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)21_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(AddressSet)4227_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":4226,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3912_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)21_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":18,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":20,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)3912_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":3907,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":3911,"contract":"contracts/PalmNFT.sol:PalmNFT","label":"_positions","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}